//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MainHPFullViewController`, and contains static references to 1 segues.
    struct mainHPFullViewController {
      /// Segue identifier `notificationsVCIdentifier`.
      static let notificationsVCIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainHPFullViewController, NotificationsHPFullViewController> = Rswift.StoryboardSegueIdentifier(identifier: "notificationsVCIdentifier")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `notificationsVCIdentifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func notificationsVCIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainHPFullViewController, NotificationsHPFullViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainHPFullViewController.notificationsVCIdentifier, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 11 storyboards.
  struct storyboard {
    /// Storyboard `CreateAccount`.
    static let createAccount = _R.storyboard.createAccount()
    /// Storyboard `HugoPayFullCashIn`.
    static let hugoPayFullCashIn = _R.storyboard.hugoPayFullCashIn()
    /// Storyboard `HugoPayFullSplash`.
    static let hugoPayFullSplash = _R.storyboard.hugoPayFullSplash()
    /// Storyboard `HugoPayFullTutorial`.
    static let hugoPayFullTutorial = _R.storyboard.hugoPayFullTutorial()
    /// Storyboard `HugoPayFull`.
    static let hugoPayFull = _R.storyboard.hugoPayFull()
    /// Storyboard `RequestMoney`.
    static let requestMoney = _R.storyboard.requestMoney()
    /// Storyboard `SendMoney`.
    static let sendMoney = _R.storyboard.sendMoney()
    /// Storyboard `Transactions`.
    static let transactions = _R.storyboard.transactions()
    /// Storyboard `TutorialHPFull`.
    static let tutorialHPFull = _R.storyboard.tutorialHPFull()
    /// Storyboard `TutorialMenu`.
    static let tutorialMenu = _R.storyboard.tutorialMenu()
    /// Storyboard `TutorialSettingsHPFull`.
    static let tutorialSettingsHPFull = _R.storyboard.tutorialSettingsHPFull()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CreateAccount", bundle: ...)`
    static func createAccount(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createAccount)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HugoPayFull", bundle: ...)`
    static func hugoPayFull(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hugoPayFull)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HugoPayFullCashIn", bundle: ...)`
    static func hugoPayFullCashIn(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hugoPayFullCashIn)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HugoPayFullSplash", bundle: ...)`
    static func hugoPayFullSplash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hugoPayFullSplash)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HugoPayFullTutorial", bundle: ...)`
    static func hugoPayFullTutorial(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hugoPayFullTutorial)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RequestMoney", bundle: ...)`
    static func requestMoney(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.requestMoney)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SendMoney", bundle: ...)`
    static func sendMoney(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendMoney)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Transactions", bundle: ...)`
    static func transactions(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transactions)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TutorialHPFull", bundle: ...)`
    static func tutorialHPFull(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tutorialHPFull)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TutorialMenu", bundle: ...)`
    static func tutorialMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tutorialMenu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TutorialSettingsHPFull", bundle: ...)`
    static func tutorialSettingsHPFull(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tutorialSettingsHPFull)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 41 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `BlackAlert`.
    static let blackAlert = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlackAlert")
    /// Color `BlackShadow`.
    static let blackShadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlackShadow")
    /// Color `BlueGrayShadow`.
    static let blueGrayShadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueGrayShadow")
    /// Color `BlueMagentaishGray`.
    static let blueMagentaishGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueMagentaishGray")
    /// Color `BrightPurple`.
    static let brightPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "BrightPurple")
    /// Color `BurntSienna`.
    static let burntSienna = Rswift.ColorResource(bundle: R.hostingBundle, name: "BurntSienna")
    /// Color `DarkPurple`.
    static let darkPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkPurple")
    /// Color `DeepPurple`.
    static let deepPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "DeepPurple")
    /// Color `FilterOptionUnSelected`.
    static let filterOptionUnSelected = Rswift.ColorResource(bundle: R.hostingBundle, name: "FilterOptionUnSelected")
    /// Color `Grape`.
    static let grape = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grape")
    /// Color `GraySuit`.
    static let graySuit = Rswift.ColorResource(bundle: R.hostingBundle, name: "GraySuit")
    /// Color `GreenMint`.
    static let greenMint = Rswift.ColorResource(bundle: R.hostingBundle, name: "GreenMint")
    /// Color `LightGray1`.
    static let lightGray1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGray1")
    /// Color `LightGray2`.
    static let lightGray2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGray2")
    /// Color `LightGrayShadow`.
    static let lightGrayShadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGrayShadow")
    /// Color `LightGrayishPurple1`.
    static let lightGrayishPurple1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGrayishPurple1")
    /// Color `LightGrayishPurple2Shadow`.
    static let lightGrayishPurple2Shadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGrayishPurple2Shadow")
    /// Color `LightGrayishPurple2`.
    static let lightGrayishPurple2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGrayishPurple2")
    /// Color `Mobster`.
    static let mobster = Rswift.ColorResource(bundle: R.hostingBundle, name: "Mobster")
    /// Color `PaleLilac`.
    static let paleLilac = Rswift.ColorResource(bundle: R.hostingBundle, name: "PaleLilac")
    /// Color `PaleOrange`.
    static let paleOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "PaleOrange")
    /// Color `PalePurple`.
    static let palePurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "PalePurple")
    /// Color `PurpleCake`.
    static let purpleCake = Rswift.ColorResource(bundle: R.hostingBundle, name: "PurpleCake")
    /// Color `PurpleTabBar`.
    static let purpleTabBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "PurpleTabBar")
    /// Color `StrongPurple1`.
    static let strongPurple1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "StrongPurple1")
    /// Color `StrongPurple2`.
    static let strongPurple2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "StrongPurple2")
    /// Color `TransactionFilterLine`.
    static let transactionFilterLine = Rswift.ColorResource(bundle: R.hostingBundle, name: "TransactionFilterLine")
    /// Color `TransactionFilterSelected`.
    static let transactionFilterSelected = Rswift.ColorResource(bundle: R.hostingBundle, name: "TransactionFilterSelected")
    /// Color `WhiteEdit`.
    static let whiteEdit = Rswift.ColorResource(bundle: R.hostingBundle, name: "WhiteEdit")
    /// Color `YummyGreenClear`.
    static let yummyGreenClear = Rswift.ColorResource(bundle: R.hostingBundle, name: "YummyGreenClear")
    /// Color `YummyGreenDark2`.
    static let yummyGreenDark2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "YummyGreenDark2")
    /// Color `YummyGreenDark`.
    static let yummyGreenDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "YummyGreenDark")
    /// Color `YummyGreenLite`.
    static let yummyGreenLite = Rswift.ColorResource(bundle: R.hostingBundle, name: "YummyGreenLite")
    /// Color `YummyGreen`.
    static let yummyGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "YummyGreen")
    /// Color `headerPurple`.
    static let headerPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "headerPurple")
    /// Color `headlineGray`.
    static let headlineGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "headlineGray")
    /// Color `newPurple`.
    static let newPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "newPurple")
    /// Color `statusYellow`.
    static let statusYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "statusYellow")
    /// Color `strokeWhite`.
    static let strokeWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "strokeWhite")
    /// Color `textfieldPlaceholder`.
    static let textfieldPlaceholder = Rswift.ColorResource(bundle: R.hostingBundle, name: "textfieldPlaceholder")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlackAlert", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blackAlert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blackAlert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlackShadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blackShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blackShadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueGrayShadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueGrayShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueGrayShadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueMagentaishGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueMagentaishGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueMagentaishGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BrightPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func brightPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.brightPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BurntSienna", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func burntSienna(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.burntSienna, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DarkPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DeepPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func deepPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.deepPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "FilterOptionUnSelected", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func filterOptionUnSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.filterOptionUnSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Grape", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GraySuit", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func graySuit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.graySuit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GreenMint", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greenMint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greenMint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGray1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGray1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGray1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGray2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGray2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGray2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGrayShadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrayShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrayShadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGrayishPurple1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrayishPurple1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrayishPurple1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGrayishPurple2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrayishPurple2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrayishPurple2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGrayishPurple2Shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrayishPurple2Shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrayishPurple2Shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Mobster", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mobster(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mobster, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PaleLilac", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func paleLilac(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.paleLilac, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PaleOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func paleOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.paleOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PalePurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func palePurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.palePurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PurpleCake", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purpleCake(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purpleCake, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PurpleTabBar", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purpleTabBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purpleTabBar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "StrongPurple1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func strongPurple1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.strongPurple1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "StrongPurple2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func strongPurple2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.strongPurple2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TransactionFilterLine", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func transactionFilterLine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.transactionFilterLine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TransactionFilterSelected", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func transactionFilterSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.transactionFilterSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "WhiteEdit", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "YummyGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yummyGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yummyGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "YummyGreenClear", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yummyGreenClear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yummyGreenClear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "YummyGreenDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yummyGreenDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yummyGreenDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "YummyGreenDark2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yummyGreenDark2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yummyGreenDark2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "YummyGreenLite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yummyGreenLite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yummyGreenLite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "headerPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func headerPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.headerPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "headlineGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func headlineGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.headlineGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "newPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func newPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.newPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "statusYellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func statusYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.statusYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "strokeWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func strokeWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.strokeWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textfieldPlaceholder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textfieldPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textfieldPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlackAlert", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blackAlert(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blackAlert.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlackShadow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blackShadow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blackShadow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlueGrayShadow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueGrayShadow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueGrayShadow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlueMagentaishGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueMagentaishGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueMagentaishGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BrightPurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func brightPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.brightPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BurntSienna", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func burntSienna(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.burntSienna.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DarkPurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DeepPurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func deepPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.deepPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "FilterOptionUnSelected", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func filterOptionUnSelected(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.filterOptionUnSelected.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Grape", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grape(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grape.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GraySuit", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func graySuit(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.graySuit.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GreenMint", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greenMint(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greenMint.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGray1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGray1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGray1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGray2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGray2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGray2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGrayShadow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGrayShadow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGrayShadow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGrayishPurple1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGrayishPurple1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGrayishPurple1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGrayishPurple2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGrayishPurple2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGrayishPurple2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGrayishPurple2Shadow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGrayishPurple2Shadow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGrayishPurple2Shadow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Mobster", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mobster(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mobster.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PaleLilac", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func paleLilac(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.paleLilac.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PaleOrange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func paleOrange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.paleOrange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PalePurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func palePurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.palePurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PurpleCake", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func purpleCake(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.purpleCake.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PurpleTabBar", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func purpleTabBar(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.purpleTabBar.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "StrongPurple1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func strongPurple1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.strongPurple1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "StrongPurple2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func strongPurple2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.strongPurple2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TransactionFilterLine", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func transactionFilterLine(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.transactionFilterLine.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TransactionFilterSelected", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func transactionFilterSelected(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.transactionFilterSelected.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "WhiteEdit", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func whiteEdit(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.whiteEdit.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "YummyGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yummyGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yummyGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "YummyGreenClear", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yummyGreenClear(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yummyGreenClear.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "YummyGreenDark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yummyGreenDark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yummyGreenDark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "YummyGreenDark2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yummyGreenDark2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yummyGreenDark2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "YummyGreenLite", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yummyGreenLite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yummyGreenLite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "headerPurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func headerPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.headerPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "headlineGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func headlineGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.headlineGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "newPurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func newPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.newPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "statusYellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func statusYellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.statusYellow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "strokeWhite", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func strokeWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.strokeWhite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textfieldPlaceholder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textfieldPlaceholder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textfieldPlaceholder.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 12 files.
  struct file {
    /// Resource file `GothamHTF-Black.otf`.
    static let gothamHTFBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamHTF-Black", pathExtension: "otf")
    /// Resource file `GothamHTF-Bold.otf`.
    static let gothamHTFBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamHTF-Bold", pathExtension: "otf")
    /// Resource file `GothamHTF-Book.otf`.
    static let gothamHTFBookOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamHTF-Book", pathExtension: "otf")
    /// Resource file `GothamHTF-BookItalic.otf`.
    static let gothamHTFBookItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamHTF-BookItalic", pathExtension: "otf")
    /// Resource file `GothamHTF-Light.otf`.
    static let gothamHTFLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamHTF-Light", pathExtension: "otf")
    /// Resource file `GothamHTF-Medium.otf`.
    static let gothamHTFMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamHTF-Medium", pathExtension: "otf")
    /// Resource file `GothamHTF-Ultra.otf`.
    static let gothamHTFUltraOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamHTF-Ultra", pathExtension: "otf")
    /// Resource file `GothamHTF-XLight.otf`.
    static let gothamHTFXLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamHTF-XLight", pathExtension: "otf")
    /// Resource file `MainHugoPayFullViewModel.swift.orig`.
    static let mainHugoPayFullViewModelSwiftOrig = Rswift.FileResource(bundle: R.hostingBundle, name: "MainHugoPayFullViewModel.swift", pathExtension: "orig")
    /// Resource file `RequestMoneyTransactionDetailViewController.swift.orig`.
    static let requestMoneyTransactionDetailViewControllerSwiftOrig = Rswift.FileResource(bundle: R.hostingBundle, name: "RequestMoneyTransactionDetailViewController.swift", pathExtension: "orig")
    /// Resource file `SendMoneyTransactionDetailViewController.swift.orig`.
    static let sendMoneyTransactionDetailViewControllerSwiftOrig = Rswift.FileResource(bundle: R.hostingBundle, name: "SendMoneyTransactionDetailViewController.swift", pathExtension: "orig")
    /// Resource file `TransactionsHPFullViewModel.swift.orig`.
    static let transactionsHPFullViewModelSwiftOrig = Rswift.FileResource(bundle: R.hostingBundle, name: "TransactionsHPFullViewModel.swift", pathExtension: "orig")

    /// `bundle.url(forResource: "GothamHTF-Black", withExtension: "otf")`
    static func gothamHTFBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamHTFBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamHTF-Bold", withExtension: "otf")`
    static func gothamHTFBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamHTFBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamHTF-Book", withExtension: "otf")`
    static func gothamHTFBookOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamHTFBookOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamHTF-BookItalic", withExtension: "otf")`
    static func gothamHTFBookItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamHTFBookItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamHTF-Light", withExtension: "otf")`
    static func gothamHTFLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamHTFLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamHTF-Medium", withExtension: "otf")`
    static func gothamHTFMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamHTFMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamHTF-Ultra", withExtension: "otf")`
    static func gothamHTFUltraOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamHTFUltraOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamHTF-XLight", withExtension: "otf")`
    static func gothamHTFXLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamHTFXLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MainHugoPayFullViewModel.swift", withExtension: "orig")`
    static func mainHugoPayFullViewModelSwiftOrig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mainHugoPayFullViewModelSwiftOrig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RequestMoneyTransactionDetailViewController.swift", withExtension: "orig")`
    static func requestMoneyTransactionDetailViewControllerSwiftOrig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.requestMoneyTransactionDetailViewControllerSwiftOrig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SendMoneyTransactionDetailViewController.swift", withExtension: "orig")`
    static func sendMoneyTransactionDetailViewControllerSwiftOrig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sendMoneyTransactionDetailViewControllerSwiftOrig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TransactionsHPFullViewModel.swift", withExtension: "orig")`
    static func transactionsHPFullViewModelSwiftOrig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.transactionsHPFullViewModelSwiftOrig
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `GothamHTF-Black`.
    static let gothamHTFBlack = Rswift.FontResource(fontName: "GothamHTF-Black")
    /// Font `GothamHTF-Bold`.
    static let gothamHTFBold = Rswift.FontResource(fontName: "GothamHTF-Bold")
    /// Font `GothamHTF-BookItalic`.
    static let gothamHTFBookItalic = Rswift.FontResource(fontName: "GothamHTF-BookItalic")
    /// Font `GothamHTF-Book`.
    static let gothamHTFBook = Rswift.FontResource(fontName: "GothamHTF-Book")
    /// Font `GothamHTF-Light`.
    static let gothamHTFLight = Rswift.FontResource(fontName: "GothamHTF-Light")
    /// Font `GothamHTF-Medium`.
    static let gothamHTFMedium = Rswift.FontResource(fontName: "GothamHTF-Medium")
    /// Font `GothamHTF-Ultra`.
    static let gothamHTFUltra = Rswift.FontResource(fontName: "GothamHTF-Ultra")
    /// Font `GothamHTF-XLight`.
    static let gothamHTFXLight = Rswift.FontResource(fontName: "GothamHTF-XLight")

    /// `UIFont(name: "GothamHTF-Black", size: ...)`
    static func gothamHTFBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamHTFBlack, size: size)
    }

    /// `UIFont(name: "GothamHTF-Bold", size: ...)`
    static func gothamHTFBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamHTFBold, size: size)
    }

    /// `UIFont(name: "GothamHTF-Book", size: ...)`
    static func gothamHTFBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamHTFBook, size: size)
    }

    /// `UIFont(name: "GothamHTF-BookItalic", size: ...)`
    static func gothamHTFBookItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamHTFBookItalic, size: size)
    }

    /// `UIFont(name: "GothamHTF-Light", size: ...)`
    static func gothamHTFLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamHTFLight, size: size)
    }

    /// `UIFont(name: "GothamHTF-Medium", size: ...)`
    static func gothamHTFMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamHTFMedium, size: size)
    }

    /// `UIFont(name: "GothamHTF-Ultra", size: ...)`
    static func gothamHTFUltra(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamHTFUltra, size: size)
    }

    /// `UIFont(name: "GothamHTF-XLight", size: ...)`
    static func gothamHTFXLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamHTFXLight, size: size)
    }

    static func validate() throws {
      if R.font.gothamHTFBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamHTF-Black' could not be loaded, is 'GothamHTF-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamHTFBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamHTF-Bold' could not be loaded, is 'GothamHTF-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamHTFBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamHTF-Book' could not be loaded, is 'GothamHTF-Book.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamHTFBookItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamHTF-BookItalic' could not be loaded, is 'GothamHTF-BookItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamHTFLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamHTF-Light' could not be loaded, is 'GothamHTF-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamHTFMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamHTF-Medium' could not be loaded, is 'GothamHTF-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamHTFUltra(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamHTF-Ultra' could not be loaded, is 'GothamHTF-Ultra.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamHTFXLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamHTF-XLight' could not be loaded, is 'GothamHTF-XLight.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 723 images.
  struct image {
    /// Image `ButtonTexture`.
    static let buttonTexture = Rswift.ImageResource(bundle: R.hostingBundle, name: "ButtonTexture")
    /// Image `Checkmark`.
    static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Checkmark")
    /// Image `Circular`.
    static let circular = Rswift.ImageResource(bundle: R.hostingBundle, name: "Circular")
    /// Image `Estrella_Shape`.
    static let estrella_Shape = Rswift.ImageResource(bundle: R.hostingBundle, name: "Estrella_Shape")
    /// Image `Estrella_Stroke`.
    static let estrella_Stroke = Rswift.ImageResource(bundle: R.hostingBundle, name: "Estrella_Stroke")
    /// Image `Extra Large`.
    static let extraLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "Extra Large")
    /// Image `Graphic Bezel`.
    static let graphicBezel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Graphic Bezel")
    /// Image `Graphic Circular`.
    static let graphicCircular = Rswift.ImageResource(bundle: R.hostingBundle, name: "Graphic Circular")
    /// Image `Graphic Corner`.
    static let graphicCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "Graphic Corner")
    /// Image `Graphic Extra Large`.
    static let graphicExtraLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "Graphic Extra Large")
    /// Image `Graphic Large Rectangular`.
    static let graphicLargeRectangular = Rswift.ImageResource(bundle: R.hostingBundle, name: "Graphic Large Rectangular")
    /// Image `Image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image")
    /// Image `Modular`.
    static let modular = Rswift.ImageResource(bundle: R.hostingBundle, name: "Modular")
    /// Image `Smile`.
    static let smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Smile")
    /// Image `Sunglasses`.
    static let sunglasses = Rswift.ImageResource(bundle: R.hostingBundle, name: "Sunglasses")
    /// Image `Utilitarian`.
    static let utilitarian = Rswift.ImageResource(bundle: R.hostingBundle, name: "Utilitarian")
    /// Image `accept_terms_hp`.
    static let accept_terms_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "accept_terms_hp")
    /// Image `accepted_terms`.
    static let accepted_terms = Rswift.ImageResource(bundle: R.hostingBundle, name: "accepted_terms")
    /// Image `actual_location`.
    static let actual_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "actual_location")
    /// Image `add_credit_card`.
    static let add_credit_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_credit_card")
    /// Image `add_more_fill`.
    static let add_more_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_more_fill")
    /// Image `alert_chat`.
    static let alert_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert_chat")
    /// Image `alert_icon`.
    static let alert_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert_icon")
    /// Image `alert_mandaditos_stop`.
    static let alert_mandaditos_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert_mandaditos_stop")
    /// Image `alertbottom_info`.
    static let alertbottom_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "alertbottom_info")
    /// Image `alertbottom_orden`.
    static let alertbottom_orden = Rswift.ImageResource(bundle: R.hostingBundle, name: "alertbottom_orden")
    /// Image `alertbottom_register`.
    static let alertbottom_register = Rswift.ImageResource(bundle: R.hostingBundle, name: "alertbottom_register")
    /// Image `american_express`.
    static let american_express = Rswift.ImageResource(bundle: R.hostingBundle, name: "american_express")
    /// Image `amex_logo`.
    static let amex_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "amex_logo")
    /// Image `amex_orange`.
    static let amex_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "amex_orange")
    /// Image `amex_pink`.
    static let amex_pink = Rswift.ImageResource(bundle: R.hostingBundle, name: "amex_pink")
    /// Image `amex_purple`.
    static let amex_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "amex_purple")
    /// Image `amex_shipment`.
    static let amex_shipment = Rswift.ImageResource(bundle: R.hostingBundle, name: "amex_shipment")
    /// Image `amex_white`.
    static let amex_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "amex_white")
    /// Image `amex_yellow`.
    static let amex_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "amex_yellow")
    /// Image `arrow_combo`.
    static let arrow_combo = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_combo")
    /// Image `arrow_payservice`.
    static let arrow_payservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_payservice")
    /// Image `aux_table`.
    static let aux_table = Rswift.ImageResource(bundle: R.hostingBundle, name: "aux_table")
    /// Image `avatar-gray`.
    static let avatarGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar-gray")
    /// Image `avatar`.
    static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar")
    /// Image `back_hp`.
    static let back_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_hp")
    /// Image `back_payservice`.
    static let back_payservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_payservice")
    /// Image `back_purple_services`.
    static let back_purple_services = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_purple_services")
    /// Image `back_qrcode_left`.
    static let back_qrcode_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_qrcode_left")
    /// Image `back_qrcode_right`.
    static let back_qrcode_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_qrcode_right")
    /// Image `back_search`.
    static let back_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_search")
    /// Image `back_shipment`.
    static let back_shipment = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_shipment")
    /// Image `back_white_hp`.
    static let back_white_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_white_hp")
    /// Image `back_white`.
    static let back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_white")
    /// Image `back_withCircle`.
    static let back_withCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_withCircle")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `background_hugpay`.
    static let background_hugpay = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_hugpay")
    /// Image `banner-app`.
    static let bannerApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner-app")
    /// Image `banner_payservice`.
    static let banner_payservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner_payservice")
    /// Image `barcode_icon`.
    static let barcode_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "barcode_icon")
    /// Image `btnCashBackTutorial`.
    static let btnCashBackTutorial = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnCashBackTutorial")
    /// Image `btn_add_item_en`.
    static let btn_add_item_en = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add_item_en")
    /// Image `btn_add_item`.
    static let btn_add_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add_item")
    /// Image `buble_mandaditos_a`.
    static let buble_mandaditos_a = Rswift.ImageResource(bundle: R.hostingBundle, name: "buble_mandaditos_a")
    /// Image `buble_mandaditos_b`.
    static let buble_mandaditos_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "buble_mandaditos_b")
    /// Image `buble_mandaditos_c`.
    static let buble_mandaditos_c = Rswift.ImageResource(bundle: R.hostingBundle, name: "buble_mandaditos_c")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `calories`.
    static let calories = Rswift.ImageResource(bundle: R.hostingBundle, name: "calories")
    /// Image `camera_purple`.
    static let camera_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera_purple")
    /// Image `camioneta1`.
    static let camioneta1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "camioneta1")
    /// Image `camioneta2`.
    static let camioneta2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "camioneta2")
    /// Image `camioneta3`.
    static let camioneta3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "camioneta3")
    /// Image `cancel_mini`.
    static let cancel_mini = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_mini")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `car`.
    static let car = Rswift.ImageResource(bundle: R.hostingBundle, name: "car")
    /// Image `card_vertical_orange_hp`.
    static let card_vertical_orange_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "card_vertical_orange_hp")
    /// Image `card_vertical_pink_hp`.
    static let card_vertical_pink_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "card_vertical_pink_hp")
    /// Image `card_vertical_purple_hp`.
    static let card_vertical_purple_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "card_vertical_purple_hp")
    /// Image `card_vertical_white_hp`.
    static let card_vertical_white_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "card_vertical_white_hp")
    /// Image `card_vertical_yellow_hp`.
    static let card_vertical_yellow_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "card_vertical_yellow_hp")
    /// Image `cashbackMain`.
    static let cashbackMain = Rswift.ImageResource(bundle: R.hostingBundle, name: "cashbackMain")
    /// Image `cashback_information_page`.
    static let cashback_information_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "cashback_information_page")
    /// Image `cashback_redeem`.
    static let cashback_redeem = Rswift.ImageResource(bundle: R.hostingBundle, name: "cashback_redeem")
    /// Image `cc_orange`.
    static let cc_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "cc_orange")
    /// Image `cc_payservice`.
    static let cc_payservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "cc_payservice")
    /// Image `cc_pink`.
    static let cc_pink = Rswift.ImageResource(bundle: R.hostingBundle, name: "cc_pink")
    /// Image `cc_purple`.
    static let cc_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "cc_purple")
    /// Image `cc_white`.
    static let cc_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "cc_white")
    /// Image `cc_yellow`.
    static let cc_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "cc_yellow")
    /// Image `cellImageArrow`.
    static let cellImageArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "cellImageArrow")
    /// Image `cerrar`.
    static let cerrar = Rswift.ImageResource(bundle: R.hostingBundle, name: "cerrar")
    /// Image `channel_mail`.
    static let channel_mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_mail")
    /// Image `channel_phone`.
    static let channel_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_phone")
    /// Image `channel_whatsapp`.
    static let channel_whatsapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_whatsapp")
    /// Image `chart_leftArrow_hugopay`.
    static let chart_leftArrow_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "chart_leftArrow_hugopay")
    /// Image `chart_rightArrow_hugopay`.
    static let chart_rightArrow_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "chart_rightArrow_hugopay")
    /// Image `chatZD_back`.
    static let chatZD_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatZD_back")
    /// Image `chatZD`.
    static let chatZD = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatZD")
    /// Image `chat_back`.
    static let chat_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_back")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `check2_empty`.
    static let check2_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "check2_empty")
    /// Image `check2`.
    static let check2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "check2")
    /// Image `check_badratinglist`.
    static let check_badratinglist = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_badratinglist")
    /// Image `check_empty`.
    static let check_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_empty")
    /// Image `check_typemandaditos`.
    static let check_typemandaditos = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_typemandaditos")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `christmas_star`.
    static let christmas_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "christmas_star")
    /// Image `circle_transaction_qr_hugopay`.
    static let circle_transaction_qr_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle_transaction_qr_hugopay")
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `clock_transportation`.
    static let clock_transportation = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock_transportation")
    /// Image `clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock")
    /// Image `close_purple_services`.
    static let close_purple_services = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_purple_services")
    /// Image `close_purple`.
    static let close_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_purple")
    /// Image `close_qrcode`.
    static let close_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_qrcode")
    /// Image `cloud-computing`.
    static let cloudComputing = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud-computing")
    /// Image `codebar_image`.
    static let codebar_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "codebar_image")
    /// Image `contactButton`.
    static let contactButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactButton")
    /// Image `costumer_support`.
    static let costumer_support = Rswift.ImageResource(bundle: R.hostingBundle, name: "costumer_support")
    /// Image `coupon_code`.
    static let coupon_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "coupon_code")
    /// Image `cut_hugopay`.
    static let cut_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "cut_hugopay")
    /// Image `cut_ticket`.
    static let cut_ticket = Rswift.ImageResource(bundle: R.hostingBundle, name: "cut_ticket")
    /// Image `default_profile_pic`.
    static let default_profile_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_profile_pic")
    /// Image `delete-action-en`.
    static let deleteActionEn = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete-action-en")
    /// Image `delete-action-es`.
    static let deleteActionEs = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete-action-es")
    /// Image `delete_card_hp`.
    static let delete_card_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_card_hp")
    /// Image `delete_stop_search`.
    static let delete_stop_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_stop_search")
    /// Image `descartar_icon_top`.
    static let descartar_icon_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "descartar_icon_top")
    /// Image `deselect_checkout`.
    static let deselect_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "deselect_checkout")
    /// Image `deselectedPointA`.
    static let deselectedPointA = Rswift.ImageResource(bundle: R.hostingBundle, name: "deselectedPointA")
    /// Image `deselectedPointB2`.
    static let deselectedPointB2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "deselectedPointB2")
    /// Image `deselectedPointB`.
    static let deselectedPointB = Rswift.ImageResource(bundle: R.hostingBundle, name: "deselectedPointB")
    /// Image `deselectedPointC`.
    static let deselectedPointC = Rswift.ImageResource(bundle: R.hostingBundle, name: "deselectedPointC")
    /// Image `deselected_location`.
    static let deselected_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "deselected_location")
    /// Image `destPin`.
    static let destPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "destPin")
    /// Image `destino_search`.
    static let destino_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "destino_search")
    /// Image `destinyB`.
    static let destinyB = Rswift.ImageResource(bundle: R.hostingBundle, name: "destinyB")
    /// Image `detail_location_shipment`.
    static let detail_location_shipment = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_location_shipment")
    /// Image `dialogue_image`.
    static let dialogue_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "dialogue_image")
    /// Image `dismiss_card_hp`.
    static let dismiss_card_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "dismiss_card_hp")
    /// Image `dont_match`.
    static let dont_match = Rswift.ImageResource(bundle: R.hostingBundle, name: "dont_match")
    /// Image `dotsvertical`.
    static let dotsvertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "dotsvertical")
    /// Image `driver_siluote`.
    static let driver_siluote = Rswift.ImageResource(bundle: R.hostingBundle, name: "driver_siluote")
    /// Image `dropdown_payservice`.
    static let dropdown_payservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "dropdown_payservice")
    /// Image `edit_card_hp`.
    static let edit_card_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_card_hp")
    /// Image `edit_profile`.
    static let edit_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_profile")
    /// Image `el_salvador_flag`.
    static let el_salvador_flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "el_salvador_flag")
    /// Image `emergency2`.
    static let emergency2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "emergency2")
    /// Image `emergency`.
    static let emergency = Rswift.ImageResource(bundle: R.hostingBundle, name: "emergency")
    /// Image `empty_cards`.
    static let empty_cards = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_cards")
    /// Image `empty_chat`.
    static let empty_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_chat")
    /// Image `empty_check`.
    static let empty_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_check")
    /// Image `empty_driver`.
    static let empty_driver = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_driver")
    /// Image `empty_history`.
    static let empty_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_history")
    /// Image `empty_image_cashin`.
    static let empty_image_cashin = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_image_cashin")
    /// Image `empty_name_email`.
    static let empty_name_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_name_email")
    /// Image `empty_orders`.
    static let empty_orders = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_orders")
    /// Image `empty_pic`.
    static let empty_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_pic")
    /// Image `empty_search`.
    static let empty_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_search")
    /// Image `empty_state_alltrx_hugopay`.
    static let empty_state_alltrx_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_state_alltrx_hugopay")
    /// Image `empty_state_hp`.
    static let empty_state_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_state_hp")
    /// Image `empty_state_notifications2_hp`.
    static let empty_state_notifications2_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_state_notifications2_hp")
    /// Image `empty_state_notifications_hugopay`.
    static let empty_state_notifications_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_state_notifications_hugopay")
    /// Image `empty_state_qr_hugopay`.
    static let empty_state_qr_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_state_qr_hugopay")
    /// Image `empty_user`.
    static let empty_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_user")
    /// Image `empty_vehicle`.
    static let empty_vehicle = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_vehicle")
    /// Image `error_payment`.
    static let error_payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "error_payment")
    /// Image `error_server`.
    static let error_server = Rswift.ImageResource(bundle: R.hostingBundle, name: "error_server")
    /// Image `excursion`.
    static let excursion = Rswift.ImageResource(bundle: R.hostingBundle, name: "excursion")
    /// Image `eye_out`.
    static let eye_out = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_out")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `failure_transaction_qr_hugopay`.
    static let failure_transaction_qr_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "failure_transaction_qr_hugopay")
    /// Image `fireworks_yummy`.
    static let fireworks_yummy = Rswift.ImageResource(bundle: R.hostingBundle, name: "fireworks_yummy")
    /// Image `fireworks`.
    static let fireworks = Rswift.ImageResource(bundle: R.hostingBundle, name: "fireworks")
    /// Image `firstStop`.
    static let firstStop = Rswift.ImageResource(bundle: R.hostingBundle, name: "firstStop")
    /// Image `flag_cr_05`.
    static let flag_cr_05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag_cr_05")
    /// Image `flag_gt_05`.
    static let flag_gt_05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag_gt_05")
    /// Image `flag_sv-hn_05`.
    static let flag_svHn_05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag_sv-hn_05")
    /// Image `flappy-background`.
    static let flappyBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "flappy-background")
    /// Image `flappy-close8`.
    static let flappyClose8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "flappy-close8")
    /// Image `flappy-cup8`.
    static let flappyCup8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "flappy-cup8")
    /// Image `gallery_icon`.
    static let gallery_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "gallery_icon")
    /// Image `gift_icon`.
    static let gift_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "gift_icon")
    /// Image `gps2_new`.
    static let gps2_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "gps2_new")
    /// Image `gps_missing`.
    static let gps_missing = Rswift.ImageResource(bundle: R.hostingBundle, name: "gps_missing")
    /// Image `gps_new`.
    static let gps_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "gps_new")
    /// Image `greenIcon`.
    static let greenIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenIcon")
    /// Image `green_check`.
    static let green_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "green_check")
    /// Image `group10`.
    static let group10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group10")
    /// Image `group11`.
    static let group11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group11")
    /// Image `group12`.
    static let group12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group12")
    /// Image `group13`.
    static let group13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group13")
    /// Image `group1`.
    static let group1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group1")
    /// Image `group2`.
    static let group2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group2")
    /// Image `group4`.
    static let group4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group4")
    /// Image `group5`.
    static let group5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group5")
    /// Image `group6`.
    static let group6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group6")
    /// Image `group7`.
    static let group7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group7")
    /// Image `group8`.
    static let group8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group8")
    /// Image `group9`.
    static let group9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group9")
    /// Image `guard`.
    static let `guard` = Rswift.ImageResource(bundle: R.hostingBundle, name: "guard")
    /// Image `header2`.
    static let header2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "header2")
    /// Image `header_hugopay_yellow`.
    static let header_hugopay_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_hugopay_yellow")
    /// Image `header_hugopay`.
    static let header_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_hugopay")
    /// Image `header`.
    static let header = Rswift.ImageResource(bundle: R.hostingBundle, name: "header")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `help_profile`.
    static let help_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "help_profile")
    /// Image `history_empty`.
    static let history_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "history_empty")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `hp02QrTimeOut`.
    static let hp02QrTimeOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp02QrTimeOut")
    /// Image `hp_dismiss_alert`.
    static let hp_dismiss_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_dismiss_alert")
    /// Image `hp_expensive_control_soon`.
    static let hp_expensive_control_soon = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_expensive_control_soon")
    /// Image `hp_full_arrow_back_white`.
    static let hp_full_arrow_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_arrow_back_white")
    /// Image `hp_full_arrow_down`.
    static let hp_full_arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_arrow_down")
    /// Image `hp_full_back`.
    static let hp_full_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_back")
    /// Image `hp_full_background_create_account`.
    static let hp_full_background_create_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_background_create_account")
    /// Image `hp_full_background_header_small`.
    static let hp_full_background_header_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_background_header_small")
    /// Image `hp_full_block`.
    static let hp_full_block = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_block")
    /// Image `hp_full_card`.
    static let hp_full_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_card")
    /// Image `hp_full_circle_block`.
    static let hp_full_circle_block = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_block")
    /// Image `hp_full_circle_cashin`.
    static let hp_full_circle_cashin = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_cashin")
    /// Image `hp_full_circle_dollar_disabled`.
    static let hp_full_circle_dollar_disabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_dollar_disabled")
    /// Image `hp_full_circle_dollar_enabled`.
    static let hp_full_circle_dollar_enabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_dollar_enabled")
    /// Image `hp_full_circle_help`.
    static let hp_full_circle_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_help")
    /// Image `hp_full_circle_managed_account`.
    static let hp_full_circle_managed_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_managed_account")
    /// Image `hp_full_circle_pie`.
    static let hp_full_circle_pie = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_pie")
    /// Image `hp_full_circle_qr`.
    static let hp_full_circle_qr = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_qr")
    /// Image `hp_full_circle_recarga`.
    static let hp_full_circle_recarga = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_recarga")
    /// Image `hp_full_circle_request`.
    static let hp_full_circle_request = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_request")
    /// Image `hp_full_circle_scana`.
    static let hp_full_circle_scana = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_scana")
    /// Image `hp_full_circle_send`.
    static let hp_full_circle_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_send")
    /// Image `hp_full_circle_serivicios`.
    static let hp_full_circle_serivicios = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_serivicios")
    /// Image `hp_full_circle_solicitudes`.
    static let hp_full_circle_solicitudes = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_solicitudes")
    /// Image `hp_full_circle_transfer_disabled`.
    static let hp_full_circle_transfer_disabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_transfer_disabled")
    /// Image `hp_full_circle_transfer_enabled`.
    static let hp_full_circle_transfer_enabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_transfer_enabled")
    /// Image `hp_full_circle_tutorial`.
    static let hp_full_circle_tutorial = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_circle_tutorial")
    /// Image `hp_full_close_menu`.
    static let hp_full_close_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_close_menu")
    /// Image `hp_full_digital_account`.
    static let hp_full_digital_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_digital_account")
    /// Image `hp_full_digital_card`.
    static let hp_full_digital_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_digital_card")
    /// Image `hp_full_ellipse`.
    static let hp_full_ellipse = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_ellipse")
    /// Image `hp_full_final_card`.
    static let hp_full_final_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_final_card")
    /// Image `hp_full_float_button`.
    static let hp_full_float_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_float_button")
    /// Image `hp_full_float_copy`.
    static let hp_full_float_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_float_copy")
    /// Image `hp_full_hugo_logo_create_account`.
    static let hp_full_hugo_logo_create_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_hugo_logo_create_account")
    /// Image `hp_full_hugo_pay_logo_allwhite`.
    static let hp_full_hugo_pay_logo_allwhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_hugo_pay_logo_allwhite")
    /// Image `hp_full_hugo_pay_logo`.
    static let hp_full_hugo_pay_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_hugo_pay_logo")
    /// Image `hp_full_icon_bell`.
    static let hp_full_icon_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_icon_bell")
    /// Image `hp_full_icon_header_white`.
    static let hp_full_icon_header_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_icon_header_white")
    /// Image `hp_full_icon_header`.
    static let hp_full_icon_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_icon_header")
    /// Image `hp_full_icon_information`.
    static let hp_full_icon_information = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_icon_information")
    /// Image `hp_full_icon_photo`.
    static let hp_full_icon_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_icon_photo")
    /// Image `hp_full_icon_plus`.
    static let hp_full_icon_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_icon_plus")
    /// Image `hp_full_icon_stepOne`.
    static let hp_full_icon_stepOne = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_icon_stepOne")
    /// Image `hp_full_icon_tutorial2`.
    static let hp_full_icon_tutorial2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_icon_tutorial2")
    /// Image `hp_full_nav_background`.
    static let hp_full_nav_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_nav_background")
    /// Image `hp_full_onboarding_background`.
    static let hp_full_onboarding_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_onboarding_background")
    /// Image `hp_full_path_tutorial`.
    static let hp_full_path_tutorial = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_path_tutorial")
    /// Image `hp_full_physical_card`.
    static let hp_full_physical_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_physical_card")
    /// Image `hp_full_reset_via_email`.
    static let hp_full_reset_via_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_reset_via_email")
    /// Image `hp_full_reset_via_sms`.
    static let hp_full_reset_via_sms = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_reset_via_sms")
    /// Image `hp_full_settings`.
    static let hp_full_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_settings")
    /// Image `hp_full_switch_card`.
    static let hp_full_switch_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_switch_card")
    /// Image `hp_full_switch_lock_card`.
    static let hp_full_switch_lock_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_switch_lock_card")
    /// Image `hp_full_tutorial_btn_background`.
    static let hp_full_tutorial_btn_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_tutorial_btn_background")
    /// Image `hp_full_validate_identity`.
    static let hp_full_validate_identity = Rswift.ImageResource(bundle: R.hostingBundle, name: "hp_full_validate_identity")
    /// Image `hpf_calendar`.
    static let hpf_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "hpf_calendar")
    /// Image `hpf_deselect_contact`.
    static let hpf_deselect_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "hpf_deselect_contact")
    /// Image `hpf_icon_filter`.
    static let hpf_icon_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "hpf_icon_filter")
    /// Image `hpf_payment`.
    static let hpf_payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "hpf_payment")
    /// Image `hpf_pincode_bg_success`.
    static let hpf_pincode_bg_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "hpf_pincode_bg_success")
    /// Image `hpf_pincode_success`.
    static let hpf_pincode_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "hpf_pincode_success")
    /// Image `hpf_precio`.
    static let hpf_precio = Rswift.ImageResource(bundle: R.hostingBundle, name: "hpf_precio")
    /// Image `hpf_price_range`.
    static let hpf_price_range = Rswift.ImageResource(bundle: R.hostingBundle, name: "hpf_price_range")
    /// Image `hugo-delivery`.
    static let hugoDelivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "hugo-delivery")
    /// Image `hugoLogo`.
    static let hugoLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "hugoLogo")
    /// Image `hugoPayLogo`.
    static let hugoPayLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "hugoPayLogo")
    /// Image `hugoPayWhiteLogo`.
    static let hugoPayWhiteLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "hugoPayWhiteLogo")
    /// Image `hugo_icon`.
    static let hugo_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "hugo_icon")
    /// Image `hugo_outline`.
    static let hugo_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "hugo_outline")
    /// Image `hugologoword`.
    static let hugologoword = Rswift.ImageResource(bundle: R.hostingBundle, name: "hugologoword")
    /// Image `ic_English_BaseProgrammer`.
    static let ic_English_BaseProgrammer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_English_BaseProgrammer")
    /// Image `ic_English_Most`.
    static let ic_English_Most = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_English_Most")
    /// Image `ic_add_button_card_hugopay`.
    static let ic_add_button_card_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_button_card_hugopay")
    /// Image `ic_add_filled`.
    static let ic_add_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_filled")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_address`.
    static let ic_address = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_address")
    /// Image `ic_amex`.
    static let ic_amex = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_amex")
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_bad_off`.
    static let ic_bad_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bad_off")
    /// Image `ic_bad_on`.
    static let ic_bad_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bad_on")
    /// Image `ic_bar_gray_hugopay`.
    static let ic_bar_gray_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_gray_hugopay")
    /// Image `ic_bar_hugopay_white`.
    static let ic_bar_hugopay_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_hugopay_white")
    /// Image `ic_bar_hugopay`.
    static let ic_bar_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_hugopay")
    /// Image `ic_bar_profile_white`.
    static let ic_bar_profile_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_profile_white")
    /// Image `ic_bar_profile`.
    static let ic_bar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_profile")
    /// Image `ic_bar_purple_hugopay`.
    static let ic_bar_purple_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_purple_hugopay")
    /// Image `ic_bar_ride_2`.
    static let ic_bar_ride_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_ride_2")
    /// Image `ic_bar_ride_white2`.
    static let ic_bar_ride_white2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_ride_white2")
    /// Image `ic_bar_tracking_white`.
    static let ic_bar_tracking_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_tracking_white")
    /// Image `ic_bar_tracking`.
    static let ic_bar_tracking = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bar_tracking")
    /// Image `ic_button_favorite`.
    static let ic_button_favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_button_favorite")
    /// Image `ic_button_unfavorite`.
    static let ic_button_unfavorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_button_unfavorite")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")
    /// Image `ic_camera`.
    static let ic_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera")
    /// Image `ic_car_purple`.
    static let ic_car_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_car_purple")
    /// Image `ic_car`.
    static let ic_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_car")
    /// Image `ic_card_layer_hugopay`.
    static let ic_card_layer_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card_layer_hugopay")
    /// Image `ic_cards`.
    static let ic_cards = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cards")
    /// Image `ic_case`.
    static let ic_case = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_case")
    /// Image `ic_cash_lines`.
    static let ic_cash_lines = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cash_lines")
    /// Image `ic_cash`.
    static let ic_cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cash")
    /// Image `ic_cc_color`.
    static let ic_cc_color = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cc_color")
    /// Image `ic_cc_cvc_icon`.
    static let ic_cc_cvc_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cc_cvc_icon")
    /// Image `ic_cc_exp_icon`.
    static let ic_cc_exp_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cc_exp_icon")
    /// Image `ic_cc_gift`.
    static let ic_cc_gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cc_gift")
    /// Image `ic_cc_lines`.
    static let ic_cc_lines = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cc_lines")
    /// Image `ic_celular`.
    static let ic_celular = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_celular")
    /// Image `ic_chash_color`.
    static let ic_chash_color = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chash_color")
    /// Image `ic_check_blue`.
    static let ic_check_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_blue")
    /// Image `ic_check_green`.
    static let ic_check_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_green")
    /// Image `ic_check_purple`.
    static let ic_check_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_purple")
    /// Image `ic_checked_terms`.
    static let ic_checked_terms = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checked_terms")
    /// Image `ic_circle_send_hp`.
    static let ic_circle_send_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_circle_send_hp")
    /// Image `ic_clip`.
    static let ic_clip = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clip")
    /// Image `ic_clock_mini`.
    static let ic_clock_mini = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clock_mini")
    /// Image `ic_clock`.
    static let ic_clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clock")
    /// Image `ic_close_black`.
    static let ic_close_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_black")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_coupon_active`.
    static let ic_coupon_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_coupon_active")
    /// Image `ic_coupon_inactive`.
    static let ic_coupon_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_coupon_inactive")
    /// Image `ic_delete_image_gray`.
    static let ic_delete_image_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_image_gray")
    /// Image `ic_delete_image`.
    static let ic_delete_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_image")
    /// Image `ic_destiny`.
    static let ic_destiny = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_destiny")
    /// Image `ic_disclouser_mandaditos`.
    static let ic_disclouser_mandaditos = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_disclouser_mandaditos")
    /// Image `ic_disclouser`.
    static let ic_disclouser = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_disclouser")
    /// Image `ic_discover`.
    static let ic_discover = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discover")
    /// Image `ic_empty_order`.
    static let ic_empty_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_empty_order")
    /// Image `ic_exclamation`.
    static let ic_exclamation = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_exclamation")
    /// Image `ic_expand_arrow`.
    static let ic_expand_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_expand_arrow")
    /// Image `ic_fb`.
    static let ic_fb = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fb")
    /// Image `ic_feed_guest_photo`.
    static let ic_feed_guest_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feed_guest_photo")
    /// Image `ic_feed_notification_empty`.
    static let ic_feed_notification_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feed_notification_empty")
    /// Image `ic_feed_notification`.
    static let ic_feed_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feed_notification")
    /// Image `ic_filter_hugopay`.
    static let ic_filter_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter_hugopay")
    /// Image `ic_good2_off`.
    static let ic_good2_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_good2_off")
    /// Image `ic_good2_on`.
    static let ic_good2_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_good2_on")
    /// Image `ic_good_off`.
    static let ic_good_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_good_off")
    /// Image `ic_good_on`.
    static let ic_good_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_good_on")
    /// Image `ic_great_off`.
    static let ic_great_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_great_off")
    /// Image `ic_great_on`.
    static let ic_great_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_great_on")
    /// Image `ic_grid`.
    static let ic_grid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_grid")
    /// Image `ic_hamburger`.
    static let ic_hamburger = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hamburger")
    /// Image `ic_help2`.
    static let ic_help2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_help2")
    /// Image `ic_help`.
    static let ic_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_help")
    /// Image `ic_home_white`.
    static let ic_home_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_white")
    /// Image `ic_home`.
    static let ic_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home")
    /// Image `ic_info`.
    static let ic_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_info")
    /// Image `ic_list`.
    static let ic_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_list")
    /// Image `ic_magnifying_light`.
    static let ic_magnifying_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_magnifying_light")
    /// Image `ic_mail`.
    static let ic_mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mail")
    /// Image `ic_marker_purple`.
    static let ic_marker_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_marker_purple")
    /// Image `ic_marker`.
    static let ic_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_marker")
    /// Image `ic_mastercard-curved`.
    static let ic_mastercardCurved = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mastercard-curved")
    /// Image `ic_minus`.
    static let ic_minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minus")
    /// Image `ic_money_color`.
    static let ic_money_color = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_money_color")
    /// Image `ic_more`.
    static let ic_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more")
    /// Image `ic_mustache`.
    static let ic_mustache = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mustache")
    /// Image `ic_navigation`.
    static let ic_navigation = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_navigation")
    /// Image `ic_north_purple`.
    static let ic_north_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_north_purple")
    /// Image `ic_north_white`.
    static let ic_north_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_north_white")
    /// Image `ic_office_white`.
    static let ic_office_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_office_white")
    /// Image `ic_office`.
    static let ic_office = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_office")
    /// Image `ic_orders`.
    static let ic_orders = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_orders")
    /// Image `ic_phone`.
    static let ic_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phone")
    /// Image `ic_pin`.
    static let ic_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pin")
    /// Image `ic_place_purple`.
    static let ic_place_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_place_purple")
    /// Image `ic_place_white`.
    static let ic_place_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_place_white")
    /// Image `ic_plus_fill`.
    static let ic_plus_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus_fill")
    /// Image `ic_plus_new`.
    static let ic_plus_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus_new")
    /// Image `ic_plus`.
    static let ic_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus")
    /// Image `ic_pointer`.
    static let ic_pointer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pointer")
    /// Image `ic_product_trash`.
    static let ic_product_trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_product_trash")
    /// Image `ic_purple_flag`.
    static let ic_purple_flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_purple_flag")
    /// Image `ic_question-1`.
    static let ic_question1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_question-1")
    /// Image `ic_question`.
    static let ic_question = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_question")
    /// Image `ic_quit`.
    static let ic_quit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_quit")
    /// Image `ic_radar`.
    static let ic_radar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radar")
    /// Image `ic_rate_dynamic`.
    static let ic_rate_dynamic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_rate_dynamic")
    /// Image `ic_rating_bad`.
    static let ic_rating_bad = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_rating_bad")
    /// Image `ic_rating_good`.
    static let ic_rating_good = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_rating_good")
    /// Image `ic_return`.
    static let ic_return = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_return")
    /// Image `ic_ride_complete`.
    static let ic_ride_complete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ride_complete")
    /// Image `ic_sbasket`.
    static let ic_sbasket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sbasket")
    /// Image `ic_search_small`.
    static let ic_search_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_small")
    /// Image `ic_search_white`.
    static let ic_search_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_white")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_sel_card_points`.
    static let ic_sel_card_points = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sel_card_points")
    /// Image `ic_selected_billing`.
    static let ic_selected_billing = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_selected_billing")
    /// Image `ic_selected_prize`.
    static let ic_selected_prize = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_selected_prize")
    /// Image `ic_settings`.
    static let ic_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settings")
    /// Image `ic_shopping_bag`.
    static let ic_shopping_bag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_shopping_bag")
    /// Image `ic_slider_alert`.
    static let ic_slider_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_slider_alert")
    /// Image `ic_sort3_black`.
    static let ic_sort3_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sort3_black")
    /// Image `ic_sort3`.
    static let ic_sort3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sort3")
    /// Image `ic_sort_selected`.
    static let ic_sort_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sort_selected")
    /// Image `ic_star_white`.
    static let ic_star_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_white")
    /// Image `ic_store`.
    static let ic_store = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_store")
    /// Image `ic_terms_hp`.
    static let ic_terms_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_terms_hp")
    /// Image `ic_token`.
    static let ic_token = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_token")
    /// Image `ic_trash`.
    static let ic_trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_trash")
    /// Image `ic_trophy-2`.
    static let ic_trophy2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_trophy-2")
    /// Image `ic_trophy`.
    static let ic_trophy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_trophy")
    /// Image `ic_txt_hide`.
    static let ic_txt_hide = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_txt_hide")
    /// Image `ic_txt_show`.
    static let ic_txt_show = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_txt_show")
    /// Image `ic_uncheck_blue`.
    static let ic_uncheck_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck_blue")
    /// Image `ic_uncheck_terms`.
    static let ic_uncheck_terms = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck_terms")
    /// Image `ic_unselected_circle`.
    static let ic_unselected_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselected_circle")
    /// Image `ic_user_profile`.
    static let ic_user_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_profile")
    /// Image `ic_user`.
    static let ic_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user")
    /// Image `ic_visa-curved`.
    static let ic_visaCurved = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visa-curved")
    /// Image `ic_wallet_home`.
    static let ic_wallet_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wallet_home")
    /// Image `ic_wallet_profile`.
    static let ic_wallet_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wallet_profile")
    /// Image `ic_white_flag`.
    static let ic_white_flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_white_flag")
    /// Image `ic_worst_off`.
    static let ic_worst_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_worst_off")
    /// Image `ic_worst_on`.
    static let ic_worst_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_worst_on")
    /// Image `ico-billing`.
    static let icoBilling = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico-billing")
    /// Image `ico-card-points`.
    static let icoCardPoints = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico-card-points")
    /// Image `ico-home`.
    static let icoHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico-home")
    /// Image `ico-location`.
    static let icoLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico-location")
    /// Image `ico-pin`.
    static let icoPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico-pin")
    /// Image `ico-plus`.
    static let icoPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico-plus")
    /// Image `ico-work`.
    static let icoWork = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico-work")
    /// Image `icoPlusInvoice`.
    static let icoPlusInvoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoPlusInvoice")
    /// Image `ico_add_more`.
    static let ico_add_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_add_more")
    /// Image `ico_whatsapp`.
    static let ico_whatsapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_whatsapp")
    /// Image `icon-alert`.
    static let iconAlert = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-alert")
    /// Image `icon-cancel`.
    static let iconCancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-cancel")
    /// Image `icon-circle-cashIn`.
    static let iconCircleCashIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-circle-cashIn")
    /// Image `icon-plus`.
    static let iconPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-plus")
    /// Image `iconControl`.
    static let iconControl = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconControl")
    /// Image `iconHelpNotifications`.
    static let iconHelpNotifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconHelpNotifications")
    /// Image `iconInfo`.
    static let iconInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconInfo")
    /// Image `iconMailing`.
    static let iconMailing = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMailing")
    /// Image `iconRecargaSolicitar`.
    static let iconRecargaSolicitar = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconRecargaSolicitar")
    /// Image `iconServices`.
    static let iconServices = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconServices")
    /// Image `iconStock`.
    static let iconStock = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconStock")
    /// Image `icon_add_card`.
    static let icon_add_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_add_card")
    /// Image `icon_close_hp`.
    static let icon_close_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_hp")
    /// Image `icon_date_hp`.
    static let icon_date_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_date_hp")
    /// Image `icon_document`.
    static let icon_document = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_document")
    /// Image `icon_face_id`.
    static let icon_face_id = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_face_id")
    /// Image `icon_infoPhone`.
    static let icon_infoPhone = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_infoPhone")
    /// Image `icon_money_hp`.
    static let icon_money_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_money_hp")
    /// Image `icon_more`.
    static let icon_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more")
    /// Image `icon_notification`.
    static let icon_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_notification")
    /// Image `icon_touch_id`.
    static let icon_touch_id = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_touch_id")
    /// Image `ilu-somethingwentwrongHP`.
    static let iluSomethingwentwrongHP = Rswift.ImageResource(bundle: R.hostingBundle, name: "ilu-somethingwentwrongHP")
    /// Image `iluAccountlokedHp`.
    static let iluAccountlokedHp = Rswift.ImageResource(bundle: R.hostingBundle, name: "iluAccountlokedHp")
    /// Image `image_attachment`.
    static let image_attachment = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_attachment")
    /// Image `image_placeholder`.
    static let image_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_placeholder")
    /// Image `image_services_fail`.
    static let image_services_fail = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_services_fail")
    /// Image `image_topup`.
    static let image_topup = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_topup")
    /// Image `img_0`.
    static let img_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_0")
    /// Image `img_1`.
    static let img_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_1")
    /// Image `info-card`.
    static let infoCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "info-card")
    /// Image `info_out_of_sync`.
    static let info_out_of_sync = Rswift.ImageResource(bundle: R.hostingBundle, name: "info_out_of_sync")
    /// Image `info_shipment`.
    static let info_shipment = Rswift.ImageResource(bundle: R.hostingBundle, name: "info_shipment")
    /// Image `ir`.
    static let ir = Rswift.ImageResource(bundle: R.hostingBundle, name: "ir")
    /// Image `leftArrow`.
    static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "leftArrow")
    /// Image `liked`.
    static let liked = Rswift.ImageResource(bundle: R.hostingBundle, name: "liked")
    /// Image `loadingimage`.
    static let loadingimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "loadingimage")
    /// Image `location-pin-gray`.
    static let locationPinGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "location-pin-gray")
    /// Image `location-pin`.
    static let locationPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "location-pin")
    /// Image `location_profile`.
    static let location_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_profile")
    /// Image `location_question`.
    static let location_question = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_question")
    /// Image `login_facebook`.
    static let login_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_facebook")
    /// Image `login`.
    static let login = Rswift.ImageResource(bundle: R.hostingBundle, name: "login")
    /// Image `logo_hugoPay`.
    static let logo_hugoPay = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_hugoPay")
    /// Image `logo_hugo_rating`.
    static let logo_hugo_rating = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_hugo_rating")
    /// Image `logo_hugopay`.
    static let logo_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_hugopay")
    /// Image `logo_hugopayfull_blanco`.
    static let logo_hugopayfull_blanco = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_hugopayfull_blanco")
    /// Image `logo_hugopayfull`.
    static let logo_hugopayfull = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_hugopayfull")
    /// Image `logo_yummyPay`.
    static let logo_yummyPay = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_yummyPay")
    /// Image `logo_yummy_rating`.
    static let logo_yummy_rating = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_yummy_rating")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logout_profile`.
    static let logout_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout_profile")
    /// Image `lupa`.
    static let lupa = Rswift.ImageResource(bundle: R.hostingBundle, name: "lupa")
    /// Image `madeIn`.
    static let madeIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "madeIn")
    /// Image `maestro_logo`.
    static let maestro_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "maestro_logo")
    /// Image `mail_bill`.
    static let mail_bill = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail_bill")
    /// Image `mail_validate`.
    static let mail_validate = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail_validate")
    /// Image `marker2`.
    static let marker2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "marker2")
    /// Image `markerHugo`.
    static let markerHugo = Rswift.ImageResource(bundle: R.hostingBundle, name: "markerHugo")
    /// Image `markerLocation2`.
    static let markerLocation2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "markerLocation2")
    /// Image `marker`.
    static let marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "marker")
    /// Image `mastercard_logo`.
    static let mastercard_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard_logo")
    /// Image `mastercard_orange`.
    static let mastercard_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard_orange")
    /// Image `mastercard_pink`.
    static let mastercard_pink = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard_pink")
    /// Image `mastercard_purple`.
    static let mastercard_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard_purple")
    /// Image `mastercard_shipment`.
    static let mastercard_shipment = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard_shipment")
    /// Image `mastercard_white`.
    static let mastercard_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard_white")
    /// Image `mastercard_yellow`.
    static let mastercard_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard_yellow")
    /// Image `mastercard`.
    static let mastercard = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard")
    /// Image `medicine`.
    static let medicine = Rswift.ImageResource(bundle: R.hostingBundle, name: "medicine")
    /// Image `message`.
    static let message = Rswift.ImageResource(bundle: R.hostingBundle, name: "message")
    /// Image `more_hugoPay`.
    static let more_hugoPay = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_hugoPay")
    /// Image `most_popular`.
    static let most_popular = Rswift.ImageResource(bundle: R.hostingBundle, name: "most_popular")
    /// Image `my_location_icon_empty`.
    static let my_location_icon_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_location_icon_empty")
    /// Image `my_location_icon`.
    static let my_location_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_location_icon")
    /// Image `navbar_chat_gray`.
    static let navbar_chat_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_chat_gray")
    /// Image `navbar_history_gray`.
    static let navbar_history_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_history_gray")
    /// Image `navbar_history_green`.
    static let navbar_history_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_history_green")
    /// Image `navbar_history_purple`.
    static let navbar_history_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_history_purple")
    /// Image `navbar_home_gray`.
    static let navbar_home_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_home_gray")
    /// Image `navbar_home_green`.
    static let navbar_home_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_home_green")
    /// Image `navbar_home_purple`.
    static let navbar_home_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_home_purple")
    /// Image `navbar_profile_gray`.
    static let navbar_profile_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_profile_gray")
    /// Image `navbar_profile_green`.
    static let navbar_profile_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_profile_green")
    /// Image `navbar_profile_purple`.
    static let navbar_profile_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_profile_purple")
    /// Image `navbar_transport_gray`.
    static let navbar_transport_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_transport_gray")
    /// Image `navbar_transport_green`.
    static let navbar_transport_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_transport_green")
    /// Image `navbar_transport_purple`.
    static let navbar_transport_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_transport_purple")
    /// Image `new_calendar`.
    static let new_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_calendar")
    /// Image `no_internet_error`.
    static let no_internet_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_internet_error")
    /// Image `no_search`.
    static let no_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_search")
    /// Image `no_terms_hp`.
    static let no_terms_hp = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_terms_hp")
    /// Image `novalidcode`.
    static let novalidcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "novalidcode")
    /// Image `oboard_location_bottom`.
    static let oboard_location_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "oboard_location_bottom")
    /// Image `oboard_location_right`.
    static let oboard_location_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "oboard_location_right")
    /// Image `onboarding_alert`.
    static let onboarding_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_alert")
    /// Image `onboarding_car`.
    static let onboarding_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_car")
    /// Image `onboarding_glasses`.
    static let onboarding_glasses = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_glasses")
    /// Image `onboarding_smile`.
    static let onboarding_smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_smile")
    /// Image `onboarding_transport`.
    static let onboarding_transport = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_transport")
    /// Image `orange_indicator`.
    static let orange_indicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "orange_indicator")
    /// Image `order_empty`.
    static let order_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_empty")
    /// Image `order_finished_rating`.
    static let order_finished_rating = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_finished_rating")
    /// Image `order_finished`.
    static let order_finished = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_finished")
    /// Image `origPin`.
    static let origPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "origPin")
    /// Image `originA`.
    static let originA = Rswift.ImageResource(bundle: R.hostingBundle, name: "originA")
    /// Image `other2`.
    static let other2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "other2")
    /// Image `other`.
    static let other = Rswift.ImageResource(bundle: R.hostingBundle, name: "other")
    /// Image `ovalPlus`.
    static let ovalPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ovalPlus")
    /// Image `p-purple-h`.
    static let pPurpleH = Rswift.ImageResource(bundle: R.hostingBundle, name: "p-purple-h")
    /// Image `package_img`.
    static let package_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "package_img")
    /// Image `pago_movil`.
    static let pago_movil = Rswift.ImageResource(bundle: R.hostingBundle, name: "pago_movil")
    /// Image `parada1`.
    static let parada1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "parada1")
    /// Image `parada2`.
    static let parada2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "parada2")
    /// Image `partner`.
    static let partner = Rswift.ImageResource(bundle: R.hostingBundle, name: "partner")
    /// Image `path1`.
    static let path1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "path1")
    /// Image `path2`.
    static let path2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "path2")
    /// Image `paymentchecked`.
    static let paymentchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "paymentchecked")
    /// Image `paymentunchecked`.
    static let paymentunchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "paymentunchecked")
    /// Image `paypal`.
    static let paypal = Rswift.ImageResource(bundle: R.hostingBundle, name: "paypal")
    /// Image `pci-dss-compliant`.
    static let pciDssCompliant = Rswift.ImageResource(bundle: R.hostingBundle, name: "pci-dss-compliant")
    /// Image `peoplepay`.
    static let peoplepay = Rswift.ImageResource(bundle: R.hostingBundle, name: "peoplepay")
    /// Image `permisos`.
    static let permisos = Rswift.ImageResource(bundle: R.hostingBundle, name: "permisos")
    /// Image `person`.
    static let person = Rswift.ImageResource(bundle: R.hostingBundle, name: "person")
    /// Image `phone`.
    static let phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone")
    /// Image `pickup1`.
    static let pickup1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pickup1")
    /// Image `pickup2`.
    static let pickup2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pickup2")
    /// Image `pin_purple`.
    static let pin_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin_purple")
    /// Image `place_search`.
    static let place_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "place_search")
    /// Image `place`.
    static let place = Rswift.ImageResource(bundle: R.hostingBundle, name: "place")
    /// Image `placeholder_cell_a`.
    static let placeholder_cell_a = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_cell_a")
    /// Image `placeholder_cell_b`.
    static let placeholder_cell_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_cell_b")
    /// Image `placeholder_cell_c`.
    static let placeholder_cell_c = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_cell_c")
    /// Image `placeholder_cell_d`.
    static let placeholder_cell_d = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_cell_d")
    /// Image `placeholder_cell_e`.
    static let placeholder_cell_e = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_cell_e")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `plus_morado`.
    static let plus_morado = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_morado")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `position_map`.
    static let position_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "position_map")
    /// Image `product`.
    static let product = Rswift.ImageResource(bundle: R.hostingBundle, name: "product")
    /// Image `profile_pic`.
    static let profile_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_pic")
    /// Image `purpleIcon`.
    static let purpleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "purpleIcon")
    /// Image `purpleMail`.
    static let purpleMail = Rswift.ImageResource(bundle: R.hostingBundle, name: "purpleMail")
    /// Image `qrCodeButton`.
    static let qrCodeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrCodeButton")
    /// Image `qr_YummyCode`.
    static let qr_YummyCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_YummyCode")
    /// Image `qr_code`.
    static let qr_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_code")
    /// Image `qr_hugopay_btn`.
    static let qr_hugopay_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_hugopay_btn")
    /// Image `qrcode_card_purple_hugopay`.
    static let qrcode_card_purple_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_card_purple_hugopay")
    /// Image `questions-circular-button`.
    static let questionsCircularButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "questions-circular-button")
    /// Image `rating_star`.
    static let rating_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "rating_star")
    /// Image `recent`.
    static let recent = Rswift.ImageResource(bundle: R.hostingBundle, name: "recent")
    /// Image `recently`.
    static let recently = Rswift.ImageResource(bundle: R.hostingBundle, name: "recently")
    /// Image `reload_purple`.
    static let reload_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "reload_purple")
    /// Image `remate`.
    static let remate = Rswift.ImageResource(bundle: R.hostingBundle, name: "remate")
    /// Image `removeContactButton`.
    static let removeContactButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "removeContactButton")
    /// Image `requestMoneyIcon`.
    static let requestMoneyIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "requestMoneyIcon")
    /// Image `requestMoneySuccess`.
    static let requestMoneySuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "requestMoneySuccess")
    /// Image `reserve`.
    static let reserve = Rswift.ImageResource(bundle: R.hostingBundle, name: "reserve")
    /// Image `restaurant`.
    static let restaurant = Rswift.ImageResource(bundle: R.hostingBundle, name: "restaurant")
    /// Image `running_bike`.
    static let running_bike = Rswift.ImageResource(bundle: R.hostingBundle, name: "running_bike")
    /// Image `sch_address_icon`.
    static let sch_address_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_address_icon")
    /// Image `sch_cancel_icon`.
    static let sch_cancel_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_cancel_icon")
    /// Image `sch_check_off`.
    static let sch_check_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_check_off")
    /// Image `sch_check_on`.
    static let sch_check_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_check_on")
    /// Image `sch_creditos_off`.
    static let sch_creditos_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_creditos_off")
    /// Image `sch_creditos_on`.
    static let sch_creditos_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_creditos_on")
    /// Image `sch_image_confirm_cancel`.
    static let sch_image_confirm_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_image_confirm_cancel")
    /// Image `sch_image_confirm_payment`.
    static let sch_image_confirm_payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_image_confirm_payment")
    /// Image `sch_inmediato_off`.
    static let sch_inmediato_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_inmediato_off")
    /// Image `sch_inmediato_on`.
    static let sch_inmediato_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_inmediato_on")
    /// Image `sch_reintegro_off`.
    static let sch_reintegro_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_reintegro_off")
    /// Image `sch_reintegro_on`.
    static let sch_reintegro_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_reintegro_on")
    /// Image `sch_scheduled_off`.
    static let sch_scheduled_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_scheduled_off")
    /// Image `sch_scheduled_on`.
    static let sch_scheduled_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_scheduled_on")
    /// Image `sch_takeout_off`.
    static let sch_takeout_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_takeout_off")
    /// Image `sch_takeout_on`.
    static let sch_takeout_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "sch_takeout_on")
    /// Image `schedule_banner`.
    static let schedule_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "schedule_banner")
    /// Image `schedule_icon`.
    static let schedule_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "schedule_icon")
    /// Image `schedule_top_icon`.
    static let schedule_top_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "schedule_top_icon")
    /// Image `search_payservice`.
    static let search_payservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_payservice")
    /// Image `secondStop`.
    static let secondStop = Rswift.ImageResource(bundle: R.hostingBundle, name: "secondStop")
    /// Image `selectedPointA2`.
    static let selectedPointA2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedPointA2")
    /// Image `selectedPointA`.
    static let selectedPointA = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedPointA")
    /// Image `selectedPointB2`.
    static let selectedPointB2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedPointB2")
    /// Image `selectedPointB`.
    static let selectedPointB = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedPointB")
    /// Image `selectedPointC`.
    static let selectedPointC = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedPointC")
    /// Image `selectedRectangle`.
    static let selectedRectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedRectangle")
    /// Image `selected_indicator`.
    static let selected_indicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_indicator")
    /// Image `selected_location`.
    static let selected_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_location")
    /// Image `selected_payment`.
    static let selected_payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_payment")
    /// Image `selected`.
    static let selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected")
    /// Image `selectedcc_orange`.
    static let selectedcc_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedcc_orange")
    /// Image `selectedcc_pink`.
    static let selectedcc_pink = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedcc_pink")
    /// Image `selectedcc_purple`.
    static let selectedcc_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedcc_purple")
    /// Image `selectedcc_white`.
    static let selectedcc_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedcc_white")
    /// Image `selectedcc_yellow`.
    static let selectedcc_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedcc_yellow")
    /// Image `selecting_marker_a`.
    static let selecting_marker_a = Rswift.ImageResource(bundle: R.hostingBundle, name: "selecting_marker_a")
    /// Image `selecting_marker_b`.
    static let selecting_marker_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "selecting_marker_b")
    /// Image `selecting_marker_c`.
    static let selecting_marker_c = Rswift.ImageResource(bundle: R.hostingBundle, name: "selecting_marker_c")
    /// Image `sendMoneyFailure`.
    static let sendMoneyFailure = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendMoneyFailure")
    /// Image `sendMoneyIcon`.
    static let sendMoneyIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendMoneyIcon")
    /// Image `sendMoneySuccess`.
    static let sendMoneySuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendMoneySuccess")
    /// Image `settings_profile`.
    static let settings_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_profile")
    /// Image `shape`.
    static let shape = Rswift.ImageResource(bundle: R.hostingBundle, name: "shape")
    /// Image `shop`.
    static let shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop")
    /// Image `shopping-cart`.
    static let shoppingCart = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping-cart")
    /// Image `similar_products`.
    static let similar_products = Rswift.ImageResource(bundle: R.hostingBundle, name: "similar_products")
    /// Image `siren`.
    static let siren = Rswift.ImageResource(bundle: R.hostingBundle, name: "siren")
    /// Image `size`.
    static let size = Rswift.ImageResource(bundle: R.hostingBundle, name: "size")
    /// Image `slide1`.
    static let slide1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide1")
    /// Image `slide2`.
    static let slide2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide2")
    /// Image `slide3`.
    static let slide3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide3")
    /// Image `sort_cost_icon`.
    static let sort_cost_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort_cost_icon")
    /// Image `sort_price_icon`.
    static let sort_price_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort_price_icon")
    /// Image `sort_time_icon`.
    static let sort_time_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort_time_icon")
    /// Image `sort`.
    static let sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort")
    /// Image `splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash")
    /// Image `squareTexture`.
    static let squareTexture = Rswift.ImageResource(bundle: R.hostingBundle, name: "squareTexture")
    /// Image `squarechecked`.
    static let squarechecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "squarechecked")
    /// Image `squareunchecked`.
    static let squareunchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "squareunchecked")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `stoke_hpfull_cashin_2`.
    static let stoke_hpfull_cashin_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "stoke_hpfull_cashin_2")
    /// Image `stoke_hpfull_cashin`.
    static let stoke_hpfull_cashin = Rswift.ImageResource(bundle: R.hostingBundle, name: "stoke_hpfull_cashin")
    /// Image `stop_search_disable`.
    static let stop_search_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "stop_search_disable")
    /// Image `stop_search`.
    static let stop_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "stop_search")
    /// Image `success_transaction_qr_hugopay`.
    static let success_transaction_qr_hugopay = Rswift.ImageResource(bundle: R.hostingBundle, name: "success_transaction_qr_hugopay")
    /// Image `superca4`.
    static let superca4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "superca4")
    /// Image `supercar2`.
    static let supercar2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "supercar2")
    /// Image `supercar3`.
    static let supercar3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "supercar3")
    /// Image `supercar`.
    static let supercar = Rswift.ImageResource(bundle: R.hostingBundle, name: "supercar")
    /// Image `tag`.
    static let tag = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag")
    /// Image `take_delivery_off`.
    static let take_delivery_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_delivery_off")
    /// Image `take_icon_card_top`.
    static let take_icon_card_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_icon_card_top")
    /// Image `take_icon_inmediato_off`.
    static let take_icon_inmediato_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_icon_inmediato_off")
    /// Image `take_icon_inmediato_on`.
    static let take_icon_inmediato_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_icon_inmediato_on")
    /// Image `take_icon_schedule_off`.
    static let take_icon_schedule_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_icon_schedule_off")
    /// Image `take_icon_schedule_on`.
    static let take_icon_schedule_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_icon_schedule_on")
    /// Image `take_icon_schedule`.
    static let take_icon_schedule = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_icon_schedule")
    /// Image `take_icon_take_off`.
    static let take_icon_take_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_icon_take_off")
    /// Image `take_icon_take_on`.
    static let take_icon_take_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_icon_take_on")
    /// Image `take_icon_top`.
    static let take_icon_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_icon_top")
    /// Image `take_img_inmediata`.
    static let take_img_inmediata = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_img_inmediata")
    /// Image `take_img_programada`.
    static let take_img_programada = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_img_programada")
    /// Image `take_img_recoger`.
    static let take_img_recoger = Rswift.ImageResource(bundle: R.hostingBundle, name: "take_img_recoger")
    /// Image `takeout_icon`.
    static let takeout_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_icon")
    /// Image `tarjeta_check`.
    static let tarjeta_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "tarjeta_check")
    /// Image `tarjeta_cvv_icon`.
    static let tarjeta_cvv_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tarjeta_cvv_icon")
    /// Image `tarjeta_cvv`.
    static let tarjeta_cvv = Rswift.ImageResource(bundle: R.hostingBundle, name: "tarjeta_cvv")
    /// Image `tarjeta_pt_check`.
    static let tarjeta_pt_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "tarjeta_pt_check")
    /// Image `tarjeta_pt_unchek`.
    static let tarjeta_pt_unchek = Rswift.ImageResource(bundle: R.hostingBundle, name: "tarjeta_pt_unchek")
    /// Image `terms_not_accepted`.
    static let terms_not_accepted = Rswift.ImageResource(bundle: R.hostingBundle, name: "terms_not_accepted")
    /// Image `toast`.
    static let toast = Rswift.ImageResource(bundle: R.hostingBundle, name: "toast")
    /// Image `token_shape_center`.
    static let token_shape_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "token_shape_center")
    /// Image `token_shape_left`.
    static let token_shape_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "token_shape_left")
    /// Image `topupicon`.
    static let topupicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "topupicon")
    /// Image `trash_morado`.
    static let trash_morado = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash_morado")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    /// Image `ubicacion_disable`.
    static let ubicacion_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ubicacion_disable")
    /// Image `ubicacion`.
    static let ubicacion = Rswift.ImageResource(bundle: R.hostingBundle, name: "ubicacion")
    /// Image `uncheck_typemandaditos`.
    static let uncheck_typemandaditos = Rswift.ImageResource(bundle: R.hostingBundle, name: "uncheck_typemandaditos")
    /// Image `unliked`.
    static let unliked = Rswift.ImageResource(bundle: R.hostingBundle, name: "unliked")
    /// Image `unselectedRectangle`.
    static let unselectedRectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedRectangle")
    /// Image `unselected_home`.
    static let unselected_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselected_home")
    /// Image `unselected_office`.
    static let unselected_office = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselected_office")
    /// Image `unselected_other`.
    static let unselected_other = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselected_other")
    /// Image `unselected`.
    static let unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselected")
    /// Image `update_alert_bottom`.
    static let update_alert_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "update_alert_bottom")
    /// Image `update_alert_right`.
    static let update_alert_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "update_alert_right")
    /// Image `upload_photo_en`.
    static let upload_photo_en = Rswift.ImageResource(bundle: R.hostingBundle, name: "upload_photo_en")
    /// Image `upload_photo`.
    static let upload_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "upload_photo")
    /// Image `uploaded_photo_en`.
    static let uploaded_photo_en = Rswift.ImageResource(bundle: R.hostingBundle, name: "uploaded_photo_en")
    /// Image `uploaded_photo`.
    static let uploaded_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "uploaded_photo")
    /// Image `us_dollar`.
    static let us_dollar = Rswift.ImageResource(bundle: R.hostingBundle, name: "us_dollar")
    /// Image `venmo`.
    static let venmo = Rswift.ImageResource(bundle: R.hostingBundle, name: "venmo")
    /// Image `visa_logo`.
    static let visa_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa_logo")
    /// Image `visa_orange`.
    static let visa_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa_orange")
    /// Image `visa_pink`.
    static let visa_pink = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa_pink")
    /// Image `visa_purple`.
    static let visa_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa_purple")
    /// Image `visa_shipment`.
    static let visa_shipment = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa_shipment")
    /// Image `visa_white`.
    static let visa_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa_white")
    /// Image `visa_yellow`.
    static let visa_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa_yellow")
    /// Image `visa`.
    static let visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa")
    /// Image `welcome_yummy`.
    static let welcome_yummy = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_yummy")
    /// Image `welcome`.
    static let welcome = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome")
    /// Image `whatsapp`.
    static let whatsapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "whatsapp")
    /// Image `work2`.
    static let work2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "work2")
    /// Image `work`.
    static let work = Rswift.ImageResource(bundle: R.hostingBundle, name: "work")
    /// Image `yummy_bird`.
    static let yummy_bird = Rswift.ImageResource(bundle: R.hostingBundle, name: "yummy_bird")
    /// Image `yummy_logo_green`.
    static let yummy_logo_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "yummy_logo_green")
    /// Image `yummy_logo_purple`.
    static let yummy_logo_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "yummy_logo_purple")
    /// Image `yummy_logo`.
    static let yummy_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "yummy_logo")
    /// Image `zelle_explication`.
    static let zelle_explication = Rswift.ImageResource(bundle: R.hostingBundle, name: "zelle_explication")
    /// Image `zelle_upload_empty`.
    static let zelle_upload_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "zelle_upload_empty")
    /// Image `zelle_upload_selected`.
    static let zelle_upload_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "zelle_upload_selected")
    /// Image `zelle`.
    static let zelle = Rswift.ImageResource(bundle: R.hostingBundle, name: "zelle")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ButtonTexture", bundle: ..., traitCollection: ...)`
    static func buttonTexture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buttonTexture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Circular", bundle: ..., traitCollection: ...)`
    static func circular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Estrella_Shape", bundle: ..., traitCollection: ...)`
    static func estrella_Shape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.estrella_Shape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Estrella_Stroke", bundle: ..., traitCollection: ...)`
    static func estrella_Stroke(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.estrella_Stroke, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Extra Large", bundle: ..., traitCollection: ...)`
    static func extraLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.extraLarge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Graphic Bezel", bundle: ..., traitCollection: ...)`
    static func graphicBezel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.graphicBezel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Graphic Circular", bundle: ..., traitCollection: ...)`
    static func graphicCircular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.graphicCircular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Graphic Corner", bundle: ..., traitCollection: ...)`
    static func graphicCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.graphicCorner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Graphic Extra Large", bundle: ..., traitCollection: ...)`
    static func graphicExtraLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.graphicExtraLarge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Graphic Large Rectangular", bundle: ..., traitCollection: ...)`
    static func graphicLargeRectangular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.graphicLargeRectangular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Modular", bundle: ..., traitCollection: ...)`
    static func modular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.modular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Smile", bundle: ..., traitCollection: ...)`
    static func smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Sunglasses", bundle: ..., traitCollection: ...)`
    static func sunglasses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunglasses, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Utilitarian", bundle: ..., traitCollection: ...)`
    static func utilitarian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.utilitarian, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accept_terms_hp", bundle: ..., traitCollection: ...)`
    static func accept_terms_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accept_terms_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accepted_terms", bundle: ..., traitCollection: ...)`
    static func accepted_terms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accepted_terms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "actual_location", bundle: ..., traitCollection: ...)`
    static func actual_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.actual_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_credit_card", bundle: ..., traitCollection: ...)`
    static func add_credit_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_credit_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_more_fill", bundle: ..., traitCollection: ...)`
    static func add_more_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_more_fill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert_chat", bundle: ..., traitCollection: ...)`
    static func alert_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alert_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert_icon", bundle: ..., traitCollection: ...)`
    static func alert_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alert_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert_mandaditos_stop", bundle: ..., traitCollection: ...)`
    static func alert_mandaditos_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alert_mandaditos_stop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alertbottom_info", bundle: ..., traitCollection: ...)`
    static func alertbottom_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertbottom_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alertbottom_orden", bundle: ..., traitCollection: ...)`
    static func alertbottom_orden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertbottom_orden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alertbottom_register", bundle: ..., traitCollection: ...)`
    static func alertbottom_register(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertbottom_register, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "american_express", bundle: ..., traitCollection: ...)`
    static func american_express(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.american_express, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amex_logo", bundle: ..., traitCollection: ...)`
    static func amex_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amex_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amex_orange", bundle: ..., traitCollection: ...)`
    static func amex_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amex_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amex_pink", bundle: ..., traitCollection: ...)`
    static func amex_pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amex_pink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amex_purple", bundle: ..., traitCollection: ...)`
    static func amex_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amex_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amex_shipment", bundle: ..., traitCollection: ...)`
    static func amex_shipment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amex_shipment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amex_white", bundle: ..., traitCollection: ...)`
    static func amex_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amex_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amex_yellow", bundle: ..., traitCollection: ...)`
    static func amex_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amex_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_combo", bundle: ..., traitCollection: ...)`
    static func arrow_combo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_combo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_payservice", bundle: ..., traitCollection: ...)`
    static func arrow_payservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_payservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aux_table", bundle: ..., traitCollection: ...)`
    static func aux_table(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aux_table, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar-gray", bundle: ..., traitCollection: ...)`
    static func avatarGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatarGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_hp", bundle: ..., traitCollection: ...)`
    static func back_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_payservice", bundle: ..., traitCollection: ...)`
    static func back_payservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_payservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_purple_services", bundle: ..., traitCollection: ...)`
    static func back_purple_services(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_purple_services, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_qrcode_left", bundle: ..., traitCollection: ...)`
    static func back_qrcode_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_qrcode_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_qrcode_right", bundle: ..., traitCollection: ...)`
    static func back_qrcode_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_qrcode_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_search", bundle: ..., traitCollection: ...)`
    static func back_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_shipment", bundle: ..., traitCollection: ...)`
    static func back_shipment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_shipment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_white", bundle: ..., traitCollection: ...)`
    static func back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_white_hp", bundle: ..., traitCollection: ...)`
    static func back_white_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_white_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_withCircle", bundle: ..., traitCollection: ...)`
    static func back_withCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_withCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_hugpay", bundle: ..., traitCollection: ...)`
    static func background_hugpay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_hugpay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner-app", bundle: ..., traitCollection: ...)`
    static func bannerApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bannerApp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner_payservice", bundle: ..., traitCollection: ...)`
    static func banner_payservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner_payservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barcode_icon", bundle: ..., traitCollection: ...)`
    static func barcode_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barcode_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnCashBackTutorial", bundle: ..., traitCollection: ...)`
    static func btnCashBackTutorial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnCashBackTutorial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_add_item", bundle: ..., traitCollection: ...)`
    static func btn_add_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_add_item_en", bundle: ..., traitCollection: ...)`
    static func btn_add_item_en(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add_item_en, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "buble_mandaditos_a", bundle: ..., traitCollection: ...)`
    static func buble_mandaditos_a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buble_mandaditos_a, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "buble_mandaditos_b", bundle: ..., traitCollection: ...)`
    static func buble_mandaditos_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buble_mandaditos_b, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "buble_mandaditos_c", bundle: ..., traitCollection: ...)`
    static func buble_mandaditos_c(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buble_mandaditos_c, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calories", bundle: ..., traitCollection: ...)`
    static func calories(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calories, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera_purple", bundle: ..., traitCollection: ...)`
    static func camera_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camioneta1", bundle: ..., traitCollection: ...)`
    static func camioneta1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camioneta1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camioneta2", bundle: ..., traitCollection: ...)`
    static func camioneta2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camioneta2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camioneta3", bundle: ..., traitCollection: ...)`
    static func camioneta3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camioneta3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel_mini", bundle: ..., traitCollection: ...)`
    static func cancel_mini(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_mini, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "car", bundle: ..., traitCollection: ...)`
    static func car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card_vertical_orange_hp", bundle: ..., traitCollection: ...)`
    static func card_vertical_orange_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card_vertical_orange_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card_vertical_pink_hp", bundle: ..., traitCollection: ...)`
    static func card_vertical_pink_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card_vertical_pink_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card_vertical_purple_hp", bundle: ..., traitCollection: ...)`
    static func card_vertical_purple_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card_vertical_purple_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card_vertical_white_hp", bundle: ..., traitCollection: ...)`
    static func card_vertical_white_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card_vertical_white_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card_vertical_yellow_hp", bundle: ..., traitCollection: ...)`
    static func card_vertical_yellow_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card_vertical_yellow_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cashbackMain", bundle: ..., traitCollection: ...)`
    static func cashbackMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cashbackMain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cashback_information_page", bundle: ..., traitCollection: ...)`
    static func cashback_information_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cashback_information_page, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cashback_redeem", bundle: ..., traitCollection: ...)`
    static func cashback_redeem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cashback_redeem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cc_orange", bundle: ..., traitCollection: ...)`
    static func cc_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cc_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cc_payservice", bundle: ..., traitCollection: ...)`
    static func cc_payservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cc_payservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cc_pink", bundle: ..., traitCollection: ...)`
    static func cc_pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cc_pink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cc_purple", bundle: ..., traitCollection: ...)`
    static func cc_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cc_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cc_white", bundle: ..., traitCollection: ...)`
    static func cc_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cc_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cc_yellow", bundle: ..., traitCollection: ...)`
    static func cc_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cc_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cellImageArrow", bundle: ..., traitCollection: ...)`
    static func cellImageArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellImageArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cerrar", bundle: ..., traitCollection: ...)`
    static func cerrar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cerrar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "channel_mail", bundle: ..., traitCollection: ...)`
    static func channel_mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "channel_phone", bundle: ..., traitCollection: ...)`
    static func channel_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "channel_whatsapp", bundle: ..., traitCollection: ...)`
    static func channel_whatsapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_whatsapp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chart_leftArrow_hugopay", bundle: ..., traitCollection: ...)`
    static func chart_leftArrow_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chart_leftArrow_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chart_rightArrow_hugopay", bundle: ..., traitCollection: ...)`
    static func chart_rightArrow_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chart_rightArrow_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatZD", bundle: ..., traitCollection: ...)`
    static func chatZD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatZD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatZD_back", bundle: ..., traitCollection: ...)`
    static func chatZD_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatZD_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_back", bundle: ..., traitCollection: ...)`
    static func chat_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check2", bundle: ..., traitCollection: ...)`
    static func check2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check2_empty", bundle: ..., traitCollection: ...)`
    static func check2_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check2_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_badratinglist", bundle: ..., traitCollection: ...)`
    static func check_badratinglist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_badratinglist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_empty", bundle: ..., traitCollection: ...)`
    static func check_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_typemandaditos", bundle: ..., traitCollection: ...)`
    static func check_typemandaditos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_typemandaditos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "christmas_star", bundle: ..., traitCollection: ...)`
    static func christmas_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.christmas_star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle_transaction_qr_hugopay", bundle: ..., traitCollection: ...)`
    static func circle_transaction_qr_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle_transaction_qr_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock_transportation", bundle: ..., traitCollection: ...)`
    static func clock_transportation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock_transportation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_purple", bundle: ..., traitCollection: ...)`
    static func close_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_purple_services", bundle: ..., traitCollection: ...)`
    static func close_purple_services(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_purple_services, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_qrcode", bundle: ..., traitCollection: ...)`
    static func close_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_qrcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud-computing", bundle: ..., traitCollection: ...)`
    static func cloudComputing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudComputing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "codebar_image", bundle: ..., traitCollection: ...)`
    static func codebar_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.codebar_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contactButton", bundle: ..., traitCollection: ...)`
    static func contactButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "costumer_support", bundle: ..., traitCollection: ...)`
    static func costumer_support(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.costumer_support, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coupon_code", bundle: ..., traitCollection: ...)`
    static func coupon_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coupon_code, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cut_hugopay", bundle: ..., traitCollection: ...)`
    static func cut_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cut_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cut_ticket", bundle: ..., traitCollection: ...)`
    static func cut_ticket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cut_ticket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "default_profile_pic", bundle: ..., traitCollection: ...)`
    static func default_profile_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_profile_pic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete-action-en", bundle: ..., traitCollection: ...)`
    static func deleteActionEn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteActionEn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete-action-es", bundle: ..., traitCollection: ...)`
    static func deleteActionEs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteActionEs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete_card_hp", bundle: ..., traitCollection: ...)`
    static func delete_card_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_card_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete_stop_search", bundle: ..., traitCollection: ...)`
    static func delete_stop_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_stop_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "descartar_icon_top", bundle: ..., traitCollection: ...)`
    static func descartar_icon_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.descartar_icon_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deselect_checkout", bundle: ..., traitCollection: ...)`
    static func deselect_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deselect_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deselectedPointA", bundle: ..., traitCollection: ...)`
    static func deselectedPointA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deselectedPointA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deselectedPointB", bundle: ..., traitCollection: ...)`
    static func deselectedPointB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deselectedPointB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deselectedPointB2", bundle: ..., traitCollection: ...)`
    static func deselectedPointB2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deselectedPointB2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deselectedPointC", bundle: ..., traitCollection: ...)`
    static func deselectedPointC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deselectedPointC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deselected_location", bundle: ..., traitCollection: ...)`
    static func deselected_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deselected_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "destPin", bundle: ..., traitCollection: ...)`
    static func destPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.destPin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "destino_search", bundle: ..., traitCollection: ...)`
    static func destino_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.destino_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "destinyB", bundle: ..., traitCollection: ...)`
    static func destinyB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.destinyB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail_location_shipment", bundle: ..., traitCollection: ...)`
    static func detail_location_shipment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_location_shipment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dialogue_image", bundle: ..., traitCollection: ...)`
    static func dialogue_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dialogue_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dismiss_card_hp", bundle: ..., traitCollection: ...)`
    static func dismiss_card_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dismiss_card_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dont_match", bundle: ..., traitCollection: ...)`
    static func dont_match(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dont_match, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dotsvertical", bundle: ..., traitCollection: ...)`
    static func dotsvertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotsvertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "driver_siluote", bundle: ..., traitCollection: ...)`
    static func driver_siluote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.driver_siluote, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dropdown_payservice", bundle: ..., traitCollection: ...)`
    static func dropdown_payservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropdown_payservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_card_hp", bundle: ..., traitCollection: ...)`
    static func edit_card_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_card_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_profile", bundle: ..., traitCollection: ...)`
    static func edit_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "el_salvador_flag", bundle: ..., traitCollection: ...)`
    static func el_salvador_flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.el_salvador_flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emergency", bundle: ..., traitCollection: ...)`
    static func emergency(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emergency, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emergency2", bundle: ..., traitCollection: ...)`
    static func emergency2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emergency2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_cards", bundle: ..., traitCollection: ...)`
    static func empty_cards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_cards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_chat", bundle: ..., traitCollection: ...)`
    static func empty_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_check", bundle: ..., traitCollection: ...)`
    static func empty_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_driver", bundle: ..., traitCollection: ...)`
    static func empty_driver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_driver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_history", bundle: ..., traitCollection: ...)`
    static func empty_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_image_cashin", bundle: ..., traitCollection: ...)`
    static func empty_image_cashin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_image_cashin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_name_email", bundle: ..., traitCollection: ...)`
    static func empty_name_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_name_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_orders", bundle: ..., traitCollection: ...)`
    static func empty_orders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_orders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_pic", bundle: ..., traitCollection: ...)`
    static func empty_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_pic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_search", bundle: ..., traitCollection: ...)`
    static func empty_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_state_alltrx_hugopay", bundle: ..., traitCollection: ...)`
    static func empty_state_alltrx_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_state_alltrx_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_state_hp", bundle: ..., traitCollection: ...)`
    static func empty_state_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_state_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_state_notifications2_hp", bundle: ..., traitCollection: ...)`
    static func empty_state_notifications2_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_state_notifications2_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_state_notifications_hugopay", bundle: ..., traitCollection: ...)`
    static func empty_state_notifications_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_state_notifications_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_state_qr_hugopay", bundle: ..., traitCollection: ...)`
    static func empty_state_qr_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_state_qr_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_user", bundle: ..., traitCollection: ...)`
    static func empty_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_vehicle", bundle: ..., traitCollection: ...)`
    static func empty_vehicle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_vehicle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "error_payment", bundle: ..., traitCollection: ...)`
    static func error_payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error_payment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "error_server", bundle: ..., traitCollection: ...)`
    static func error_server(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error_server, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "excursion", bundle: ..., traitCollection: ...)`
    static func excursion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.excursion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye_out", bundle: ..., traitCollection: ...)`
    static func eye_out(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_out, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "failure_transaction_qr_hugopay", bundle: ..., traitCollection: ...)`
    static func failure_transaction_qr_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.failure_transaction_qr_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fireworks", bundle: ..., traitCollection: ...)`
    static func fireworks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fireworks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fireworks_yummy", bundle: ..., traitCollection: ...)`
    static func fireworks_yummy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fireworks_yummy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "firstStop", bundle: ..., traitCollection: ...)`
    static func firstStop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstStop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag_cr_05", bundle: ..., traitCollection: ...)`
    static func flag_cr_05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_cr_05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag_gt_05", bundle: ..., traitCollection: ...)`
    static func flag_gt_05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_gt_05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag_sv-hn_05", bundle: ..., traitCollection: ...)`
    static func flag_svHn_05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_svHn_05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flappy-background", bundle: ..., traitCollection: ...)`
    static func flappyBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flappyBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flappy-close8", bundle: ..., traitCollection: ...)`
    static func flappyClose8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flappyClose8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flappy-cup8", bundle: ..., traitCollection: ...)`
    static func flappyCup8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flappyCup8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gallery_icon", bundle: ..., traitCollection: ...)`
    static func gallery_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gallery_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gift_icon", bundle: ..., traitCollection: ...)`
    static func gift_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gift_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gps2_new", bundle: ..., traitCollection: ...)`
    static func gps2_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gps2_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gps_missing", bundle: ..., traitCollection: ...)`
    static func gps_missing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gps_missing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gps_new", bundle: ..., traitCollection: ...)`
    static func gps_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gps_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greenIcon", bundle: ..., traitCollection: ...)`
    static func greenIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green_check", bundle: ..., traitCollection: ...)`
    static func green_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.green_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group1", bundle: ..., traitCollection: ...)`
    static func group1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group10", bundle: ..., traitCollection: ...)`
    static func group10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group11", bundle: ..., traitCollection: ...)`
    static func group11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group12", bundle: ..., traitCollection: ...)`
    static func group12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group13", bundle: ..., traitCollection: ...)`
    static func group13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group2", bundle: ..., traitCollection: ...)`
    static func group2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group4", bundle: ..., traitCollection: ...)`
    static func group4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group5", bundle: ..., traitCollection: ...)`
    static func group5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group6", bundle: ..., traitCollection: ...)`
    static func group6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group7", bundle: ..., traitCollection: ...)`
    static func group7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group8", bundle: ..., traitCollection: ...)`
    static func group8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group9", bundle: ..., traitCollection: ...)`
    static func group9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guard", bundle: ..., traitCollection: ...)`
    static func `guard`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`guard`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header", bundle: ..., traitCollection: ...)`
    static func header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header2", bundle: ..., traitCollection: ...)`
    static func header2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_hugopay", bundle: ..., traitCollection: ...)`
    static func header_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_hugopay_yellow", bundle: ..., traitCollection: ...)`
    static func header_hugopay_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_hugopay_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help_profile", bundle: ..., traitCollection: ...)`
    static func help_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history_empty", bundle: ..., traitCollection: ...)`
    static func history_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp02QrTimeOut", bundle: ..., traitCollection: ...)`
    static func hp02QrTimeOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp02QrTimeOut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_dismiss_alert", bundle: ..., traitCollection: ...)`
    static func hp_dismiss_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_dismiss_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_expensive_control_soon", bundle: ..., traitCollection: ...)`
    static func hp_expensive_control_soon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_expensive_control_soon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_arrow_back_white", bundle: ..., traitCollection: ...)`
    static func hp_full_arrow_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_arrow_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_arrow_down", bundle: ..., traitCollection: ...)`
    static func hp_full_arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_arrow_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_back", bundle: ..., traitCollection: ...)`
    static func hp_full_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_background_create_account", bundle: ..., traitCollection: ...)`
    static func hp_full_background_create_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_background_create_account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_background_header_small", bundle: ..., traitCollection: ...)`
    static func hp_full_background_header_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_background_header_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_block", bundle: ..., traitCollection: ...)`
    static func hp_full_block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_block, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_card", bundle: ..., traitCollection: ...)`
    static func hp_full_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_block", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_block, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_cashin", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_cashin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_cashin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_dollar_disabled", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_dollar_disabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_dollar_disabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_dollar_enabled", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_dollar_enabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_dollar_enabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_help", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_managed_account", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_managed_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_managed_account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_pie", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_pie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_pie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_qr", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_qr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_qr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_recarga", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_recarga(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_recarga, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_request", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_request(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_request, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_scana", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_scana(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_scana, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_send", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_serivicios", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_serivicios(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_serivicios, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_solicitudes", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_solicitudes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_solicitudes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_transfer_disabled", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_transfer_disabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_transfer_disabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_transfer_enabled", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_transfer_enabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_transfer_enabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_circle_tutorial", bundle: ..., traitCollection: ...)`
    static func hp_full_circle_tutorial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_circle_tutorial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_close_menu", bundle: ..., traitCollection: ...)`
    static func hp_full_close_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_close_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_digital_account", bundle: ..., traitCollection: ...)`
    static func hp_full_digital_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_digital_account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_digital_card", bundle: ..., traitCollection: ...)`
    static func hp_full_digital_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_digital_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_ellipse", bundle: ..., traitCollection: ...)`
    static func hp_full_ellipse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_ellipse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_final_card", bundle: ..., traitCollection: ...)`
    static func hp_full_final_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_final_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_float_button", bundle: ..., traitCollection: ...)`
    static func hp_full_float_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_float_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_float_copy", bundle: ..., traitCollection: ...)`
    static func hp_full_float_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_float_copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_hugo_logo_create_account", bundle: ..., traitCollection: ...)`
    static func hp_full_hugo_logo_create_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_hugo_logo_create_account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_hugo_pay_logo", bundle: ..., traitCollection: ...)`
    static func hp_full_hugo_pay_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_hugo_pay_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_hugo_pay_logo_allwhite", bundle: ..., traitCollection: ...)`
    static func hp_full_hugo_pay_logo_allwhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_hugo_pay_logo_allwhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_icon_bell", bundle: ..., traitCollection: ...)`
    static func hp_full_icon_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_icon_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_icon_header", bundle: ..., traitCollection: ...)`
    static func hp_full_icon_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_icon_header, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_icon_header_white", bundle: ..., traitCollection: ...)`
    static func hp_full_icon_header_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_icon_header_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_icon_information", bundle: ..., traitCollection: ...)`
    static func hp_full_icon_information(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_icon_information, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_icon_photo", bundle: ..., traitCollection: ...)`
    static func hp_full_icon_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_icon_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_icon_plus", bundle: ..., traitCollection: ...)`
    static func hp_full_icon_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_icon_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_icon_stepOne", bundle: ..., traitCollection: ...)`
    static func hp_full_icon_stepOne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_icon_stepOne, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_icon_tutorial2", bundle: ..., traitCollection: ...)`
    static func hp_full_icon_tutorial2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_icon_tutorial2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_nav_background", bundle: ..., traitCollection: ...)`
    static func hp_full_nav_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_nav_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_onboarding_background", bundle: ..., traitCollection: ...)`
    static func hp_full_onboarding_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_onboarding_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_path_tutorial", bundle: ..., traitCollection: ...)`
    static func hp_full_path_tutorial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_path_tutorial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_physical_card", bundle: ..., traitCollection: ...)`
    static func hp_full_physical_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_physical_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_reset_via_email", bundle: ..., traitCollection: ...)`
    static func hp_full_reset_via_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_reset_via_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_reset_via_sms", bundle: ..., traitCollection: ...)`
    static func hp_full_reset_via_sms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_reset_via_sms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_settings", bundle: ..., traitCollection: ...)`
    static func hp_full_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_switch_card", bundle: ..., traitCollection: ...)`
    static func hp_full_switch_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_switch_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_switch_lock_card", bundle: ..., traitCollection: ...)`
    static func hp_full_switch_lock_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_switch_lock_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_tutorial_btn_background", bundle: ..., traitCollection: ...)`
    static func hp_full_tutorial_btn_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_tutorial_btn_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hp_full_validate_identity", bundle: ..., traitCollection: ...)`
    static func hp_full_validate_identity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hp_full_validate_identity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hpf_calendar", bundle: ..., traitCollection: ...)`
    static func hpf_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hpf_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hpf_deselect_contact", bundle: ..., traitCollection: ...)`
    static func hpf_deselect_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hpf_deselect_contact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hpf_icon_filter", bundle: ..., traitCollection: ...)`
    static func hpf_icon_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hpf_icon_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hpf_payment", bundle: ..., traitCollection: ...)`
    static func hpf_payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hpf_payment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hpf_pincode_bg_success", bundle: ..., traitCollection: ...)`
    static func hpf_pincode_bg_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hpf_pincode_bg_success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hpf_pincode_success", bundle: ..., traitCollection: ...)`
    static func hpf_pincode_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hpf_pincode_success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hpf_precio", bundle: ..., traitCollection: ...)`
    static func hpf_precio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hpf_precio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hpf_price_range", bundle: ..., traitCollection: ...)`
    static func hpf_price_range(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hpf_price_range, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hugo-delivery", bundle: ..., traitCollection: ...)`
    static func hugoDelivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hugoDelivery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hugoLogo", bundle: ..., traitCollection: ...)`
    static func hugoLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hugoLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hugoPayLogo", bundle: ..., traitCollection: ...)`
    static func hugoPayLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hugoPayLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hugoPayWhiteLogo", bundle: ..., traitCollection: ...)`
    static func hugoPayWhiteLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hugoPayWhiteLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hugo_icon", bundle: ..., traitCollection: ...)`
    static func hugo_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hugo_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hugo_outline", bundle: ..., traitCollection: ...)`
    static func hugo_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hugo_outline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hugologoword", bundle: ..., traitCollection: ...)`
    static func hugologoword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hugologoword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_English_BaseProgrammer", bundle: ..., traitCollection: ...)`
    static func ic_English_BaseProgrammer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_English_BaseProgrammer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_English_Most", bundle: ..., traitCollection: ...)`
    static func ic_English_Most(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_English_Most, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_button_card_hugopay", bundle: ..., traitCollection: ...)`
    static func ic_add_button_card_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_button_card_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_filled", bundle: ..., traitCollection: ...)`
    static func ic_add_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_address", bundle: ..., traitCollection: ...)`
    static func ic_address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_address, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_amex", bundle: ..., traitCollection: ...)`
    static func ic_amex(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_amex, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bad_off", bundle: ..., traitCollection: ...)`
    static func ic_bad_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bad_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bad_on", bundle: ..., traitCollection: ...)`
    static func ic_bad_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bad_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_gray_hugopay", bundle: ..., traitCollection: ...)`
    static func ic_bar_gray_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_gray_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_hugopay", bundle: ..., traitCollection: ...)`
    static func ic_bar_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_hugopay_white", bundle: ..., traitCollection: ...)`
    static func ic_bar_hugopay_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_hugopay_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_profile", bundle: ..., traitCollection: ...)`
    static func ic_bar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_profile_white", bundle: ..., traitCollection: ...)`
    static func ic_bar_profile_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_profile_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_purple_hugopay", bundle: ..., traitCollection: ...)`
    static func ic_bar_purple_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_purple_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_ride_2", bundle: ..., traitCollection: ...)`
    static func ic_bar_ride_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_ride_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_ride_white2", bundle: ..., traitCollection: ...)`
    static func ic_bar_ride_white2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_ride_white2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_tracking", bundle: ..., traitCollection: ...)`
    static func ic_bar_tracking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_tracking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bar_tracking_white", bundle: ..., traitCollection: ...)`
    static func ic_bar_tracking_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bar_tracking_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_button_favorite", bundle: ..., traitCollection: ...)`
    static func ic_button_favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_button_favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_button_unfavorite", bundle: ..., traitCollection: ...)`
    static func ic_button_unfavorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_button_unfavorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_camera", bundle: ..., traitCollection: ...)`
    static func ic_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_car", bundle: ..., traitCollection: ...)`
    static func ic_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_car_purple", bundle: ..., traitCollection: ...)`
    static func ic_car_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_car_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_card_layer_hugopay", bundle: ..., traitCollection: ...)`
    static func ic_card_layer_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card_layer_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cards", bundle: ..., traitCollection: ...)`
    static func ic_cards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_case", bundle: ..., traitCollection: ...)`
    static func ic_case(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_case, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cash", bundle: ..., traitCollection: ...)`
    static func ic_cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cash_lines", bundle: ..., traitCollection: ...)`
    static func ic_cash_lines(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cash_lines, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cc_color", bundle: ..., traitCollection: ...)`
    static func ic_cc_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cc_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cc_cvc_icon", bundle: ..., traitCollection: ...)`
    static func ic_cc_cvc_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cc_cvc_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cc_exp_icon", bundle: ..., traitCollection: ...)`
    static func ic_cc_exp_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cc_exp_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cc_gift", bundle: ..., traitCollection: ...)`
    static func ic_cc_gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cc_gift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cc_lines", bundle: ..., traitCollection: ...)`
    static func ic_cc_lines(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cc_lines, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_celular", bundle: ..., traitCollection: ...)`
    static func ic_celular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_celular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chash_color", bundle: ..., traitCollection: ...)`
    static func ic_chash_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chash_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_blue", bundle: ..., traitCollection: ...)`
    static func ic_check_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_green", bundle: ..., traitCollection: ...)`
    static func ic_check_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_purple", bundle: ..., traitCollection: ...)`
    static func ic_check_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checked_terms", bundle: ..., traitCollection: ...)`
    static func ic_checked_terms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checked_terms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_circle_send_hp", bundle: ..., traitCollection: ...)`
    static func ic_circle_send_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_circle_send_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_clip", bundle: ..., traitCollection: ...)`
    static func ic_clip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_clock", bundle: ..., traitCollection: ...)`
    static func ic_clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_clock_mini", bundle: ..., traitCollection: ...)`
    static func ic_clock_mini(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clock_mini, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close_black", bundle: ..., traitCollection: ...)`
    static func ic_close_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_coupon_active", bundle: ..., traitCollection: ...)`
    static func ic_coupon_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_coupon_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_coupon_inactive", bundle: ..., traitCollection: ...)`
    static func ic_coupon_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_coupon_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete_image", bundle: ..., traitCollection: ...)`
    static func ic_delete_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete_image_gray", bundle: ..., traitCollection: ...)`
    static func ic_delete_image_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_image_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_destiny", bundle: ..., traitCollection: ...)`
    static func ic_destiny(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_destiny, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_disclouser", bundle: ..., traitCollection: ...)`
    static func ic_disclouser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_disclouser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_disclouser_mandaditos", bundle: ..., traitCollection: ...)`
    static func ic_disclouser_mandaditos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_disclouser_mandaditos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_discover", bundle: ..., traitCollection: ...)`
    static func ic_discover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_empty_order", bundle: ..., traitCollection: ...)`
    static func ic_empty_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_empty_order, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_exclamation", bundle: ..., traitCollection: ...)`
    static func ic_exclamation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_exclamation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_expand_arrow", bundle: ..., traitCollection: ...)`
    static func ic_expand_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_expand_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_fb", bundle: ..., traitCollection: ...)`
    static func ic_fb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_feed_guest_photo", bundle: ..., traitCollection: ...)`
    static func ic_feed_guest_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feed_guest_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_feed_notification", bundle: ..., traitCollection: ...)`
    static func ic_feed_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feed_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_feed_notification_empty", bundle: ..., traitCollection: ...)`
    static func ic_feed_notification_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feed_notification_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_filter_hugopay", bundle: ..., traitCollection: ...)`
    static func ic_filter_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_good2_off", bundle: ..., traitCollection: ...)`
    static func ic_good2_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_good2_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_good2_on", bundle: ..., traitCollection: ...)`
    static func ic_good2_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_good2_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_good_off", bundle: ..., traitCollection: ...)`
    static func ic_good_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_good_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_good_on", bundle: ..., traitCollection: ...)`
    static func ic_good_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_good_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_great_off", bundle: ..., traitCollection: ...)`
    static func ic_great_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_great_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_great_on", bundle: ..., traitCollection: ...)`
    static func ic_great_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_great_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_grid", bundle: ..., traitCollection: ...)`
    static func ic_grid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_grid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_hamburger", bundle: ..., traitCollection: ...)`
    static func ic_hamburger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hamburger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_help", bundle: ..., traitCollection: ...)`
    static func ic_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_help2", bundle: ..., traitCollection: ...)`
    static func ic_help2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_help2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home", bundle: ..., traitCollection: ...)`
    static func ic_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_white", bundle: ..., traitCollection: ...)`
    static func ic_home_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_info", bundle: ..., traitCollection: ...)`
    static func ic_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_list", bundle: ..., traitCollection: ...)`
    static func ic_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_magnifying_light", bundle: ..., traitCollection: ...)`
    static func ic_magnifying_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_magnifying_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mail", bundle: ..., traitCollection: ...)`
    static func ic_mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_marker", bundle: ..., traitCollection: ...)`
    static func ic_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_marker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_marker_purple", bundle: ..., traitCollection: ...)`
    static func ic_marker_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_marker_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mastercard-curved", bundle: ..., traitCollection: ...)`
    static func ic_mastercardCurved(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mastercardCurved, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_minus", bundle: ..., traitCollection: ...)`
    static func ic_minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_money_color", bundle: ..., traitCollection: ...)`
    static func ic_money_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_money_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more", bundle: ..., traitCollection: ...)`
    static func ic_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mustache", bundle: ..., traitCollection: ...)`
    static func ic_mustache(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mustache, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_navigation", bundle: ..., traitCollection: ...)`
    static func ic_navigation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_navigation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_north_purple", bundle: ..., traitCollection: ...)`
    static func ic_north_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_north_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_north_white", bundle: ..., traitCollection: ...)`
    static func ic_north_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_north_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_office", bundle: ..., traitCollection: ...)`
    static func ic_office(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_office, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_office_white", bundle: ..., traitCollection: ...)`
    static func ic_office_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_office_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_orders", bundle: ..., traitCollection: ...)`
    static func ic_orders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_orders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_phone", bundle: ..., traitCollection: ...)`
    static func ic_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pin", bundle: ..., traitCollection: ...)`
    static func ic_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_place_purple", bundle: ..., traitCollection: ...)`
    static func ic_place_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_place_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_place_white", bundle: ..., traitCollection: ...)`
    static func ic_place_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_place_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus", bundle: ..., traitCollection: ...)`
    static func ic_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus_fill", bundle: ..., traitCollection: ...)`
    static func ic_plus_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus_fill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus_new", bundle: ..., traitCollection: ...)`
    static func ic_plus_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pointer", bundle: ..., traitCollection: ...)`
    static func ic_pointer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pointer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_product_trash", bundle: ..., traitCollection: ...)`
    static func ic_product_trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_product_trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_purple_flag", bundle: ..., traitCollection: ...)`
    static func ic_purple_flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_purple_flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_question", bundle: ..., traitCollection: ...)`
    static func ic_question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_question, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_question-1", bundle: ..., traitCollection: ...)`
    static func ic_question1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_question1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_quit", bundle: ..., traitCollection: ...)`
    static func ic_quit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_quit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radar", bundle: ..., traitCollection: ...)`
    static func ic_radar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_rate_dynamic", bundle: ..., traitCollection: ...)`
    static func ic_rate_dynamic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_rate_dynamic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_rating_bad", bundle: ..., traitCollection: ...)`
    static func ic_rating_bad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_rating_bad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_rating_good", bundle: ..., traitCollection: ...)`
    static func ic_rating_good(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_rating_good, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_return", bundle: ..., traitCollection: ...)`
    static func ic_return(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_return, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ride_complete", bundle: ..., traitCollection: ...)`
    static func ic_ride_complete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ride_complete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sbasket", bundle: ..., traitCollection: ...)`
    static func ic_sbasket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sbasket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_small", bundle: ..., traitCollection: ...)`
    static func ic_search_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_white", bundle: ..., traitCollection: ...)`
    static func ic_search_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sel_card_points", bundle: ..., traitCollection: ...)`
    static func ic_sel_card_points(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sel_card_points, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_selected_billing", bundle: ..., traitCollection: ...)`
    static func ic_selected_billing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_selected_billing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_selected_prize", bundle: ..., traitCollection: ...)`
    static func ic_selected_prize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_selected_prize, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_settings", bundle: ..., traitCollection: ...)`
    static func ic_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_shopping_bag", bundle: ..., traitCollection: ...)`
    static func ic_shopping_bag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_shopping_bag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_slider_alert", bundle: ..., traitCollection: ...)`
    static func ic_slider_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_slider_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sort3", bundle: ..., traitCollection: ...)`
    static func ic_sort3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sort3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sort3_black", bundle: ..., traitCollection: ...)`
    static func ic_sort3_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sort3_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sort_selected", bundle: ..., traitCollection: ...)`
    static func ic_sort_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sort_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_white", bundle: ..., traitCollection: ...)`
    static func ic_star_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_store", bundle: ..., traitCollection: ...)`
    static func ic_store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_store, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_terms_hp", bundle: ..., traitCollection: ...)`
    static func ic_terms_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_terms_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_token", bundle: ..., traitCollection: ...)`
    static func ic_token(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_token, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_trash", bundle: ..., traitCollection: ...)`
    static func ic_trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_trophy", bundle: ..., traitCollection: ...)`
    static func ic_trophy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_trophy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_trophy-2", bundle: ..., traitCollection: ...)`
    static func ic_trophy2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_trophy2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_txt_hide", bundle: ..., traitCollection: ...)`
    static func ic_txt_hide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_txt_hide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_txt_show", bundle: ..., traitCollection: ...)`
    static func ic_txt_show(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_txt_show, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_uncheck_blue", bundle: ..., traitCollection: ...)`
    static func ic_uncheck_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_uncheck_terms", bundle: ..., traitCollection: ...)`
    static func ic_uncheck_terms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck_terms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_unselected_circle", bundle: ..., traitCollection: ...)`
    static func ic_unselected_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselected_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user", bundle: ..., traitCollection: ...)`
    static func ic_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user_profile", bundle: ..., traitCollection: ...)`
    static func ic_user_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_visa-curved", bundle: ..., traitCollection: ...)`
    static func ic_visaCurved(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visaCurved, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wallet_home", bundle: ..., traitCollection: ...)`
    static func ic_wallet_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wallet_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wallet_profile", bundle: ..., traitCollection: ...)`
    static func ic_wallet_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wallet_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_white_flag", bundle: ..., traitCollection: ...)`
    static func ic_white_flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_white_flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_worst_off", bundle: ..., traitCollection: ...)`
    static func ic_worst_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_worst_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_worst_on", bundle: ..., traitCollection: ...)`
    static func ic_worst_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_worst_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico-billing", bundle: ..., traitCollection: ...)`
    static func icoBilling(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoBilling, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico-card-points", bundle: ..., traitCollection: ...)`
    static func icoCardPoints(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoCardPoints, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico-home", bundle: ..., traitCollection: ...)`
    static func icoHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico-location", bundle: ..., traitCollection: ...)`
    static func icoLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico-pin", bundle: ..., traitCollection: ...)`
    static func icoPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoPin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico-plus", bundle: ..., traitCollection: ...)`
    static func icoPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico-work", bundle: ..., traitCollection: ...)`
    static func icoWork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoWork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icoPlusInvoice", bundle: ..., traitCollection: ...)`
    static func icoPlusInvoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoPlusInvoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_add_more", bundle: ..., traitCollection: ...)`
    static func ico_add_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_add_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_whatsapp", bundle: ..., traitCollection: ...)`
    static func ico_whatsapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_whatsapp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-alert", bundle: ..., traitCollection: ...)`
    static func iconAlert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAlert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-cancel", bundle: ..., traitCollection: ...)`
    static func iconCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-circle-cashIn", bundle: ..., traitCollection: ...)`
    static func iconCircleCashIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCircleCashIn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-plus", bundle: ..., traitCollection: ...)`
    static func iconPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconControl", bundle: ..., traitCollection: ...)`
    static func iconControl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconControl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconHelpNotifications", bundle: ..., traitCollection: ...)`
    static func iconHelpNotifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHelpNotifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconInfo", bundle: ..., traitCollection: ...)`
    static func iconInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMailing", bundle: ..., traitCollection: ...)`
    static func iconMailing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMailing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconRecargaSolicitar", bundle: ..., traitCollection: ...)`
    static func iconRecargaSolicitar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRecargaSolicitar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconServices", bundle: ..., traitCollection: ...)`
    static func iconServices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconServices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconStock", bundle: ..., traitCollection: ...)`
    static func iconStock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconStock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_add_card", bundle: ..., traitCollection: ...)`
    static func icon_add_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_add_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_close_hp", bundle: ..., traitCollection: ...)`
    static func icon_close_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_date_hp", bundle: ..., traitCollection: ...)`
    static func icon_date_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_date_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_document", bundle: ..., traitCollection: ...)`
    static func icon_document(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_document, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_face_id", bundle: ..., traitCollection: ...)`
    static func icon_face_id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_face_id, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_infoPhone", bundle: ..., traitCollection: ...)`
    static func icon_infoPhone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_infoPhone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_money_hp", bundle: ..., traitCollection: ...)`
    static func icon_money_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_money_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more", bundle: ..., traitCollection: ...)`
    static func icon_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_notification", bundle: ..., traitCollection: ...)`
    static func icon_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_touch_id", bundle: ..., traitCollection: ...)`
    static func icon_touch_id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_touch_id, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ilu-somethingwentwrongHP", bundle: ..., traitCollection: ...)`
    static func iluSomethingwentwrongHP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iluSomethingwentwrongHP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iluAccountlokedHp", bundle: ..., traitCollection: ...)`
    static func iluAccountlokedHp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iluAccountlokedHp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_attachment", bundle: ..., traitCollection: ...)`
    static func image_attachment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_attachment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_placeholder", bundle: ..., traitCollection: ...)`
    static func image_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_services_fail", bundle: ..., traitCollection: ...)`
    static func image_services_fail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_services_fail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_topup", bundle: ..., traitCollection: ...)`
    static func image_topup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_topup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_0", bundle: ..., traitCollection: ...)`
    static func img_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_1", bundle: ..., traitCollection: ...)`
    static func img_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info-card", bundle: ..., traitCollection: ...)`
    static func infoCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infoCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info_out_of_sync", bundle: ..., traitCollection: ...)`
    static func info_out_of_sync(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_out_of_sync, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info_shipment", bundle: ..., traitCollection: ...)`
    static func info_shipment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_shipment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ir", bundle: ..., traitCollection: ...)`
    static func ir(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ir, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "leftArrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "liked", bundle: ..., traitCollection: ...)`
    static func liked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loadingimage", bundle: ..., traitCollection: ...)`
    static func loadingimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location-pin", bundle: ..., traitCollection: ...)`
    static func locationPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationPin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location-pin-gray", bundle: ..., traitCollection: ...)`
    static func locationPinGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationPinGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_profile", bundle: ..., traitCollection: ...)`
    static func location_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_question", bundle: ..., traitCollection: ...)`
    static func location_question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_question, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login", bundle: ..., traitCollection: ...)`
    static func login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_facebook", bundle: ..., traitCollection: ...)`
    static func login_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_hugoPay", bundle: ..., traitCollection: ...)`
    static func logo_hugoPay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_hugoPay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_hugo_rating", bundle: ..., traitCollection: ...)`
    static func logo_hugo_rating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_hugo_rating, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_hugopay", bundle: ..., traitCollection: ...)`
    static func logo_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_hugopayfull", bundle: ..., traitCollection: ...)`
    static func logo_hugopayfull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_hugopayfull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_hugopayfull_blanco", bundle: ..., traitCollection: ...)`
    static func logo_hugopayfull_blanco(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_hugopayfull_blanco, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_yummyPay", bundle: ..., traitCollection: ...)`
    static func logo_yummyPay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_yummyPay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_yummy_rating", bundle: ..., traitCollection: ...)`
    static func logo_yummy_rating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_yummy_rating, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout_profile", bundle: ..., traitCollection: ...)`
    static func logout_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lupa", bundle: ..., traitCollection: ...)`
    static func lupa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lupa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "madeIn", bundle: ..., traitCollection: ...)`
    static func madeIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.madeIn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "maestro_logo", bundle: ..., traitCollection: ...)`
    static func maestro_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maestro_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail_bill", bundle: ..., traitCollection: ...)`
    static func mail_bill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail_bill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail_validate", bundle: ..., traitCollection: ...)`
    static func mail_validate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail_validate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "marker", bundle: ..., traitCollection: ...)`
    static func marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "marker2", bundle: ..., traitCollection: ...)`
    static func marker2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marker2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "markerHugo", bundle: ..., traitCollection: ...)`
    static func markerHugo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markerHugo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "markerLocation2", bundle: ..., traitCollection: ...)`
    static func markerLocation2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markerLocation2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard", bundle: ..., traitCollection: ...)`
    static func mastercard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard_logo", bundle: ..., traitCollection: ...)`
    static func mastercard_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard_orange", bundle: ..., traitCollection: ...)`
    static func mastercard_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard_pink", bundle: ..., traitCollection: ...)`
    static func mastercard_pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard_pink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard_purple", bundle: ..., traitCollection: ...)`
    static func mastercard_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard_shipment", bundle: ..., traitCollection: ...)`
    static func mastercard_shipment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard_shipment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard_white", bundle: ..., traitCollection: ...)`
    static func mastercard_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard_yellow", bundle: ..., traitCollection: ...)`
    static func mastercard_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "medicine", bundle: ..., traitCollection: ...)`
    static func medicine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.medicine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message", bundle: ..., traitCollection: ...)`
    static func message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more_hugoPay", bundle: ..., traitCollection: ...)`
    static func more_hugoPay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_hugoPay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "most_popular", bundle: ..., traitCollection: ...)`
    static func most_popular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.most_popular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_location_icon", bundle: ..., traitCollection: ...)`
    static func my_location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_location_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_location_icon_empty", bundle: ..., traitCollection: ...)`
    static func my_location_icon_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_location_icon_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_chat_gray", bundle: ..., traitCollection: ...)`
    static func navbar_chat_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_chat_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_history_gray", bundle: ..., traitCollection: ...)`
    static func navbar_history_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_history_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_history_green", bundle: ..., traitCollection: ...)`
    static func navbar_history_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_history_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_history_purple", bundle: ..., traitCollection: ...)`
    static func navbar_history_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_history_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_home_gray", bundle: ..., traitCollection: ...)`
    static func navbar_home_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_home_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_home_green", bundle: ..., traitCollection: ...)`
    static func navbar_home_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_home_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_home_purple", bundle: ..., traitCollection: ...)`
    static func navbar_home_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_home_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_profile_gray", bundle: ..., traitCollection: ...)`
    static func navbar_profile_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_profile_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_profile_green", bundle: ..., traitCollection: ...)`
    static func navbar_profile_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_profile_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_profile_purple", bundle: ..., traitCollection: ...)`
    static func navbar_profile_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_profile_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_transport_gray", bundle: ..., traitCollection: ...)`
    static func navbar_transport_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_transport_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_transport_green", bundle: ..., traitCollection: ...)`
    static func navbar_transport_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_transport_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_transport_purple", bundle: ..., traitCollection: ...)`
    static func navbar_transport_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_transport_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_calendar", bundle: ..., traitCollection: ...)`
    static func new_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_internet_error", bundle: ..., traitCollection: ...)`
    static func no_internet_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_internet_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_search", bundle: ..., traitCollection: ...)`
    static func no_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_terms_hp", bundle: ..., traitCollection: ...)`
    static func no_terms_hp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_terms_hp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "novalidcode", bundle: ..., traitCollection: ...)`
    static func novalidcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.novalidcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "oboard_location_bottom", bundle: ..., traitCollection: ...)`
    static func oboard_location_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oboard_location_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "oboard_location_right", bundle: ..., traitCollection: ...)`
    static func oboard_location_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oboard_location_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_alert", bundle: ..., traitCollection: ...)`
    static func onboarding_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_car", bundle: ..., traitCollection: ...)`
    static func onboarding_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_glasses", bundle: ..., traitCollection: ...)`
    static func onboarding_glasses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_glasses, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_smile", bundle: ..., traitCollection: ...)`
    static func onboarding_smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_smile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_transport", bundle: ..., traitCollection: ...)`
    static func onboarding_transport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_transport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "orange_indicator", bundle: ..., traitCollection: ...)`
    static func orange_indicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orange_indicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_empty", bundle: ..., traitCollection: ...)`
    static func order_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_finished", bundle: ..., traitCollection: ...)`
    static func order_finished(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_finished, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_finished_rating", bundle: ..., traitCollection: ...)`
    static func order_finished_rating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_finished_rating, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "origPin", bundle: ..., traitCollection: ...)`
    static func origPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.origPin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "originA", bundle: ..., traitCollection: ...)`
    static func originA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.originA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "other", bundle: ..., traitCollection: ...)`
    static func other(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.other, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "other2", bundle: ..., traitCollection: ...)`
    static func other2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.other2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ovalPlus", bundle: ..., traitCollection: ...)`
    static func ovalPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ovalPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "p-purple-h", bundle: ..., traitCollection: ...)`
    static func pPurpleH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pPurpleH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "package_img", bundle: ..., traitCollection: ...)`
    static func package_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.package_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pago_movil", bundle: ..., traitCollection: ...)`
    static func pago_movil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pago_movil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "parada1", bundle: ..., traitCollection: ...)`
    static func parada1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parada1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "parada2", bundle: ..., traitCollection: ...)`
    static func parada2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parada2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "partner", bundle: ..., traitCollection: ...)`
    static func partner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.partner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "path1", bundle: ..., traitCollection: ...)`
    static func path1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "path2", bundle: ..., traitCollection: ...)`
    static func path2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paymentchecked", bundle: ..., traitCollection: ...)`
    static func paymentchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentchecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paymentunchecked", bundle: ..., traitCollection: ...)`
    static func paymentunchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentunchecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paypal", bundle: ..., traitCollection: ...)`
    static func paypal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paypal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pci-dss-compliant", bundle: ..., traitCollection: ...)`
    static func pciDssCompliant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pciDssCompliant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "peoplepay", bundle: ..., traitCollection: ...)`
    static func peoplepay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.peoplepay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "permisos", bundle: ..., traitCollection: ...)`
    static func permisos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.permisos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "person", bundle: ..., traitCollection: ...)`
    static func person(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.person, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone", bundle: ..., traitCollection: ...)`
    static func phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pickup1", bundle: ..., traitCollection: ...)`
    static func pickup1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pickup1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pickup2", bundle: ..., traitCollection: ...)`
    static func pickup2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pickup2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin_purple", bundle: ..., traitCollection: ...)`
    static func pin_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "place", bundle: ..., traitCollection: ...)`
    static func place(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.place, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "place_search", bundle: ..., traitCollection: ...)`
    static func place_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.place_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_cell_a", bundle: ..., traitCollection: ...)`
    static func placeholder_cell_a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_cell_a, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_cell_b", bundle: ..., traitCollection: ...)`
    static func placeholder_cell_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_cell_b, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_cell_c", bundle: ..., traitCollection: ...)`
    static func placeholder_cell_c(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_cell_c, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_cell_d", bundle: ..., traitCollection: ...)`
    static func placeholder_cell_d(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_cell_d, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_cell_e", bundle: ..., traitCollection: ...)`
    static func placeholder_cell_e(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_cell_e, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_morado", bundle: ..., traitCollection: ...)`
    static func plus_morado(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_morado, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "position_map", bundle: ..., traitCollection: ...)`
    static func position_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.position_map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "product", bundle: ..., traitCollection: ...)`
    static func product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_pic", bundle: ..., traitCollection: ...)`
    static func profile_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_pic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "purpleIcon", bundle: ..., traitCollection: ...)`
    static func purpleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purpleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "purpleMail", bundle: ..., traitCollection: ...)`
    static func purpleMail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purpleMail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrCodeButton", bundle: ..., traitCollection: ...)`
    static func qrCodeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrCodeButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qr_YummyCode", bundle: ..., traitCollection: ...)`
    static func qr_YummyCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_YummyCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qr_code", bundle: ..., traitCollection: ...)`
    static func qr_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_code, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qr_hugopay_btn", bundle: ..., traitCollection: ...)`
    static func qr_hugopay_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_hugopay_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_card_purple_hugopay", bundle: ..., traitCollection: ...)`
    static func qrcode_card_purple_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_card_purple_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "questions-circular-button", bundle: ..., traitCollection: ...)`
    static func questionsCircularButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.questionsCircularButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rating_star", bundle: ..., traitCollection: ...)`
    static func rating_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rating_star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "recent", bundle: ..., traitCollection: ...)`
    static func recent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "recently", bundle: ..., traitCollection: ...)`
    static func recently(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recently, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reload_purple", bundle: ..., traitCollection: ...)`
    static func reload_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reload_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "remate", bundle: ..., traitCollection: ...)`
    static func remate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.remate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "removeContactButton", bundle: ..., traitCollection: ...)`
    static func removeContactButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.removeContactButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "requestMoneyIcon", bundle: ..., traitCollection: ...)`
    static func requestMoneyIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.requestMoneyIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "requestMoneySuccess", bundle: ..., traitCollection: ...)`
    static func requestMoneySuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.requestMoneySuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reserve", bundle: ..., traitCollection: ...)`
    static func reserve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reserve, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "restaurant", bundle: ..., traitCollection: ...)`
    static func restaurant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restaurant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "running_bike", bundle: ..., traitCollection: ...)`
    static func running_bike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.running_bike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_address_icon", bundle: ..., traitCollection: ...)`
    static func sch_address_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_address_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_cancel_icon", bundle: ..., traitCollection: ...)`
    static func sch_cancel_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_cancel_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_check_off", bundle: ..., traitCollection: ...)`
    static func sch_check_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_check_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_check_on", bundle: ..., traitCollection: ...)`
    static func sch_check_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_check_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_creditos_off", bundle: ..., traitCollection: ...)`
    static func sch_creditos_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_creditos_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_creditos_on", bundle: ..., traitCollection: ...)`
    static func sch_creditos_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_creditos_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_image_confirm_cancel", bundle: ..., traitCollection: ...)`
    static func sch_image_confirm_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_image_confirm_cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_image_confirm_payment", bundle: ..., traitCollection: ...)`
    static func sch_image_confirm_payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_image_confirm_payment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_inmediato_off", bundle: ..., traitCollection: ...)`
    static func sch_inmediato_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_inmediato_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_inmediato_on", bundle: ..., traitCollection: ...)`
    static func sch_inmediato_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_inmediato_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_reintegro_off", bundle: ..., traitCollection: ...)`
    static func sch_reintegro_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_reintegro_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_reintegro_on", bundle: ..., traitCollection: ...)`
    static func sch_reintegro_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_reintegro_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_scheduled_off", bundle: ..., traitCollection: ...)`
    static func sch_scheduled_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_scheduled_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_scheduled_on", bundle: ..., traitCollection: ...)`
    static func sch_scheduled_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_scheduled_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_takeout_off", bundle: ..., traitCollection: ...)`
    static func sch_takeout_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_takeout_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sch_takeout_on", bundle: ..., traitCollection: ...)`
    static func sch_takeout_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sch_takeout_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "schedule_banner", bundle: ..., traitCollection: ...)`
    static func schedule_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.schedule_banner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "schedule_icon", bundle: ..., traitCollection: ...)`
    static func schedule_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.schedule_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "schedule_top_icon", bundle: ..., traitCollection: ...)`
    static func schedule_top_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.schedule_top_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_payservice", bundle: ..., traitCollection: ...)`
    static func search_payservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_payservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "secondStop", bundle: ..., traitCollection: ...)`
    static func secondStop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.secondStop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selected", bundle: ..., traitCollection: ...)`
    static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedPointA", bundle: ..., traitCollection: ...)`
    static func selectedPointA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedPointA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedPointA2", bundle: ..., traitCollection: ...)`
    static func selectedPointA2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedPointA2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedPointB", bundle: ..., traitCollection: ...)`
    static func selectedPointB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedPointB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedPointB2", bundle: ..., traitCollection: ...)`
    static func selectedPointB2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedPointB2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedPointC", bundle: ..., traitCollection: ...)`
    static func selectedPointC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedPointC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedRectangle", bundle: ..., traitCollection: ...)`
    static func selectedRectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedRectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selected_indicator", bundle: ..., traitCollection: ...)`
    static func selected_indicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_indicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selected_location", bundle: ..., traitCollection: ...)`
    static func selected_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selected_payment", bundle: ..., traitCollection: ...)`
    static func selected_payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_payment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedcc_orange", bundle: ..., traitCollection: ...)`
    static func selectedcc_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedcc_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedcc_pink", bundle: ..., traitCollection: ...)`
    static func selectedcc_pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedcc_pink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedcc_purple", bundle: ..., traitCollection: ...)`
    static func selectedcc_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedcc_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedcc_white", bundle: ..., traitCollection: ...)`
    static func selectedcc_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedcc_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedcc_yellow", bundle: ..., traitCollection: ...)`
    static func selectedcc_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedcc_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selecting_marker_a", bundle: ..., traitCollection: ...)`
    static func selecting_marker_a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selecting_marker_a, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selecting_marker_b", bundle: ..., traitCollection: ...)`
    static func selecting_marker_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selecting_marker_b, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selecting_marker_c", bundle: ..., traitCollection: ...)`
    static func selecting_marker_c(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selecting_marker_c, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendMoneyFailure", bundle: ..., traitCollection: ...)`
    static func sendMoneyFailure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMoneyFailure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendMoneyIcon", bundle: ..., traitCollection: ...)`
    static func sendMoneyIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMoneyIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendMoneySuccess", bundle: ..., traitCollection: ...)`
    static func sendMoneySuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMoneySuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_profile", bundle: ..., traitCollection: ...)`
    static func settings_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shape", bundle: ..., traitCollection: ...)`
    static func shape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shop", bundle: ..., traitCollection: ...)`
    static func shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping-cart", bundle: ..., traitCollection: ...)`
    static func shoppingCart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingCart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "similar_products", bundle: ..., traitCollection: ...)`
    static func similar_products(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.similar_products, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "siren", bundle: ..., traitCollection: ...)`
    static func siren(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.siren, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "size", bundle: ..., traitCollection: ...)`
    static func size(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.size, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide1", bundle: ..., traitCollection: ...)`
    static func slide1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide2", bundle: ..., traitCollection: ...)`
    static func slide2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide3", bundle: ..., traitCollection: ...)`
    static func slide3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sort", bundle: ..., traitCollection: ...)`
    static func sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sort_cost_icon", bundle: ..., traitCollection: ...)`
    static func sort_cost_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort_cost_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sort_price_icon", bundle: ..., traitCollection: ...)`
    static func sort_price_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort_price_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sort_time_icon", bundle: ..., traitCollection: ...)`
    static func sort_time_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort_time_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "squareTexture", bundle: ..., traitCollection: ...)`
    static func squareTexture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.squareTexture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "squarechecked", bundle: ..., traitCollection: ...)`
    static func squarechecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.squarechecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "squareunchecked", bundle: ..., traitCollection: ...)`
    static func squareunchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.squareunchecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stoke_hpfull_cashin", bundle: ..., traitCollection: ...)`
    static func stoke_hpfull_cashin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stoke_hpfull_cashin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stoke_hpfull_cashin_2", bundle: ..., traitCollection: ...)`
    static func stoke_hpfull_cashin_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stoke_hpfull_cashin_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stop_search", bundle: ..., traitCollection: ...)`
    static func stop_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stop_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stop_search_disable", bundle: ..., traitCollection: ...)`
    static func stop_search_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stop_search_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "success_transaction_qr_hugopay", bundle: ..., traitCollection: ...)`
    static func success_transaction_qr_hugopay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.success_transaction_qr_hugopay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "superca4", bundle: ..., traitCollection: ...)`
    static func superca4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.superca4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "supercar", bundle: ..., traitCollection: ...)`
    static func supercar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.supercar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "supercar2", bundle: ..., traitCollection: ...)`
    static func supercar2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.supercar2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "supercar3", bundle: ..., traitCollection: ...)`
    static func supercar3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.supercar3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag", bundle: ..., traitCollection: ...)`
    static func tag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_delivery_off", bundle: ..., traitCollection: ...)`
    static func take_delivery_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_delivery_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_icon_card_top", bundle: ..., traitCollection: ...)`
    static func take_icon_card_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_icon_card_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_icon_inmediato_off", bundle: ..., traitCollection: ...)`
    static func take_icon_inmediato_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_icon_inmediato_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_icon_inmediato_on", bundle: ..., traitCollection: ...)`
    static func take_icon_inmediato_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_icon_inmediato_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_icon_schedule", bundle: ..., traitCollection: ...)`
    static func take_icon_schedule(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_icon_schedule, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_icon_schedule_off", bundle: ..., traitCollection: ...)`
    static func take_icon_schedule_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_icon_schedule_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_icon_schedule_on", bundle: ..., traitCollection: ...)`
    static func take_icon_schedule_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_icon_schedule_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_icon_take_off", bundle: ..., traitCollection: ...)`
    static func take_icon_take_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_icon_take_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_icon_take_on", bundle: ..., traitCollection: ...)`
    static func take_icon_take_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_icon_take_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_icon_top", bundle: ..., traitCollection: ...)`
    static func take_icon_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_icon_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_img_inmediata", bundle: ..., traitCollection: ...)`
    static func take_img_inmediata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_img_inmediata, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_img_programada", bundle: ..., traitCollection: ...)`
    static func take_img_programada(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_img_programada, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take_img_recoger", bundle: ..., traitCollection: ...)`
    static func take_img_recoger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.take_img_recoger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "takeout_icon", bundle: ..., traitCollection: ...)`
    static func takeout_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tarjeta_check", bundle: ..., traitCollection: ...)`
    static func tarjeta_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tarjeta_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tarjeta_cvv", bundle: ..., traitCollection: ...)`
    static func tarjeta_cvv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tarjeta_cvv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tarjeta_cvv_icon", bundle: ..., traitCollection: ...)`
    static func tarjeta_cvv_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tarjeta_cvv_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tarjeta_pt_check", bundle: ..., traitCollection: ...)`
    static func tarjeta_pt_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tarjeta_pt_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tarjeta_pt_unchek", bundle: ..., traitCollection: ...)`
    static func tarjeta_pt_unchek(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tarjeta_pt_unchek, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "terms_not_accepted", bundle: ..., traitCollection: ...)`
    static func terms_not_accepted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.terms_not_accepted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toast", bundle: ..., traitCollection: ...)`
    static func toast(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toast, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token_shape_center", bundle: ..., traitCollection: ...)`
    static func token_shape_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.token_shape_center, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token_shape_left", bundle: ..., traitCollection: ...)`
    static func token_shape_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.token_shape_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topupicon", bundle: ..., traitCollection: ...)`
    static func topupicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topupicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash_morado", bundle: ..., traitCollection: ...)`
    static func trash_morado(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash_morado, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ubicacion", bundle: ..., traitCollection: ...)`
    static func ubicacion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ubicacion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ubicacion_disable", bundle: ..., traitCollection: ...)`
    static func ubicacion_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ubicacion_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uncheck_typemandaditos", bundle: ..., traitCollection: ...)`
    static func uncheck_typemandaditos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheck_typemandaditos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unliked", bundle: ..., traitCollection: ...)`
    static func unliked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unliked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselected", bundle: ..., traitCollection: ...)`
    static func unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselectedRectangle", bundle: ..., traitCollection: ...)`
    static func unselectedRectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedRectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselected_home", bundle: ..., traitCollection: ...)`
    static func unselected_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselected_office", bundle: ..., traitCollection: ...)`
    static func unselected_office(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected_office, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselected_other", bundle: ..., traitCollection: ...)`
    static func unselected_other(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected_other, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "update_alert_bottom", bundle: ..., traitCollection: ...)`
    static func update_alert_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.update_alert_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "update_alert_right", bundle: ..., traitCollection: ...)`
    static func update_alert_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.update_alert_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upload_photo", bundle: ..., traitCollection: ...)`
    static func upload_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upload_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upload_photo_en", bundle: ..., traitCollection: ...)`
    static func upload_photo_en(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upload_photo_en, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uploaded_photo", bundle: ..., traitCollection: ...)`
    static func uploaded_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uploaded_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uploaded_photo_en", bundle: ..., traitCollection: ...)`
    static func uploaded_photo_en(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uploaded_photo_en, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "us_dollar", bundle: ..., traitCollection: ...)`
    static func us_dollar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.us_dollar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "venmo", bundle: ..., traitCollection: ...)`
    static func venmo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.venmo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa", bundle: ..., traitCollection: ...)`
    static func visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa_logo", bundle: ..., traitCollection: ...)`
    static func visa_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa_orange", bundle: ..., traitCollection: ...)`
    static func visa_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa_pink", bundle: ..., traitCollection: ...)`
    static func visa_pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa_pink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa_purple", bundle: ..., traitCollection: ...)`
    static func visa_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa_shipment", bundle: ..., traitCollection: ...)`
    static func visa_shipment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa_shipment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa_white", bundle: ..., traitCollection: ...)`
    static func visa_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa_yellow", bundle: ..., traitCollection: ...)`
    static func visa_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome", bundle: ..., traitCollection: ...)`
    static func welcome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome_yummy", bundle: ..., traitCollection: ...)`
    static func welcome_yummy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_yummy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whatsapp", bundle: ..., traitCollection: ...)`
    static func whatsapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whatsapp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "work", bundle: ..., traitCollection: ...)`
    static func work(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.work, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "work2", bundle: ..., traitCollection: ...)`
    static func work2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.work2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yummy_bird", bundle: ..., traitCollection: ...)`
    static func yummy_bird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yummy_bird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yummy_logo", bundle: ..., traitCollection: ...)`
    static func yummy_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yummy_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yummy_logo_green", bundle: ..., traitCollection: ...)`
    static func yummy_logo_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yummy_logo_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yummy_logo_purple", bundle: ..., traitCollection: ...)`
    static func yummy_logo_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yummy_logo_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zelle", bundle: ..., traitCollection: ...)`
    static func zelle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zelle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zelle_explication", bundle: ..., traitCollection: ...)`
    static func zelle_explication(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zelle_explication, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zelle_upload_empty", bundle: ..., traitCollection: ...)`
    static func zelle_upload_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zelle_upload_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zelle_upload_selected", bundle: ..., traitCollection: ...)`
    static func zelle_upload_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zelle_upload_selected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 21 nibs.
  struct nib {
    /// Nib `CardHPFullCollectionViewCell`.
    static let cardHPFullCollectionViewCell = _R.nib._CardHPFullCollectionViewCell()
    /// Nib `CashInMoneyIncome`.
    static let cashInMoneyIncome = _R.nib._CashInMoneyIncome()
    /// Nib `CashinMoneyConfirmation`.
    static let cashinMoneyConfirmation = _R.nib._CashinMoneyConfirmation()
    /// Nib `ContactTableViewCell`.
    static let contactTableViewCell = _R.nib._ContactTableViewCell()
    /// Nib `GeneralErrorAlert`.
    static let generalErrorAlert = _R.nib._GeneralErrorAlert()
    /// Nib `HelpOptionsHPFullView`.
    static let helpOptionsHPFullView = _R.nib._HelpOptionsHPFullView()
    /// Nib `HugoPayPhoneView`.
    static let hugoPayPhoneView = _R.nib._HugoPayPhoneView()
    /// Nib `OptionHPFullCollectionViewCell`.
    static let optionHPFullCollectionViewCell = _R.nib._OptionHPFullCollectionViewCell()
    /// Nib `OptionsHugoPayFullView`.
    static let optionsHugoPayFullView = _R.nib._OptionsHugoPayFullView()
    /// Nib `PageOnboardingHPFullView`.
    static let pageOnboardingHPFullView = _R.nib._PageOnboardingHPFullView()
    /// Nib `RequestMoneyConfirmationView`.
    static let requestMoneyConfirmationView = _R.nib._RequestMoneyConfirmationView()
    /// Nib `RequestMoneyView`.
    static let requestMoneyView = _R.nib._RequestMoneyView()
    /// Nib `ResetPinOptionsHugoPayFullView`.
    static let resetPinOptionsHugoPayFullView = _R.nib._ResetPinOptionsHugoPayFullView()
    /// Nib `SecurityOptionsHugoPayFullView`.
    static let securityOptionsHugoPayFullView = _R.nib._SecurityOptionsHugoPayFullView()
    /// Nib `SelectedContactView`.
    static let selectedContactView = _R.nib._SelectedContactView()
    /// Nib `SendMoneyConfirmationView`.
    static let sendMoneyConfirmationView = _R.nib._SendMoneyConfirmationView()
    /// Nib `SendMoneyView`.
    static let sendMoneyView = _R.nib._SendMoneyView()
    /// Nib `TransactionFooterTableViewCell`.
    static let transactionFooterTableViewCell = _R.nib._TransactionFooterTableViewCell()
    /// Nib `TransactionHPFullCell`.
    static let transactionHPFullCell = _R.nib._TransactionHPFullCell()
    /// Nib `TutorialPageCollectionViewCell`.
    static let tutorialPageCollectionViewCell = _R.nib._TutorialPageCollectionViewCell()
    /// Nib `TutorialPageWithoutImageCollectionViewCell`.
    static let tutorialPageWithoutImageCollectionViewCell = _R.nib._TutorialPageWithoutImageCollectionViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CardHPFullCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cardHPFullCollectionViewCell) instead")
    static func cardHPFullCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardHPFullCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CashInMoneyIncome", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cashInMoneyIncome) instead")
    static func cashInMoneyIncome(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cashInMoneyIncome)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CashinMoneyConfirmation", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cashinMoneyConfirmation) instead")
    static func cashinMoneyConfirmation(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cashinMoneyConfirmation)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ContactTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contactTableViewCell) instead")
    static func contactTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GeneralErrorAlert", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.generalErrorAlert) instead")
    static func generalErrorAlert(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.generalErrorAlert)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HelpOptionsHPFullView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.helpOptionsHPFullView) instead")
    static func helpOptionsHPFullView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.helpOptionsHPFullView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HugoPayPhoneView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hugoPayPhoneView) instead")
    static func hugoPayPhoneView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hugoPayPhoneView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OptionHPFullCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.optionHPFullCollectionViewCell) instead")
    static func optionHPFullCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.optionHPFullCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OptionsHugoPayFullView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.optionsHugoPayFullView) instead")
    static func optionsHugoPayFullView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.optionsHugoPayFullView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PageOnboardingHPFullView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pageOnboardingHPFullView) instead")
    static func pageOnboardingHPFullView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pageOnboardingHPFullView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RequestMoneyConfirmationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.requestMoneyConfirmationView) instead")
    static func requestMoneyConfirmationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.requestMoneyConfirmationView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RequestMoneyView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.requestMoneyView) instead")
    static func requestMoneyView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.requestMoneyView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResetPinOptionsHugoPayFullView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resetPinOptionsHugoPayFullView) instead")
    static func resetPinOptionsHugoPayFullView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resetPinOptionsHugoPayFullView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SecurityOptionsHugoPayFullView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.securityOptionsHugoPayFullView) instead")
    static func securityOptionsHugoPayFullView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.securityOptionsHugoPayFullView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectedContactView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectedContactView) instead")
    static func selectedContactView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectedContactView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SendMoneyConfirmationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sendMoneyConfirmationView) instead")
    static func sendMoneyConfirmationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendMoneyConfirmationView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SendMoneyView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sendMoneyView) instead")
    static func sendMoneyView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendMoneyView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionFooterTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionFooterTableViewCell) instead")
    static func transactionFooterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionFooterTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionHPFullCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionHPFullCell) instead")
    static func transactionHPFullCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHPFullCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TutorialPageCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tutorialPageCollectionViewCell) instead")
    static func tutorialPageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tutorialPageCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TutorialPageWithoutImageCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tutorialPageWithoutImageCollectionViewCell) instead")
    static func tutorialPageWithoutImageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tutorialPageWithoutImageCollectionViewCell)
    }
    #endif

    static func cardHPFullCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardHPFullCollectionViewCell? {
      return R.nib.cardHPFullCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardHPFullCollectionViewCell
    }

    static func cashInMoneyIncome(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cashInMoneyIncome.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func cashinMoneyConfirmation(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cashinMoneyConfirmation.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func contactTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactTableViewCell? {
      return R.nib.contactTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactTableViewCell
    }

    static func generalErrorAlert(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GeneralErrorAlert? {
      return R.nib.generalErrorAlert.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GeneralErrorAlert
    }

    static func helpOptionsHPFullView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.helpOptionsHPFullView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func hugoPayPhoneView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.hugoPayPhoneView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func optionHPFullCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OptionHPFullCollectionViewCell? {
      return R.nib.optionHPFullCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OptionHPFullCollectionViewCell
    }

    static func optionsHugoPayFullView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.optionsHugoPayFullView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pageOnboardingHPFullView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PageOnboardingHPFull? {
      return R.nib.pageOnboardingHPFullView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageOnboardingHPFull
    }

    static func requestMoneyConfirmationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.requestMoneyConfirmationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func requestMoneyView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.requestMoneyView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func resetPinOptionsHugoPayFullView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.resetPinOptionsHugoPayFullView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func securityOptionsHugoPayFullView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.securityOptionsHugoPayFullView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func selectedContactView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectedContactView? {
      return R.nib.selectedContactView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectedContactView
    }

    static func sendMoneyConfirmationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sendMoneyConfirmationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func sendMoneyView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sendMoneyView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionFooterTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionFooterTableViewCell? {
      return R.nib.transactionFooterTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionFooterTableViewCell
    }

    static func transactionHPFullCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionHPFullCell? {
      return R.nib.transactionHPFullCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionHPFullCell
    }

    static func tutorialPageCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialPageCollectionViewCell? {
      return R.nib.tutorialPageCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialPageCollectionViewCell
    }

    static func tutorialPageWithoutImageCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialPageWithoutImageCollectionViewCell? {
      return R.nib.tutorialPageWithoutImageCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialPageWithoutImageCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ContactTableViewCell`.
    static let contactTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ContactTableViewCell")
    /// Reuse identifier `OptionHugoPayCollectionViewCell`.
    static let optionHugoPayCollectionViewCell: Rswift.ReuseIdentifier<OptionHPFullCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "OptionHugoPayCollectionViewCell")
    /// Reuse identifier `TransactionHPFullCell`.
    static let transactionHPFullCell: Rswift.ReuseIdentifier<TransactionHPFullCell> = Rswift.ReuseIdentifier(identifier: "TransactionHPFullCell")
    /// Reuse identifier `cellTransactionFooter`.
    static let cellTransactionFooter: Rswift.ReuseIdentifier<TransactionFooterTableViewCell> = Rswift.ReuseIdentifier(identifier: "cellTransactionFooter")
    /// Reuse identifier `cellTutorialPageNoImage`.
    static let cellTutorialPageNoImage: Rswift.ReuseIdentifier<TutorialPageWithoutImageCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "cellTutorialPageNoImage")
    /// Reuse identifier `cellTutorialPage`.
    static let cellTutorialPage: Rswift.ReuseIdentifier<TutorialPageCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "cellTutorialPage")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 1693 localization keys.
    struct localizable {
      /// en translation: 
      ///
      /// Locales: en, es, English
      static let errorCDSubTitle = Rswift.StringResource(key: "ErrorCDSubTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 
      ///
      /// Locales: en, es, English
      static let hotZoneSubTitle = Rswift.StringResource(key: "HotZoneSubTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:      1. Write the address where we will pick up your package (Point A)      2. Write the address where we will deliver your package (Point B)      3. Tell us what Hugo should do at Point A (Request the keys to ...)      4. Tell us what Hugo should do at point B (leave the keys with ...)      5. Add a photo for a better explanation (Optional)      Ready! It's that easy      * Remember that we transport anything, that fits on the motorcycle * 
      ///
      /// Locales: en, es, English
      static let infoShipment = Rswift.StringResource(key: "InfoShipment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:   Ready! We have sent the code again
      ///
      /// Locales: en, es
      static let lbl_Step2_Send_Code_Ready = Rswift.StringResource(key: "lbl_Step2_Send_Code_Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation:  @ name is on the way.
      ///
      /// Locales: en, es, English
      static let lbl_Information_Name = Rswift.StringResource(key: "lbl_Information_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  @vehicleModel - @color
      ///
      /// Locales: en, es, English
      static let lbl_Information_Model = Rswift.StringResource(key: "lbl_Information_Model", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  @vehiclePlate
      ///
      /// Locales: en, es, English
      static let lbl_Information_Plate = Rswift.StringResource(key: "lbl_Information_Plate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  Add something else
      ///
      /// Locales: en, es, English
      static let btn_OrderSummary_Add_Something = Rswift.StringResource(key: "btn_OrderSummary_Add_Something", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  Call 911
      ///
      /// Locales: en, es, English
      static let lbl_EmergencyOn_Call = Rswift.StringResource(key: "lbl_EmergencyOn_Call", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  Closed
      ///
      /// Locales: en, es, English
      static let lbl_PartnerFeedTable_Closed = Rswift.StringResource(key: "lbl_PartnerFeedTable_Closed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  EDIT ROUTE
      ///
      /// Locales: en, es, English
      static let btn_RouteCell_Edit = Rswift.StringResource(key: "btn_RouteCell_Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  Edit my telephone number.
      ///
      /// Locales: en, es, English
      static let lbl_PreferencesSubtitle_Edit_Phone = Rswift.StringResource(key: "lbl_PreferencesSubtitle_Edit_Phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  He will arrive in @time
      ///
      /// Locales: en, es, English
      static let lbl_Information_time = Rswift.StringResource(key: "lbl_Information_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  MODIFY LIST
      ///
      /// Locales: en, es, English
      static let btn_ListView_Modify_List = Rswift.StringResource(key: "btn_ListView_Modify_List", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  Select the quantity.
      ///
      /// Locales: en, es, English
      static let lbl_OptionsQtyCell_Qty = Rswift.StringResource(key: "lbl_OptionsQtyCell_Qty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  Stop place (B)
      ///
      /// Locales: en, es, English
      static let lbl_PaymentLocation_Stop_Place = Rswift.StringResource(key: "lbl_PaymentLocation_Stop_Place", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  YOUR TRANSPORTATION WILL ARRIVE IN 4 MIN.!
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide2_Arrives_Time = Rswift.StringResource(key: "lbl_PickingRide2_Arrives_Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation:  to the number 
      ///
      /// Locales: en, es
      static let to_Number = Rswift.StringResource(key: "To_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: $10 minimum
      ///
      /// Locales: en, es, English
      static let lbl_PartnerTable_Minimum = Rswift.StringResource(key: "lbl_PartnerTable_Minimum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: $100,999.95 minimum
      ///
      /// Locales: en, es, English
      static let lbl_PartnerFeedTable_Minimum = Rswift.StringResource(key: "lbl_PartnerFeedTable_Minimum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: $amount
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeRide_Amount = Rswift.StringResource(key: "lbl_FinalizeRide_Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: (Soon)
      ///
      /// Locales: en, es
      static let hp_tutorial_control_soon_title = Rswift.StringResource(key: "hp_tutorial_control_soon_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: * Required
      ///
      /// Locales: en, es
      static let lbl_AddressBook_Required = Rswift.StringResource(key: "lbl_AddressBook_Required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: * You must enter a valid email
      ///
      /// Locales: en, es, English
      static let emailRequiredTitle = Rswift.StringResource(key: "EmailRequiredTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ** Minimum amount to charge 
      ///
      /// Locales: en, es
      static let hp_CashInMoneyIncome_MinimumAmount = Rswift.StringResource(key: "hp_CashInMoneyIncome_MinimumAmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 00000000000000
      ///
      /// Locales: en, es
      static let receipt_configuration_document_placeholder = Rswift.StringResource(key: "receipt_configuration_document_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 00:00
      ///
      /// Locales: en, es, English
      static let lbl_order_estimation = Rswift.StringResource(key: "lbl_order_estimation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 1 of 3
      ///
      /// Locales: en, es
      static let lbl_Step1 = Rswift.StringResource(key: "lbl_Step1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 1-9 passengers
      ///
      /// Locales: en, English
      static let lbl_RideMap_passenger = Rswift.StringResource(key: "lbl_RideMap_passenger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: 1. First article on the list
      ///
      /// Locales: en, es, English
      static let lbl_First_Time = Rswift.StringResource(key: "lbl_First_Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 1. Product Name
      ///
      /// Locales: en, es, English
      static let lbl_ListView_Product_Name = Rswift.StringResource(key: "lbl_ListView_Product_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 101-2563-123-8
      ///
      /// Locales: en, es, English
      static let billing_cell_nit = Rswift.StringResource(key: "billing_cell_nit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 10:00 am
      ///
      /// Locales: en, es, English
      static let lbl_cell_order_tracking_info_time = Rswift.StringResource(key: "lbl_cell_order_tracking_info_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 10:00am - 10:30pm
      ///
      /// Locales: en, es, English
      static let lbl_PartnerTable_Time = Rswift.StringResource(key: "lbl_PartnerTable_Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 140 restaurants
      ///
      /// Locales: en, es, English
      static let lbl_Service_Restaurants = Rswift.StringResource(key: "lbl_Service_Restaurants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 2 of 2
      ///
      /// Locales: en, es
      static let lbl_Step2 = Rswift.StringResource(key: "lbl_Step2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 2- Which was the last business you had contact with?
      ///
      /// Locales: en, es, English
      static let lbl_Last_Trade = Rswift.StringResource(key: "lbl_Last_Trade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 2. Product Name
      ///
      /// Locales: en, es, English
      static let lbl_ListView_Product2 = Rswift.StringResource(key: "lbl_ListView_Product2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 3 of 3
      ///
      /// Locales: en, es
      static let lbl_Step3 = Rswift.StringResource(key: "lbl_Step3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 3.  Product Name
      ///
      /// Locales: en, es, English
      static let lbl_ListView_Product3 = Rswift.StringResource(key: "lbl_ListView_Product3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 30-40 min.
      ///
      /// Locales: en, es, English
      static let lbl_PartnerTable_Minutes = Rswift.StringResource(key: "lbl_PartnerTable_Minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 35 min.
      ///
      /// Locales: en, es, English
      static let lbl_PartnerFeedTable_Mintues = Rswift.StringResource(key: "lbl_PartnerFeedTable_Mintues", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 4.  Product Name
      ///
      /// Locales: en, es, English
      static let lbl_ListView_Product4 = Rswift.StringResource(key: "lbl_ListView_Product4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 5.  Product Name
      ///
      /// Locales: en, es, English
      static let lbl_ListView_Product5 = Rswift.StringResource(key: "lbl_ListView_Product5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: 8-16 character password
      ///
      /// Locales: en, es
      static let createPassword_Eight = Rswift.StringResource(key: "CreatePassword_Eight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 91 Avenida Norte, San Salvador …
      ///
      /// Locales: en, es, English
      static let lbl_RideOrderTable_Address = Rswift.StringResource(key: "lbl_RideOrderTable_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: A capital letter
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Capital_Later = Rswift.StringResource(key: "lbl_CreatePassword_Capital_Later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: A help request has been sent.
      ///
      /// Locales: en, es, English
      static let lbl_CustomCall_Sent_Help = Rswift.StringResource(key: "lbl_CustomCall_Sent_Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: A minimum of 8 characters
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Minimum_Eight = Rswift.StringResource(key: "lbl_CreatePassword_Minimum_Eight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: A new order will be loaded, if you have an unprocessed order it will be replaced. Do you want to continue?
      ///
      /// Locales: en, es, English
      static let tokenLoadNewOrderMessage = Rswift.StringResource(key: "tokenLoadNewOrderMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: A number
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Number = Rswift.StringResource(key: "lbl_CreatePassword_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: A session is needed
      ///
      /// Locales: en, es, English
      static let needLoginTitle = Rswift.StringResource(key: "NeedLoginTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: A three digit code on your credit card can be found on the back of your card.
      ///
      /// Locales: en, es, English
      static let cvcCardInfoMessage = Rswift.StringResource(key: "CVCCardInfoMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ABOUT HUGO
      ///
      /// Locales: en, es, English
      static let lbl_About_Hugo = Rswift.StringResource(key: "lbl_About_Hugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ABOUT YUMMY
      ///
      /// Locales: en, es
      static let lbl_About_Yummy = Rswift.StringResource(key: "lbl_About_Yummy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ACCEPT
      ///
      /// Locales: en, es, English
      static let lbl_To_Accept = Rswift.StringResource(key: "lbl_To_Accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ACSA Insurance
      ///
      /// Locales: en, es, English
      static let lbl_ProvidersPayServices_Insurance_ACSA = Rswift.StringResource(key: "lbl_ProvidersPayServices_Insurance_ACSA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ACTIVE
      ///
      /// Locales: en, es
      static let lbl_Active_orders = Rswift.StringResource(key: "lbl_Active_orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ACTIVE ORDERS
      ///
      /// Locales: en, es, English
      static let btn_active_orders = Rswift.StringResource(key: "btn_active_orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ADD
      ///
      /// Locales: en, es, English
      static let btn_ChooseAddressIcon_Add = Rswift.StringResource(key: "btn_ChooseAddressIcon_Add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ADD
      ///
      /// Locales: en, es, English
      static let btn_PaymentTypeHeader_Add = Rswift.StringResource(key: "btn_PaymentTypeHeader_Add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ADD DATA
      ///
      /// Locales: en, es
      static let btn_Add_Billing = Rswift.StringResource(key: "btn_Add_Billing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ADD STOP
      ///
      /// Locales: en, es, English
      static let btn_AddressInit_Add_Stop = Rswift.StringResource(key: "btn_AddressInit_Add_Stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ADD TO ORDER
      ///
      /// Locales: en, es
      static let btn_add_order = Rswift.StringResource(key: "btn_add_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ADDRESS
      ///
      /// Locales: en, es
      static let lbl_Ubication_Direction = Rswift.StringResource(key: "lbl_Ubication_Direction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ADDRESS A
      ///
      /// Locales: en, es
      static let address_A = Rswift.StringResource(key: "Address_A", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ADDRESS B
      ///
      /// Locales: en, es
      static let address_B = Rswift.StringResource(key: "Address_B", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ADDRESS C
      ///
      /// Locales: en, es
      static let address_C = Rswift.StringResource(key: "Address_C", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ADDRESS DETAILS
      ///
      /// Locales: en, es, English
      static let lbl_WriteDescription_Address = Rswift.StringResource(key: "lbl_WriteDescription_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: AGREE
      ///
      /// Locales: en, es
      static let btn_Agree = Rswift.StringResource(key: "btn_Agree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ALL BRANCHES
      ///
      /// Locales: en, es
      static let selectSucursalTitleAll = Rswift.StringResource(key: "SelectSucursalTitleAll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ALL SET!
      ///
      /// Locales: en, es, English
      static let lbl_RatingView_Ready = Rswift.StringResource(key: "lbl_RatingView_Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ATTENTION!
      ///
      /// Locales: en, es, English
      static let lbl_Attenting = Rswift.StringResource(key: "lbl_Attenting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Absolute
      ///
      /// Locales: en, es, English
      static let lbl_GLIndexed_Title = Rswift.StringResource(key: "lbl_GLIndexed_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Accept
      ///
      /// Locales: en, es, English
      static let btn_AlertTransport_To_Accept = Rswift.StringResource(key: "btn_AlertTransport_To_Accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Access required
      ///
      /// Locales: en, es, English
      static let accessRequiredTitle = Rswift.StringResource(key: "AccessRequiredTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Access to the camera is required to perform the credit card scan
      ///
      /// Locales: en, es, English
      static let accessToCameraExplanation = Rswift.StringResource(key: "AccessToCameraExplanation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Accredited card!
      ///
      /// Locales: en, es
      static let hp_CashinSucessViewController_Title = Rswift.StringResource(key: "hp_CashinSucessViewController_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Accumulated Cashback
      ///
      /// Locales: en, es
      static let hp_lbl_qr_payment_accumulated_cashback = Rswift.StringResource(key: "hp_lbl_qr_payment_accumulated_cashback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Acrross Kingston city hall
      ///
      /// Locales: en, es
      static let lbl_AddressBook_Example_Point = Rswift.StringResource(key: "lbl_AddressBook_Example_Point", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Action could not be completed, please try again
      ///
      /// Locales: en, es
      static let action_Can_Not_Complete = Rswift.StringResource(key: "Action_Can_Not_Complete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Active Order
      ///
      /// Locales: en, es, English
      static let orderActiveTitle = Rswift.StringResource(key: "OrderActiveTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en, es, English
      static let agregar = Rswift.StringResource(key: "Agregar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add a Card
      ///
      /// Locales: en, es
      static let hp_lbl_home_addcard = Rswift.StringResource(key: "hp_lbl_home_addcard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add a comment (optional)
      ///
      /// Locales: en, es, English
      static let lbl_Add_Comment = Rswift.StringResource(key: "lbl_Add_Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add a comment (optional)
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeGoodRating_Add_Comments = Rswift.StringResource(key: "lbl_FinalizeGoodRating_Add_Comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add a comment (optional)
      ///
      /// Locales: en, es, English
      static let txt_RatingComment_Postive = Rswift.StringResource(key: "txt_RatingComment_Postive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add a comment about the service provided
      ///
      /// Locales: en, es, English
      static let shipmentAddRideComment = Rswift.StringResource(key: "ShipmentAddRideComment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add a note to this product.
      ///
      /// Locales: en, es, English
      static let btn_OptionsQtyCell_Add_Note = Rswift.StringResource(key: "btn_OptionsQtyCell_Add_Note", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add a stop
      ///
      /// Locales: en, es, English
      static let lbl_Alert_Add_Stop = Rswift.StringResource(key: "lbl_Alert_Add_Stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add address
      ///
      /// Locales: en, es, English
      static let lbl_AddressBook_Add_Address = Rswift.StringResource(key: "lbl_AddressBook_Add_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add card
      ///
      /// Locales: en, es
      static let hp_CashinMoneyConfirmation_AddCard = Rswift.StringResource(key: "hp_CashinMoneyConfirmation_AddCard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add card
      ///
      /// Locales: en, es, English
      static let lbl_Add_card = Rswift.StringResource(key: "lbl_Add_card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add card!
      ///
      /// Locales: en, es, English
      static let add_Card = Rswift.StringResource(key: "Add_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add comment (optional)
      ///
      /// Locales: en, es, English
      static let txt_BottomBadRating_Add_Comment = Rswift.StringResource(key: "txt_BottomBadRating_Add_Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add direction instructions
      ///
      /// Locales: en, es, English
      static let shipmentAddSpecialInstructions = Rswift.StringResource(key: "ShipmentAddSpecialInstructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add more destinations, module under construction.
      ///
      /// Locales: en, es
      static let add_More_Destination = Rswift.StringResource(key: "Add_More_Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add note (without onion, extra sauce, etc.)
      ///
      /// Locales: en, es, English
      static let originalNote = Rswift.StringResource(key: "originalNote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add special instructions
      ///
      /// Locales: en, es, English
      static let orderAddSpecialInstructions = Rswift.StringResource(key: "OrderAddSpecialInstructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add stop
      ///
      /// Locales: en, es, English
      static let txt_Search_Add_Stop = Rswift.StringResource(key: "txt_Search_Add_Stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Add una note (required)
      ///
      /// Locales: en, es
      static let hp_full_request_money_note_placeholder = Rswift.StringResource(key: "hp_full_request_money_note_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add your phone number.
      ///
      /// Locales: en, es, English
      static let lbl_AddPhone_Enter_PhoneNumber = Rswift.StringResource(key: "lbl_AddPhone_Enter_PhoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Added order
      ///
      /// Locales: en, es, English
      static let lbl_cell_order_tracking_info_label = Rswift.StringResource(key: "lbl_cell_order_tracking_info_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Additional information
      ///
      /// Locales: en, es, English
      static let lbl_Additional_Info = Rswift.StringResource(key: "lbl_Additional_Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, es
      static let lbl_AddressBook_Address = Rswift.StringResource(key: "lbl_AddressBook_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, es
      static let receipt_configuration_address_title = Rswift.StringResource(key: "receipt_configuration_address_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, es, English
      static let lbl_AddressBook_Address_Nav = Rswift.StringResource(key: "lbl_AddressBook_Address_Nav", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, es, English
      static let lbl_new_billing_address = Rswift.StringResource(key: "lbl_new_billing_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, es, English
      static let txt_new_billing_address_placeholder = Rswift.StringResource(key: "txt_new_billing_address_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Address point A
      ///
      /// Locales: en, es, English
      static let lbl_AddressInit_PointA = Rswift.StringResource(key: "lbl_AddressInit_PointA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Address point B
      ///
      /// Locales: en, es, English
      static let lbl_AddressInit_PointB = Rswift.StringResource(key: "lbl_AddressInit_PointB", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Address point C
      ///
      /// Locales: en, es, English
      static let lbl_AddressInit_PointC = Rswift.StringResource(key: "lbl_AddressInit_PointC", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Agree
      ///
      /// Locales: en, es
      static let btn_done_minimun_ProcessOrder_modal = Rswift.StringResource(key: "btn_done_minimun_ProcessOrder_modal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Agree
      ///
      /// Locales: en, es, English
      static let btn_Onboarding_Agree = Rswift.StringResource(key: "btn_Onboarding_Agree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Alert my family.
      ///
      /// Locales: en, es, English
      static let lbl_EmergencyOn_Alert_Family = Rswift.StringResource(key: "lbl_EmergencyOn_Alert_Family", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: All fields are required
      ///
      /// Locales: en, es, English
      static let allFieldRequired = Rswift.StringResource(key: "AllFieldRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Allow
      ///
      /// Locales: en, es
      static let hp_lbl_account_allow_biometric = Rswift.StringResource(key: "hp_lbl_account_allow_biometric", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Almost there!
      ///
      /// Locales: en, es
      static let lbl_Step3_About_Finish = Rswift.StringResource(key: "lbl_Step3_About_Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Amiability
      ///
      /// Locales: en, es
      static let lbldriverGoodRatings1 = Rswift.StringResource(key: "lbldriverGoodRatings1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, es
      static let hp_CashinTransactionDetailViewController_Amount = Rswift.StringResource(key: "hp_CashinTransactionDetailViewController_Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Amount to be charged
      ///
      /// Locales: en, es
      static let hp_CashInMoneyIncome_Title = Rswift.StringResource(key: "hp_CashInMoneyIncome_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Amount to be charged
      ///
      /// Locales: en, es
      static let hp_CashinMoneyConfirmation_Title = Rswift.StringResource(key: "hp_CashinMoneyConfirmation_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Amount to recharge
      ///
      /// Locales: en, es, English
      static let btn_TopUpMain_How_much_Balance = Rswift.StringResource(key: "btn_TopUpMain_How_much_Balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: An error occurred
      ///
      /// Locales: en, es
      static let lbl_Step2_Erro = Rswift.StringResource(key: "lbl_Step2_Erro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: An error occurred
      ///
      /// Locales: en, es
      static let occur_Error = Rswift.StringResource(key: "Occur_Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: An error occurred while processing your errand
      ///
      /// Locales: en, es, English
      static let shipmentPreviewError = Rswift.StringResource(key: "ShipmentPreviewError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: An unrecognized error occurred, please call customer service
      ///
      /// Locales: en, es, English
      static let ccPaymentGeneralMsg = Rswift.StringResource(key: "CCPaymentGeneralMsg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: And I mean literally anything
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Cell_Tell = Rswift.StringResource(key: "lbl_WhatIsHugo_Cell_Tell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Apparently, this email has already been used. Please enter another email
      ///
      /// Locales: en, es, English
      static let emailNoValidMessage2 = Rswift.StringResource(key: "EmailNoValidMessage2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Applicant commerce
      ///
      /// Locales: en, es
      static let hp_lbl_qr_payment_applicant_commerce = Rswift.StringResource(key: "hp_lbl_qr_payment_applicant_commerce", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Approximate delivery date and time
      ///
      /// Locales: en, es
      static let lbl_sch_detail_date = Rswift.StringResource(key: "lbl_sch_detail_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Are you sure the information in your card is correct?
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmAlert_Card_Detail_Correct = Rswift.StringResource(key: "lbl_ConfirmAlert_Card_Detail_Correct", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Are you sure you don't want to get a similar item in your purchase?
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmSimilar_Similar_Purchase = Rswift.StringResource(key: "lbl_ConfirmSimilar_Similar_Purchase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Are you sure you want to add a stop in your errands? This can affect the current cost.
      ///
      /// Locales: en, es, English
      static let lbl_Alert_Alert = Rswift.StringResource(key: "lbl_Alert_Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Are you sure you want to cancel the errand?
      ///
      /// Locales: en, es, English
      static let cancelShipmentMessage = Rswift.StringResource(key: "CancelShipmentMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Are you sure you want to cancel the order?
      ///
      /// Locales: en, es, English
      static let cancelOrderMessage = Rswift.StringResource(key: "CancelOrderMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Are you sure you want to delete the billing information?
      ///
      /// Locales: en, es, English
      static let deleteBillingMessage = Rswift.StringResource(key: "DeleteBillingMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Are you sure you want to delete this address?
      ///
      /// Locales: en, es, English
      static let deleteAddressMessage = Rswift.StringResource(key: "DeleteAddressMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Are you sure you want to delete this card?
      ///
      /// Locales: en, es, English
      static let deleteCardMessage = Rswift.StringResource(key: "DeleteCardMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en, es, English
      static let closeSessionMessage = Rswift.StringResource(key: "CloseSessionMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Are you sure your $1 number is correct?
      ///
      /// Locales: en, es, English
      static let confirmPhoneMessage = Rswift.StringResource(key: "confirmPhoneMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Ask for help
      ///
      /// Locales: en, es, English
      static let getHelpTitle = Rswift.StringResource(key: "GetHelpTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: At Hugo we are here to help you!  Select one of the options we have available to assist you
      ///
      /// Locales: en, es, English
      static let helpBody = Rswift.StringResource(key: "helpBody", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: At Hugo we are here to help you! Select  one of the following options we can provide you with assistance.
      ///
      /// Locales: en, es
      static let alert_Bottam_help_you = Rswift.StringResource(key: "alert_Bottam_help_you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: At hugo we are willing to help you in the way that seems most convenient for you. Today we offer you a chat from which we can help you in a personalized way.
      ///
      /// Locales: en, es, English
      static let chat_Tutorial = Rswift.StringResource(key: "Chat_Tutorial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: At the moment the card payment option is not available, we are working to solve it as soon as possible, you can choose to make your payment in cash or contact customer service at 2247-8100
      ///
      /// Locales: en, es, English
      static let ccPaymentTimeoutErrorMessage = Rswift.StringResource(key: "CCPaymentTimeoutErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: At the moment there are no vehicles of this category near you, select another category to continue.
      ///
      /// Locales: en, es, English
      static let vehicleNotAvailableDetail = Rswift.StringResource(key: "VehicleNotAvailableDetail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: At the moment we have not been able to assign any Customer Service Agent, we ask that you please try again later.
      ///
      /// Locales: en, es
      static let service_Agent = Rswift.StringResource(key: "Service_Agent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: At the moment you can only have one order in process at a time
      ///
      /// Locales: en, es, English
      static let orderActive = Rswift.StringResource(key: "OrderActive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: At the moment, we could not establish the position of your driver.
      ///
      /// Locales: en, es, English
      static let lbl_LocalNotification_Cant_Guarantee = Rswift.StringResource(key: "lbl_LocalNotification_Cant_Guarantee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: At the time of processing your order to pick up at the branch, you will not be able to change the method of home delivery.
      ///
      /// Locales: en, es
      static let lbl_ProcessOrder_TO_Warning_SubTitle = Rswift.StringResource(key: "lbl_ProcessOrder_TO_Warning_SubTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: At this time the store exclusively accepts orders with a scheduled delivery time and date
      ///
      /// Locales: en, es
      static let lbl_schedule_only_orders_with_program_date = Rswift.StringResource(key: "lbl_schedule_only_orders_with_program_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Attached images
      ///
      /// Locales: en, es, English
      static let btn_ShipmentLocation_Add_Image = Rswift.StringResource(key: "btn_ShipmentLocation_Add_Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Attachment
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentAddress_Attachments = Rswift.StringResource(key: "lbl_ShipmentAddress_Attachments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Attention
      ///
      /// Locales: en, es
      static let lbldriverGoodRatings3 = Rswift.StringResource(key: "lbldriverGoodRatings3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Attention
      ///
      /// Locales: en, es
      static let lblhugoBadRatings1 = Rswift.StringResource(key: "lblhugoBadRatings1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Attention
      ///
      /// Locales: en, es
      static let lblhugoGoodRatings2 = Rswift.StringResource(key: "lblhugoGoodRatings2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Attitude
      ///
      /// Locales: en, es
      static let lbldriverBadRatings1 = Rswift.StringResource(key: "lbldriverBadRatings1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Authenticate yourself with your fingerprint
      ///
      /// Locales: en, es, English
      static let authReason = Rswift.StringResource(key: "authReason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Authentication Error
      ///
      /// Locales: en, es, English
      static let authErrorTitle = Rswift.StringResource(key: "authErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Authentication is required to enter
      ///
      /// Locales: en, es
      static let hp_authentication_is_required = Rswift.StringResource(key: "hp_authentication_is_required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Av. Masferrer, Col. Escalon, San Salvador, El Salvador
      ///
      /// Locales: en, es, English
      static let billing_cell_address = Rswift.StringResource(key: "billing_cell_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Avenida Calle 153, Bogotá…
      ///
      /// Locales: en, es, English
      static let lbl_RideOrderTable_Address_Sub = Rswift.StringResource(key: "lbl_RideOrderTable_Address_Sub", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: BACK TO HOME
      ///
      /// Locales: en, es
      static let hp_CashinSucessViewController_BackToHome = Rswift.StringResource(key: "hp_CashinSucessViewController_BackToHome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: BILLING DETAIL
      ///
      /// Locales: en, es
      static let hp_billing_detail_title = Rswift.StringResource(key: "hp_billing_detail_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: BIRTHDATE
      ///
      /// Locales: en, es, English
      static let lbl_EditUserProfile_Dob = Rswift.StringResource(key: "lbl_EditUserProfile_Dob", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: BRANCH CLOSER TO YOU
      ///
      /// Locales: en, es
      static let selectSucursalTitleNear = Rswift.StringResource(key: "SelectSucursalTitleNear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Bad Product
      ///
      /// Locales: en, es
      static let lblpartnerBadRatings5 = Rswift.StringResource(key: "lblpartnerBadRatings5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Base Currency
      ///
      /// Locales: en, es
      static let hp_base_currency_title = Rswift.StringResource(key: "hp_base_currency_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Before continuing, verify the information on your card. Do you want to continue?
      ///
      /// Locales: en, es, English
      static let confirmSaveMessage = Rswift.StringResource(key: "ConfirmSaveMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Begin with a phone number.
      ///
      /// Locales: en, es, English
      static let lbl_RegisterPhone_StartWithPhone = Rswift.StringResource(key: "lbl_RegisterPhone_StartWithPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Beginning of trip
      ///
      /// Locales: en, es, English
      static let txt_Search_StratTrip = Rswift.StringResource(key: "txt_Search_StratTrip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Behind
      ///
      /// Locales: en, es
      static let behind = Rswift.StringResource(key: "behind", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Beverages
      ///
      /// Locales: en, es, English
      static let lbl_OrderProcess_Drinks = Rswift.StringResource(key: "lbl_OrderProcess_Drinks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Beverages
      ///
      /// Locales: en, es, English
      static let lbl_ProductTable_Drinks = Rswift.StringResource(key: "lbl_ProductTable_Drinks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Billing
      ///
      /// Locales: en, es, English
      static let billing_title = Rswift.StringResource(key: "billing_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Branch office
      ///
      /// Locales: en, es
      static let hp_branch_title = Rswift.StringResource(key: "hp_branch_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Branch to pick up the order
      ///
      /// Locales: en, es
      static let addressTitleTakeOut = Rswift.StringResource(key: "AddressTitleTakeOut", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Branch to withdraw order
      ///
      /// Locales: en, es
      static let lbl_branch_to_pick = Rswift.StringResource(key: "lbl_branch_to_pick", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Building, Office, Floor, Door, Commerce…
      ///
      /// Locales: en, es, English
      static let txt_WriteDescription_Building = Rswift.StringResource(key: "txt_WriteDescription_Building", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: By log in to hugoPay you are agreeing to hugo's  %@ and %@.
      ///
      /// Locales: en, es
      static let hp_lbl_onboarding_terms = Rswift.StringResource(key: "hp_lbl_onboarding_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CALL TO
      ///
      /// Locales: en, es
      static let call_to = Rswift.StringResource(key: "call_to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CAMINITO PLAZA FUTURA
      ///
      /// Locales: en, es, English
      static let lbl_DateRangePicker_Caminito = Rswift.StringResource(key: "lbl_DateRangePicker_Caminito", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, es
      static let alert_OrderSummary_cancel_order_cancel = Rswift.StringResource(key: "alert_OrderSummary_cancel_order_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_remove_product_cancel = Rswift.StringResource(key: "alert_ProcessOrder_remove_product_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, es
      static let btn_sch_detail_cancel = Rswift.StringResource(key: "btn_sch_detail_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static let btn_AlertTransport_Cancel = Rswift.StringResource(key: "btn_AlertTransport_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static let btn_EmergencyOn_Cancel = Rswift.StringResource(key: "btn_EmergencyOn_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static let btn_PickingRide2_Cancel = Rswift.StringResource(key: "btn_PickingRide2_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static let btn_SearchingDriver_Cancel = Rswift.StringResource(key: "btn_SearchingDriver_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static let lbl_Cancel = Rswift.StringResource(key: "lbl_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CANCEL MY ORDER
      ///
      /// Locales: en, es
      static let lbl_sch_detail_cancel_order = Rswift.StringResource(key: "lbl_sch_detail_cancel_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CANCEL ORDER
      ///
      /// Locales: en, es
      static let btn_OrderSummary_cancel_order = Rswift.StringResource(key: "btn_OrderSummary_cancel_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CANCEL TRIP
      ///
      /// Locales: en, es, English
      static let btn_ActionCell_Cancel_Trip = Rswift.StringResource(key: "btn_ActionCell_Cancel_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CANCEL TRIP
      ///
      /// Locales: en, es, English
      static let lbl_Cancel_Trip = Rswift.StringResource(key: "lbl_Cancel_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CARDS
      ///
      /// Locales: en, es, English
      static let cards = Rswift.StringResource(key: "Cards", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CHANGE CARD
      ///
      /// Locales: en, es, English
      static let btn_ShipmentError_Change_Card = Rswift.StringResource(key: "btn_ShipmentError_Change_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CHANGE MY EMAIL
      ///
      /// Locales: en, es, English
      static let btn_ValidateEmail_Change_Email = Rswift.StringResource(key: "btn_ValidateEmail_Change_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CHAT WITH US
      ///
      /// Locales: en, es, English
      static let chat_Us = Rswift.StringResource(key: "Chat_Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CHECK OUT
      ///
      /// Locales: en, es, English
      static let lbl_Checkout = Rswift.StringResource(key: "lbl_Checkout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CHECK YOUR NUMBER
      ///
      /// Locales: en, es
      static let lbl_Step2_Check_Number = Rswift.StringResource(key: "lbl_Step2_Check_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CHECKOUT
      ///
      /// Locales: en, es, English
      static let lbl_CheckoutPayService_Nav = Rswift.StringResource(key: "lbl_CheckoutPayService_Nav", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CLOSE
      ///
      /// Locales: en, es
      static let hp_full_send_money_failure_close_button_title = Rswift.StringResource(key: "hp_full_send_money_failure_close_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CLOSE
      ///
      /// Locales: en, es
      static let hp_full_send_money_success_new_transaction_button_title = Rswift.StringResource(key: "hp_full_send_money_success_new_transaction_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: COLOUR
      ///
      /// Locales: en, es
      static let card_Colour_Title = Rswift.StringResource(key: "Card_Colour_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: COMING SOON!
      ///
      /// Locales: en, es, English
      static let btn_CustomPage_Sample_SoonInHugo = Rswift.StringResource(key: "btn_CustomPage_Sample_SoonInHugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: COMPLETE NAME
      ///
      /// Locales: en, es, English
      static let lbl_AddUserInfo_FullName = Rswift.StringResource(key: "lbl_AddUserInfo_FullName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: COMPLETE NAME
      ///
      /// Locales: en, es, English
      static let lbl_EditUserProfile_Full_Name = Rswift.StringResource(key: "lbl_EditUserProfile_Full_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: COMPLETE PROFILE
      ///
      /// Locales: en, es, English
      static let completed_Profile = Rswift.StringResource(key: "Completed_Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CONFIRM
      ///
      /// Locales: en, es
      static let hp_CashinMoneyConfirmation_ConfirmButton = Rswift.StringResource(key: "hp_CashinMoneyConfirmation_ConfirmButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CONFIRM
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_confirm_button = Rswift.StringResource(key: "hp_full_reset_pin_confirm_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CONFIRM
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_validate_button = Rswift.StringResource(key: "hp_full_reset_pin_validate_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CONFIRM
      ///
      /// Locales: en, es
      static let hp_temporal_code_confirm = Rswift.StringResource(key: "hp_temporal_code_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CONTACT AN AGENT
      ///
      /// Locales: en, es
      static let lbl_Step1_Agent = Rswift.StringResource(key: "lbl_Step1_Agent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CONTACT AN AGENT
      ///
      /// Locales: en, es
      static let lbl_Step2_Agent = Rswift.StringResource(key: "lbl_Step2_Agent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CONTINUE
      ///
      /// Locales: en, es
      static let alert_OrderSummary_cancel_order_continue = Rswift.StringResource(key: "alert_OrderSummary_cancel_order_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CONTINUE
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_remove_product_continue = Rswift.StringResource(key: "alert_ProcessOrder_remove_product_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CONTINUE
      ///
      /// Locales: en, es
      static let lbl_Continue = Rswift.StringResource(key: "lbl_Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CONTINUE
      ///
      /// Locales: en, es, English
      static let btn_AlertTransport_Continue = Rswift.StringResource(key: "btn_AlertTransport_Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CONTINUE
      ///
      /// Locales: en, es, English
      static let btn_FinalizeRide_Continue = Rswift.StringResource(key: "btn_FinalizeRide_Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CONTINUE
      ///
      /// Locales: en, es, English
      static let btn_RatingCell_Continue = Rswift.StringResource(key: "btn_RatingCell_Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: COURSE
      ///
      /// Locales: en, es, English
      static let lbl_RouteNav_Journey = Rswift.StringResource(key: "lbl_RouteNav_Journey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CREATE
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhone_Create = Rswift.StringResource(key: "lbl_StartedPhone_Create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CREATE ACCOUNT
      ///
      /// Locales: en, es
      static let alert_chat_button_title = Rswift.StringResource(key: "alert_chat_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CREATE ACCOUNT
      ///
      /// Locales: en, es
      static let lbl_NewLogin_Create_Account = Rswift.StringResource(key: "lbl_NewLogin_Create_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CREDITS
      ///
      /// Locales: en, es, English
      static let lbl_StatusProfile_Credits = Rswift.StringResource(key: "lbl_StatusProfile_Credits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: CVC
      ///
      /// Locales: en, es, English
      static let cvcCardInfoTitle = Rswift.StringResource(key: "CVCCardInfoTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Call
      ///
      /// Locales: en, es, English
      static let btn_call_driver = Rswift.StringResource(key: "btn_call_driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Call driver
      ///
      /// Locales: en, es, English
      static let callTitlePicking = Rswift.StringResource(key: "CallTitlePicking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Call on the way
      ///
      /// Locales: en, es
      static let lbl_Step2_Call_On_Way = Rswift.StringResource(key: "lbl_Step2_Call_On_Way", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Camera permissions
      ///
      /// Locales: en, es
      static let camera_Permission = Rswift.StringResource(key: "Camera_Permission", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Camera permissions are not enabled, enter your device options to enable it
      ///
      /// Locales: en, es
      static let camera_Permission_Not_Avable = Rswift.StringResource(key: "Camera_Permission_Not_Avable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, English
      static let lbl_RideSummary_Cancel = Rswift.StringResource(key: "lbl_RideSummary_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_cancel = Rswift.StringResource(key: "hp_lbl_transaction_filter_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es, English
      static let btn_DateRangePicker_Cancel = Rswift.StringResource(key: "btn_DateRangePicker_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es, English
      static let cancelLabel = Rswift.StringResource(key: "CancelLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es, English
      static let lbl_SearchAddressShipment_Cancel = Rswift.StringResource(key: "lbl_SearchAddressShipment_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cancel Order
      ///
      /// Locales: en, es
      static let alert_OrderSummary_cancel_order_title = Rswift.StringResource(key: "alert_OrderSummary_cancel_order_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel errand
      ///
      /// Locales: en, es, English
      static let cancelShipmentTitle = Rswift.StringResource(key: "CancelShipmentTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cancel order
      ///
      /// Locales: en, es, English
      static let btn_CancelOrder = Rswift.StringResource(key: "btn_CancelOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cancel order
      ///
      /// Locales: en, es, English
      static let btn_TotalTable_Cancel = Rswift.StringResource(key: "btn_TotalTable_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cancel order
      ///
      /// Locales: en, es, English
      static let lbl_ServiceSelection_Cancel = Rswift.StringResource(key: "lbl_ServiceSelection_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Card not available
      ///
      /// Locales: en, es, English
      static let carNotAvailableTitle = Rswift.StringResource(key: "CarNotAvailableTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Card not supported
      ///
      /// Locales: en, es, English
      static let card_Not_Support = Rswift.StringResource(key: "Card_Not_Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Card number
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmAlert_Card_Number = Rswift.StringResource(key: "lbl_ConfirmAlert_Card_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Card number must contain 16 digits
      ///
      /// Locales: en, es, English
      static let numCardLength = Rswift.StringResource(key: "NumCardLength", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Card number required
      ///
      /// Locales: en, es, English
      static let numCardRequired = Rswift.StringResource(key: "NumCardRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Card personalization
      ///
      /// Locales: en, es
      static let card_Customization = Rswift.StringResource(key: "Card_Customization", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Card saved successfully
      ///
      /// Locales: en, es, English
      static let cardSavedSuccessTitle = Rswift.StringResource(key: "CardSavedSuccessTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Card type
      ///
      /// Locales: en, es, English
      static let cardTypeTitle = Rswift.StringResource(key: "CardTypeTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Card type
      ///
      /// Locales: en, es, English
      static let ccTypeRequiredWarningTitle = Rswift.StringResource(key: "CCTypeRequiredWarningTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Casa #45, Puerta Trasera
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentAddress_House = Rswift.StringResource(key: "lbl_ShipmentAddress_House", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cash
      ///
      /// Locales: en, es, English
      static let lbl_Cash = Rswift.StringResource(key: "lbl_Cash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cashback
      ///
      /// Locales: en, es
      static let hp_cashback_title = Rswift.StringResource(key: "hp_cashback_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cashback
      ///
      /// Locales: en, es
      static let user_cash = Rswift.StringResource(key: "user_cash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Category
      ///
      /// Locales: en, es
      static let lbl_Title_Type_Category = Rswift.StringResource(key: "lbl_Title_Type_Category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Ceviche - Seafood
      ///
      /// Locales: en, es, English
      static let lbl_PartnerFeedTable_Ceviche = Rswift.StringResource(key: "lbl_PartnerFeedTable_Ceviche", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, es, English
      static let change_Password = Rswift.StringResource(key: "Change_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Change the phone number linked to my profile.
      ///
      /// Locales: en, es, English
      static let lbl_PreferencesSubtitle_Change_Number = Rswift.StringResource(key: "lbl_PreferencesSubtitle_Change_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Change your plans? No worries - you can cancel without a charge.
      ///
      /// Locales: en, es
      static let cancel_free_Charge = Rswift.StringResource(key: "Cancel_free_Charge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Charge for delivery
      ///
      /// Locales: en, es, English
      static let lbl_TotalTable_Delivery_Charge = Rswift.StringResource(key: "lbl_TotalTable_Delivery_Charge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Charge for service
      ///
      /// Locales: en, es, English
      static let lbl_TotalTable_Food_Service_Charge = Rswift.StringResource(key: "lbl_TotalTable_Food_Service_Charge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Charge to:
      ///
      /// Locales: en, es, English
      static let lbl_DriverTip_Charge_To = Rswift.StringResource(key: "lbl_DriverTip_Charge_To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Chat with an agent
      ///
      /// Locales: en, es, English
      static let chat_Agent = Rswift.StringResource(key: "Chat_Agent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Chat with us!
      ///
      /// Locales: en, es, English
      static let btn_Boarding_Chat_Us = Rswift.StringResource(key: "btn_Boarding_Chat_Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Check it out and try again
      ///
      /// Locales: en, es
      static let lbl_Step2_Check_Out_Try = Rswift.StringResource(key: "lbl_Step2_Check_Out_Try", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Check your mobile
      ///
      /// Locales: en, es, English
      static let verifiedMobileTitle = Rswift.StringResource(key: "VerifiedMobileTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Choose one of the available territories in your   country to show you the shops
      ///
      /// Locales: en, es
      static let lbl_Territory_Choose_Country = Rswift.StringResource(key: "lbl_Territory_Choose_Country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Choose one of the countries where we count with service
      ///
      /// Locales: en, es
      static let lbl_Country = Rswift.StringResource(key: "lbl_Country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Choose recovery method
      ///
      /// Locales: en, es
      static let hp_title_recovery_method = Rswift.StringResource(key: "hp_title_recovery_method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Choose the medium where you would like to receive the code to validate your identity.
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_options_subtitle = Rswift.StringResource(key: "hp_full_reset_pin_options_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Choose the network
      ///
      /// Locales: en, es, English
      static let btn_TopUpMain_Choose_Operator = Rswift.StringResource(key: "btn_TopUpMain_Choose_Operator", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Choose your arrival point!
      ///
      /// Locales: en, es, English
      static let lbl_Arrival_Point = Rswift.StringResource(key: "lbl_Arrival_Point", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: City
      ///
      /// Locales: en, es
      static let lbl_AddressBook_City = Rswift.StringResource(key: "lbl_AddressBook_City", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Clean
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_CleanButton = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_CleanButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Clean
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_clean = Rswift.StringResource(key: "hp_lbl_transaction_filter_clean", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, es, English
      static let btn_LocalNotification_To_Close = Rswift.StringResource(key: "btn_LocalNotification_To_Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Closed
      ///
      /// Locales: en, es, English
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Closed
      ///
      /// Locales: en, es, English
      static let lbl_PartnerTable_Close = Rswift.StringResource(key: "lbl_PartnerTable_Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Closed ☹️
      ///
      /// Locales: en, es, English
      static let closeTitle = Rswift.StringResource(key: "CloseTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Code
      ///
      /// Locales: en, es, English
      static let code = Rswift.StringResource(key: "Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Code can take up to %d seconds to arrive
      ///
      /// Locales: en, es
      static let lbl_Step2_Code_Send_Arrive = Rswift.StringResource(key: "lbl_Step2_Code_Send_Arrive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Code not found
      ///
      /// Locales: en, es
      static let code_Not_Found = Rswift.StringResource(key: "Code_Not_Found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Coffee Gourmet
      ///
      /// Locales: en, es, English
      static let lbl_PartnerProduct_Café_Gourmet = Rswift.StringResource(key: "lbl_PartnerProduct_Café_Gourmet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cold Product
      ///
      /// Locales: en, es
      static let lblhugoBadRatings5 = Rswift.StringResource(key: "lblhugoBadRatings5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Collect funds from:
      ///
      /// Locales: en, es
      static let hp_CashinMoneyConfirmation_MoneySource = Rswift.StringResource(key: "hp_CashinMoneyConfirmation_MoneySource", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Colonia Maquilishuat, San Salvador
      ///
      /// Locales: en, es, English
      static let lbl_SearchNewAddress_Sub_Address = Rswift.StringResource(key: "lbl_SearchNewAddress_Sub_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Coming soon
      ///
      /// Locales: en, es, English
      static let soon = Rswift.StringResource(key: "Soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Coming soon 😁
      ///
      /// Locales: en, es, English
      static let cominSoonTitle = Rswift.StringResource(key: "CominSoonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Comment (optional)
      ///
      /// Locales: en, es, English
      static let lbl_Comment_Optional = Rswift.StringResource(key: "lbl_Comment_Optional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Comment (optional)
      ///
      /// Locales: en, es, English
      static let txt_RatingComment_Comment = Rswift.StringResource(key: "txt_RatingComment_Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Commentary
      ///
      /// Locales: en, es
      static let lbl_FinalizeBadRating_Improve_Comment = Rswift.StringResource(key: "lbl_FinalizeBadRating_Improve_Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Commerce
      ///
      /// Locales: en, es
      static let hp_commerce_title = Rswift.StringResource(key: "hp_commerce_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Commerce
      ///
      /// Locales: en, es
      static let lbl_Title_Type_Commerce = Rswift.StringResource(key: "lbl_Title_Type_Commerce", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Complete name.
      ///
      /// Locales: en, es, English
      static let txt_EditUserProfile_Full_Name = Rswift.StringResource(key: "txt_EditUserProfile_Full_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Complete your data.
      ///
      /// Locales: en, es, English
      static let lbl_ChooseAddressIcon_Fill_Details = Rswift.StringResource(key: "lbl_ChooseAddressIcon_Fill_Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Conditions
      ///
      /// Locales: en, es
      static let hp_lbl_onboarding_conditions_word = Rswift.StringResource(key: "hp_lbl_onboarding_conditions_word", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, es
      static let btn_ConfirmCancelRide_Confirm = Rswift.StringResource(key: "btn_ConfirmCancelRide_Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, es, English
      static let btn_ListView_Confirm = Rswift.StringResource(key: "btn_ListView_Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, es, English
      static let confirmAddressOK = Rswift.StringResource(key: "ConfirmAddressOK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, es, English
      static let lbl_CorrectNumber_Phone = Rswift.StringResource(key: "lbl_CorrectNumber_Phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirm PIN.
      ///
      /// Locales: en, es
      static let hp_temporal_code_confirm_pin = Rswift.StringResource(key: "hp_temporal_code_confirm_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Confirm Passcode
      ///
      /// Locales: en, es
      static let hp_lbl_account_confirmpin = Rswift.StringResource(key: "hp_lbl_account_confirmpin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Confirm information
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmAlert_Confirm_Data = Rswift.StringResource(key: "lbl_ConfirmAlert_Confirm_Data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirm where we will start!
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmationBottom_Confirm_Start = Rswift.StringResource(key: "lbl_ConfirmationBottom_Confirm_Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirm your PIN
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_newpin_confirmation_subtitle = Rswift.StringResource(key: "hp_full_reset_pin_newpin_confirmation_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Confirm your address
      ///
      /// Locales: en, es, English
      static let confirmAddressTitle = Rswift.StringResource(key: "ConfirmAddressTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirm your current location!
      ///
      /// Locales: en, English
      static let lbl_Search_GpsLocation = Rswift.StringResource(key: "lbl_Search_GpsLocation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Confirm your location!
      ///
      /// Locales: en, es, English
      static let lbl_Confirm_Location = Rswift.StringResource(key: "lbl_Confirm_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirm your location!
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmationBottom_Confirm_Location = Rswift.StringResource(key: "lbl_ConfirmationBottom_Confirm_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirm your order again!
      ///
      /// Locales: en, es
      static let sucursalChangeAlertTitle = Rswift.StringResource(key: "SucursalChangeAlertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Confirmar número
      ///
      /// Locales: en, es, English
      static let confirmPhoneTitle = Rswift.StringResource(key: "confirmPhoneTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirmation
      ///
      /// Locales: en, es
      static let lblTitleConfirmCancelOrder = Rswift.StringResource(key: "lblTitleConfirmCancelOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static let callSubTitleOnWay = Rswift.StringResource(key: "CallSubTitleOnWay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static let callSubTitlePicking = Rswift.StringResource(key: "CallSubTitlePicking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static let cancelRideSubTitleOnWay = Rswift.StringResource(key: "CancelRideSubTitleOnWay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static let cancelRideSubTitlePicking = Rswift.StringResource(key: "CancelRideSubTitlePicking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static let confirmSaveTitle = Rswift.StringResource(key: "ConfirmSaveTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Congratulations you have new prizes!
      ///
      /// Locales: en, es, English
      static let youHaveNewPrizesTitle = Rswift.StringResource(key: "YouHaveNewPrizesTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, es, English
      static let btn_OrderRedeem_Continue = Rswift.StringResource(key: "btn_OrderRedeem_Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, es, English
      static let confirmLabel = Rswift.StringResource(key: "ConfirmLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, es, English
      static let stayOnApp = Rswift.StringResource(key: "StayOnApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cost of service
      ///
      /// Locales: en, es
      static let lbl_costMessage = Rswift.StringResource(key: "lbl_costMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cost per shipment
      ///
      /// Locales: en, es, English
      static let lbl_Sort_Cost = Rswift.StringResource(key: "lbl_Sort_Cost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Could not save billing information
      ///
      /// Locales: en, es, English
      static let cloud_Not_save = Rswift.StringResource(key: "Cloud_Not_save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Count on me   for anything you need.
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Cell_CountMe = Rswift.StringResource(key: "lbl_WhatIsHugo_Cell_CountMe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Create Account
      ///
      /// Locales: en, es
      static let create_Account_Small = Rswift.StringResource(key: "Create_Account_Small", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Create Account
      ///
      /// Locales: en, es
      static let hp_lbl_onboarding_create_account = Rswift.StringResource(key: "hp_lbl_onboarding_create_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Create a 4 digit Passcode.
      ///
      /// Locales: en, es
      static let hp_lbl_account_createpin = Rswift.StringResource(key: "hp_lbl_account_createpin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Create your account.
      ///
      /// Locales: en, es, English
      static let lbl_RegisterPhone_Create_Account = Rswift.StringResource(key: "lbl_RegisterPhone_Create_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Create your password.
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_Password_Text = Rswift.StringResource(key: "lbl_CreateFBPassword_Password_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Credit card
      ///
      /// Locales: en, es, English
      static let ccLabel = Rswift.StringResource(key: "CCLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Credit cards
      ///
      /// Locales: en, es, English
      static let lbl_creditcard_title = Rswift.StringResource(key: "lbl_creditcard_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Credits hugo
      ///
      /// Locales: en, es
      static let lbl_Credits = Rswift.StringResource(key: "lbl_Credits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Credits usable within hugoapp in any of our services.
      ///
      /// Locales: en, es
      static let lbl_Credits_Subtitle = Rswift.StringResource(key: "lbl_Credits_Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cumbre Palo Alto
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentAddress_Summit = Rswift.StringResource(key: "lbl_ShipmentAddress_Summit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Current invoice
      ///
      /// Locales: en, es, English
      static let lbl_Current_Invoice = Rswift.StringResource(key: "lbl_Current_Invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Current location
      ///
      /// Locales: en, es, English
      static let lbl_RouteNav_Current_Location = Rswift.StringResource(key: "lbl_RouteNav_Current_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Current location
      ///
      /// Locales: en, es, English
      static let lbl_UserLocation_Location = Rswift.StringResource(key: "lbl_UserLocation_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Currently we only support VISA and MASTERCARD
      ///
      /// Locales: en, es, English
      static let ccTypeRequiredWarningMessage = Rswift.StringResource(key: "CCTypeRequiredWarningMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Cédula
      ///
      /// Locales: en, es
      static let receipt_configuration_document_title_yummy = Rswift.StringResource(key: "receipt_configuration_document_title_yummy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DATE AND TIME (APPROX.)
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentCheckout_Date = Rswift.StringResource(key: "lbl_ShipmentCheckout_Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DATE AND TIME OF DELIVERY (APPROX.)
      ///
      /// Locales: en, es, English
      static let lbl_Date_Time_Delivery = Rswift.StringResource(key: "lbl_Date_Time_Delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DELETE
      ///
      /// Locales: en, es
      static let receipt_list_delete_action_title = Rswift.StringResource(key: "receipt_list_delete_action_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DELIVERY FEE
      ///
      /// Locales: en, es, English
      static let lbl_PartnerProduct_Minimum = Rswift.StringResource(key: "lbl_PartnerProduct_Minimum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DELIVERY INDICATIONS
      ///
      /// Locales: en, es, English
      static let lbl_Shipping_Indication = Rswift.StringResource(key: "lbl_Shipping_Indication", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DELIVERY INDICATIONS
      ///
      /// Locales: en, es, English
      static let lbl_Shipping_Indications = Rswift.StringResource(key: "lbl_Shipping_Indications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DELIVERY METHOD
      ///
      /// Locales: en, es
      static let lbl_ProcessOrder_Delivery_Type = Rswift.StringResource(key: "lbl_ProcessOrder_Delivery_Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DEPARTURE
      ///
      /// Locales: en, es, English
      static let lbl_Match = Rswift.StringResource(key: "lbl_Match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DEPARTURE
      ///
      /// Locales: en, es, English
      static let lbl_RouteOutstanding_Match = Rswift.StringResource(key: "lbl_RouteOutstanding_Match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DESTINY
      ///
      /// Locales: en, es, English
      static let lbl_Destination = Rswift.StringResource(key: "lbl_Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DETAIL
      ///
      /// Locales: en, es
      static let details_Text = Rswift.StringResource(key: "Details_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DETAIL
      ///
      /// Locales: en, es
      static let hp_CashinTransactionDetailViewController_Detail = Rswift.StringResource(key: "hp_CashinTransactionDetailViewController_Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DETAIL
      ///
      /// Locales: en, es
      static let hp_transaction_detail_title = Rswift.StringResource(key: "hp_transaction_detail_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DETAIL OF TRANSACTION
      ///
      /// Locales: en, es
      static let hp_transaction_detail_navigation_title = Rswift.StringResource(key: "hp_transaction_detail_navigation_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DISTANCE
      ///
      /// Locales: en, es, English
      static let lbl_AddressInit_Distance = Rswift.StringResource(key: "lbl_AddressInit_Distance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DO NOT REWARD THIS TIME
      ///
      /// Locales: en, es, English
      static let btn_FinalizeGoodRating_Not_Reward = Rswift.StringResource(key: "btn_FinalizeGoodRating_Not_Reward", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DOMINGO 22 DE ENERO / 7PM
      ///
      /// Locales: en, es, English
      static let lbl_DateRangePicker_Months = Rswift.StringResource(key: "lbl_DateRangePicker_Months", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: DONE!
      ///
      /// Locales: en, es, English
      static let btn_RangeSlider_Done = Rswift.StringResource(key: "btn_RangeSlider_Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Daily Expense
      ///
      /// Locales: en, es
      static let hp_lbl_expense_dailystring = Rswift.StringResource(key: "hp_lbl_expense_dailystring", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Data required
      ///
      /// Locales: en, es, English
      static let requiredFields = Rswift.StringResource(key: "RequiredFields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Date & time
      ///
      /// Locales: en, es
      static let hp_CashinTransactionDetailViewController_Datetime = Rswift.StringResource(key: "hp_CashinTransactionDetailViewController_Datetime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Date and Time
      ///
      /// Locales: en, es
      static let hp_datetime_title = Rswift.StringResource(key: "hp_datetime_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Date of birth
      ///
      /// Locales: en, es, English
      static let lbl_BasicInfo_dob = Rswift.StringResource(key: "lbl_BasicInfo_dob", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Date transaction
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_date = Rswift.StringResource(key: "hp_lbl_transaction_filter_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Debit to card
      ///
      /// Locales: en, es
      static let hp_debit_card_title = Rswift.StringResource(key: "hp_debit_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Debited card
      ///
      /// Locales: en, es
      static let hp_CashinTransactionDetailViewController_MoneySource = Rswift.StringResource(key: "hp_CashinTransactionDetailViewController_MoneySource", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Define delivery date and time
      ///
      /// Locales: en, es
      static let lbl_sch_selectdate = Rswift.StringResource(key: "lbl_sch_selectdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delayed payments
      ///
      /// Locales: en, es, English
      static let lbl_Late_Payments = Rswift.StringResource(key: "lbl_Late_Payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Delete Card
      ///
      /// Locales: en, es
      static let lbl_DeleteCardTitle = Rswift.StringResource(key: "lbl_DeleteCardTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delete Card
      ///
      /// Locales: en, es, English
      static let deleteCardTitle = Rswift.StringResource(key: "DeleteCardTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Delete address
      ///
      /// Locales: en, es, English
      static let deleteAddressTitle = Rswift.StringResource(key: "DeleteAddressTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Delete information
      ///
      /// Locales: en, es, English
      static let deleteBillingTitle = Rswift.StringResource(key: "DeleteBillingTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Delivery
      ///
      /// Locales: en, es
      static let partner_header_delivery_title = Rswift.StringResource(key: "partner_header_delivery_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delivery Address
      ///
      /// Locales: en, es, English
      static let addressTitle = Rswift.StringResource(key: "AddressTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Delivery Address
      ///
      /// Locales: en, es, English
      static let locationChangedTitle = Rswift.StringResource(key: "LocationChangedTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Delivery Time
      ///
      /// Locales: en, es
      static let lbldriverBadRatings5 = Rswift.StringResource(key: "lbldriverBadRatings5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delivery Time
      ///
      /// Locales: en, es
      static let lblhugoBadRatings6 = Rswift.StringResource(key: "lblhugoBadRatings6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delivery address
      ///
      /// Locales: en, es
      static let lbl_sch_detail_address = Rswift.StringResource(key: "lbl_sch_detail_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delivery date and time
      ///
      /// Locales: en, es
      static let lbl_sch_schedule_sublabel = Rswift.StringResource(key: "lbl_sch_schedule_sublabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delivery fee __deliveryCostLabel__
      ///
      /// Locales: en, es
      static let lblDeliveryCost = Rswift.StringResource(key: "lblDeliveryCost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delivery instructions (e.g. ring the bell)
      ///
      /// Locales: en, es, English
      static let lbl_ProcessOrder_Instruction = Rswift.StringResource(key: "lbl_ProcessOrder_Instruction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Delivery method:
      ///
      /// Locales: en, es
      static let lbl_Sort_Delivery = Rswift.StringResource(key: "lbl_Sort_Delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delivery place (C)
      ///
      /// Locales: en, es, English
      static let lbl_PaymentLocation_Place_Delivery = Rswift.StringResource(key: "lbl_PaymentLocation_Place_Delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Delivery time
      ///
      /// Locales: en, es, English
      static let lbl_Sort_DeliverTime = Rswift.StringResource(key: "lbl_Sort_DeliverTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Demand your invoice
      ///
      /// Locales: en, es
      static let lbl_ProcessOrder_Demand_Invoice = Rswift.StringResource(key: "lbl_ProcessOrder_Demand_Invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Demand your invoice
      ///
      /// Locales: en, es
      static let lbl_Shipment_Invoice = Rswift.StringResource(key: "lbl_Shipment_Invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en, es, English
      static let lbl_ChooseAddressIcon_Descripation = Rswift.StringResource(key: "lbl_ChooseAddressIcon_Descripation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentAddress_Description = Rswift.StringResource(key: "lbl_ShipmentAddress_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Destination out of coverage
      ///
      /// Locales: en, es, English
      static let hotZoneTitle = Rswift.StringResource(key: "HotZoneTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Destiny 10
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeRideNew_Destination = Rswift.StringResource(key: "lbl_FinalizeRideNew_Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Destiny place
      ///
      /// Locales: en, es, English
      static let lbl_SearchAddressShipment_Destination = Rswift.StringResource(key: "lbl_SearchAddressShipment_Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Detail ($0.50)
      ///
      /// Locales: en, es, English
      static let lbl_OrderSummary_Product_Details = Rswift.StringResource(key: "lbl_OrderSummary_Product_Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Detalle ($0.50)
      ///
      /// Locales: en, es, English
      static let lbl_ProductDetail_Des = Rswift.StringResource(key: "lbl_ProductDetail_Des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Detalle de tu envío
      ///
      /// Locales: en, es, English
      static let lbl_Details_Of_Shipment = Rswift.StringResource(key: "lbl_Details_Of_Shipment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Did you forget your password?
      ///
      /// Locales: en, es
      static let btn_ChanelRecover_Forgot = Rswift.StringResource(key: "btn_ChanelRecover_Forgot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Discard order!
      ///
      /// Locales: en, es
      static let lbl_Process_Order_Discard = Rswift.StringResource(key: "lbl_Process_Order_Discard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Do you have any positive comment for
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeGoodRating_Postive_Comments = Rswift.StringResource(key: "lbl_FinalizeGoodRating_Postive_Comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Do you have any positive comment for
      ///
      /// Locales: en, es, English
      static let lbl_RatingComment_Postive = Rswift.StringResource(key: "lbl_RatingComment_Postive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Do you need an invoice?
      ///
      /// Locales: en, es, English
      static let lbl_Need_Invoice = Rswift.StringResource(key: "lbl_Need_Invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Do you need an invoice?
      ///
      /// Locales: en, es, English
      static let lbl_ProcessOrder_Need_Invoice = Rswift.StringResource(key: "lbl_ProcessOrder_Need_Invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Do you need change for?
      ///
      /// Locales: en, es, English
      static let needChangeMessage = Rswift.StringResource(key: "NeedChangeMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Do you need change?
      ///
      /// Locales: en, es
      static let lbl_need_change_ProcessOrder_modal = Rswift.StringResource(key: "lbl_need_change_ProcessOrder_modal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Do you want to add a new address?
      ///
      /// Locales: en, es, English
      static let locationChangedAddQuestion = Rswift.StringResource(key: "LocationChangedAddQuestion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Do you want to cancel your order?
      ///
      /// Locales: en, es
      static let alert_OrderSummary_cancel_order_message = Rswift.StringResource(key: "alert_OrderSummary_cancel_order_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Do you want to continue?
      ///
      /// Locales: en, es
      static let lblQuestionConfirmCancelOrder = Rswift.StringResource(key: "lblQuestionConfirmCancelOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Do you want to remove this product from your order?
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_eemove_product_subtitle = Rswift.StringResource(key: "alert_ProcessOrder_eemove_product_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Do you want to select an address?
      ///
      /// Locales: en, es, English
      static let locationChangedSelectQuestion = Rswift.StringResource(key: "LocationChangedSelectQuestion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Do you want to use the points of your card in this order?
      ///
      /// Locales: en, es, English
      static let lbl_RedeemSwitch_Card_Point = Rswift.StringResource(key: "lbl_RedeemSwitch_Card_Point", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Do you wish to continue?
      ///
      /// Locales: en, es, English
      static let lbl_VerifyCreateAddres_Alert = Rswift.StringResource(key: "lbl_VerifyCreateAddres_Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Don't use any prize
      ///
      /// Locales: en, es, English
      static let lbl_Promos_Dont_Use_AnyPrice = Rswift.StringResource(key: "lbl_Promos_Dont_Use_AnyPrice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Don't worry! Choose the medium where you would like to receive the code to validate your identity.
      ///
      /// Locales: en, es
      static let btn_ChanelRecover_Validate_Identifier = Rswift.StringResource(key: "btn_ChanelRecover_Validate_Identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es
      static let btn_done_ProcessOrder_modal = Rswift.StringResource(key: "btn_done_ProcessOrder_modal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_done = Rswift.StringResource(key: "hp_lbl_transaction_filter_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es, English
      static let btn_DateRangePicker_Finalize = Rswift.StringResource(key: "btn_DateRangePicker_Finalize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es, English
      static let btn_RatingView_Order_Status = Rswift.StringResource(key: "btn_RatingView_Order_Status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Dynamic rate applies
      ///
      /// Locales: en, es, English
      static let lbl_RangeSlider_Dynamic = Rswift.StringResource(key: "lbl_RangeSlider_Dynamic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: E.G. He will knock on the door and ask for Juan…
      ///
      /// Locales: en, es, English
      static let lbl_Knock_Door = Rswift.StringResource(key: "lbl_Knock_Door", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: EDIT
      ///
      /// Locales: en, es
      static let receipt_list_edit_action_title = Rswift.StringResource(key: "receipt_list_edit_action_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: EDIT
      ///
      /// Locales: en, es, English
      static let lbl_AddPhone_Edit_Title = Rswift.StringResource(key: "lbl_AddPhone_Edit_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: EDIT ROUTE
      ///
      /// Locales: en, es
      static let search_Title_Edit_Route = Rswift.StringResource(key: "Search_Title_Edit_Route", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: EJ. hugoapp@domain.com
      ///
      /// Locales: en, es, English
      static let txt_EmailInfo_email = Rswift.StringResource(key: "txt_EmailInfo_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: EMAIL
      ///
      /// Locales: en, es, English
      static let lbl_AddUserInfo_Email = Rswift.StringResource(key: "lbl_AddUserInfo_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: EMAIL
      ///
      /// Locales: en, es, English
      static let lbl_EditUserProfile_Email = Rswift.StringResource(key: "lbl_EditUserProfile_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: EMERGENCIES
      ///
      /// Locales: en, es, English
      static let lbl_EmergencyOn_Emergencias = Rswift.StringResource(key: "lbl_EmergencyOn_Emergencias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: END
      ///
      /// Locales: en, es, English
      static let lbl_End = Rswift.StringResource(key: "lbl_End", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ENTER ANOTHER NUMBER
      ///
      /// Locales: en, es
      static let btn_Enter_Another = Rswift.StringResource(key: "btn_Enter_Another", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ENTER ANOTHER NUMBER.
      ///
      /// Locales: en, es, English
      static let btn_TopUpMain_Anothet_Number = Rswift.StringResource(key: "btn_TopUpMain_Anothet_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ENTER HUGO
      ///
      /// Locales: en, es
      static let lbl_SignUpFinalize_Enter_Hugo = Rswift.StringResource(key: "lbl_SignUpFinalize_Enter_Hugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ENTER YOUR DATA
      ///
      /// Locales: en, es
      static let lbl_Step3_Enter_Data = Rswift.StringResource(key: "lbl_Step3_Enter_Data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ENTER YOUR NUMBER
      ///
      /// Locales: en, es
      static let lbl_Step1_Enter_Number = Rswift.StringResource(key: "lbl_Step1_Enter_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ENTER YUMMY
      ///
      /// Locales: en, es
      static let lbl_SignUpFinalize_Enter_Yummy = Rswift.StringResource(key: "lbl_SignUpFinalize_Enter_Yummy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ERRAND
      ///
      /// Locales: en
      static let pastOrders_TypeErrands = Rswift.StringResource(key: "PastOrders_TypeErrands", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ERRANDS
      ///
      /// Locales: en, es, English
      static let lbl_Mandaditos = Rswift.StringResource(key: "lbl_Mandaditos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ESTIMATED COST
      ///
      /// Locales: en, es, English
      static let lbl_AddressInit_Esitimated_Cost = Rswift.StringResource(key: "lbl_AddressInit_Esitimated_Cost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ESTIMATED DELIVERY TIME
      ///
      /// Locales: en, es, English
      static let lbl_order_estimate_time_for_delivery = Rswift.StringResource(key: "lbl_order_estimate_time_for_delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ETA: 12:45 PM
      ///
      /// Locales: en, es, English
      static let lbl_RideOrderTable_Time = Rswift.StringResource(key: "lbl_RideOrderTable_Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: EV- 93482342934
      ///
      /// Locales: en, es, English
      static let lbl_EntertainmentOrder_Ev = Rswift.StringResource(key: "lbl_EntertainmentOrder_Ev", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Early Delivery
      ///
      /// Locales: en, es
      static let lbldriverGoodRatings5 = Rswift.StringResource(key: "lbldriverGoodRatings5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, es, English
      static let actionEditLabel = Rswift.StringResource(key: "ActionEditLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, es, English
      static let btn_TopUpCheckout_Edit = Rswift.StringResource(key: "btn_TopUpCheckout_Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Edit Card
      ///
      /// Locales: en, es
      static let edit_Card = Rswift.StringResource(key: "Edit_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Eduardo López
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Name = Rswift.StringResource(key: "lbl_CreatePassword_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Eduardo López
      ///
      /// Locales: en, es
      static let lbl_LoginPassword_name = Rswift.StringResource(key: "lbl_LoginPassword_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Efficiency
      ///
      /// Locales: en, es
      static let lblhugoGoodRatings5 = Rswift.StringResource(key: "lblhugoGoodRatings5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Efficiency
      ///
      /// Locales: en, es
      static let lblpartnerGoodRatings6 = Rswift.StringResource(key: "lblpartnerGoodRatings6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Ej. Juan Martinez
      ///
      /// Locales: en, es, English
      static let txt_AddUserInfo_FullName = Rswift.StringResource(key: "txt_AddUserInfo_FullName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Ej. Juan Martinez
      ///
      /// Locales: en, es, English
      static let txt_EmailInfo_username = Rswift.StringResource(key: "txt_EmailInfo_username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Ejem. juan.lopez@moradito.com
      ///
      /// Locales: en, es, English
      static let txt_AddUserInfo_Email = Rswift.StringResource(key: "txt_AddUserInfo_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: El Salvador
      ///
      /// Locales: en, es, English
      static let lbl_Country_Name = Rswift.StringResource(key: "lbl_Country_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: El Salvador
      ///
      /// Locales: en, es, English
      static let lbl_TerritoryCountry_Name = Rswift.StringResource(key: "lbl_TerritoryCountry_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es
      static let lbl_Step3_Email = Rswift.StringResource(key: "lbl_Step3_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es
      static let txt_new_billing_email_placeholder = Rswift.StringResource(key: "txt_new_billing_email_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es, English
      static let lbl_ValidateEmail_Email = Rswift.StringResource(key: "lbl_ValidateEmail_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es, English
      static let txt_CoverAlert_Mail = Rswift.StringResource(key: "txt_CoverAlert_Mail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es, English
      static let txt_EditUserProfile_Email = Rswift.StringResource(key: "txt_EditUserProfile_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Emergency call
      ///
      /// Locales: en, es, English
      static let callTitleOnWay = Rswift.StringResource(key: "CallTitleOnWay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Empty results
      ///
      /// Locales: en, es, English
      static let lbl_Empty_Results = Rswift.StringResource(key: "lbl_Empty_Results", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: End
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionDateEnd = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionDateEnd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: End of trip!
      ///
      /// Locales: en, es, English
      static let lbl_HeaderFinalizeRide_EndTrip = Rswift.StringResource(key: "lbl_HeaderFinalizeRide_EndTrip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: End trip
      ///
      /// Locales: en, es
      static let lbl_ConfirmCancelRide_Title = Rswift.StringResource(key: "lbl_ConfirmCancelRide_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter a 4-digit PIN
      ///
      /// Locales: en, es
      static let hp_temporal_code_enter_security_pin = Rswift.StringResource(key: "hp_temporal_code_enter_security_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter a valid number to recharge
      ///
      /// Locales: en, es
      static let enter_Valid_Number = Rswift.StringResource(key: "Enter_Valid_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter address
      ///
      /// Locales: en, es
      static let receipt_configuration_address_placeholder = Rswift.StringResource(key: "receipt_configuration_address_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter data
      ///
      /// Locales: en, es
      static let receipt_configuration_create_subtitle = Rswift.StringResource(key: "receipt_configuration_create_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter password
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Password = Rswift.StringResource(key: "lbl_CreatePassword_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter password again
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Again_Password = Rswift.StringResource(key: "lbl_CreatePassword_Again_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter telephone number.
      ///
      /// Locales: en, es, English
      static let txt_RequestPhone_EnterPhone = Rswift.StringResource(key: "txt_RequestPhone_EnterPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Enter the CVC code
      ///
      /// Locales: en, es
      static let cvcTitleAutorization_Enter = Rswift.StringResource(key: "CVCTitleAutorization_Enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter the amount
      ///
      /// Locales: en, es
      static let lbl_enter_amount_ProcessOrder_modal = Rswift.StringResource(key: "lbl_enter_amount_ProcessOrder_modal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter the code sent to
      ///
      /// Locales: en, es
      static let lbl_Step2_Send_Code = Rswift.StringResource(key: "lbl_Step2_Send_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter the number to recharge.
      ///
      /// Locales: en, es, English
      static let lbl_TopUpAdd_Enter_Number = Rswift.StringResource(key: "lbl_TopUpAdd_Enter_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Enter the recovery code sent to
      ///
      /// Locales: en, es
      static let lbl_Step2_Recover_Code_Send = Rswift.StringResource(key: "lbl_Step2_Recover_Code_Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter the type of identification
      ///
      /// Locales: en, es, English
      static let lbl_Identification = Rswift.StringResource(key: "lbl_Identification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Enter the welcome code to order your first vehicle
      ///
      /// Locales: en, es, English
      static let lbl_welcome_code_for_veichle = Rswift.StringResource(key: "lbl_welcome_code_for_veichle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Enter the welcoming code to ask for your first vehicle.
      ///
      /// Locales: en, es, English
      static let lbl_InvitationCode_Code_First_Vehicle = Rswift.StringResource(key: "lbl_InvitationCode_Code_First_Vehicle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Enter your
      ///
      /// Locales: en, es, English
      static let txt_new_billing_Enter = Rswift.StringResource(key: "txt_new_billing_Enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Enter your PIN again
      ///
      /// Locales: en, es
      static let hp_temporal_code_set_new_pin = Rswift.StringResource(key: "hp_temporal_code_set_new_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your Passcode
      ///
      /// Locales: en, es
      static let hp_lbl_account_login = Rswift.StringResource(key: "hp_lbl_account_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your billing information
      ///
      /// Locales: en, es
      static let lbl_billing_title = Rswift.StringResource(key: "lbl_billing_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your number
      ///
      /// Locales: en, es
      static let lbl_NewLogin_Number = Rswift.StringResource(key: "lbl_NewLogin_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your number
      ///
      /// Locales: en, es
      static let lbl_Step1_Enter_number_Small = Rswift.StringResource(key: "lbl_Step1_Enter_number_Small", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your password
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_A_Password = Rswift.StringResource(key: "lbl_CreatePassword_A_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your password
      ///
      /// Locales: en, es
      static let lbl_LoginPassword_Password = Rswift.StringResource(key: "lbl_LoginPassword_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your phone number
      ///
      /// Locales: en, es
      static let enter_Phone_Number = Rswift.StringResource(key: "enter_Phone_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your phone number
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhone_Enter_Number = Rswift.StringResource(key: "lbl_StartedPhone_Enter_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Enter your phone number, asassociated to the account
      ///
      /// Locales: en, es
      static let lbl_NewLogin_Assocaite = Rswift.StringResource(key: "lbl_NewLogin_Assocaite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your phone number, associated with the account
      ///
      /// Locales: en, es
      static let lbl_NewLogin_EnterPhone_number = Rswift.StringResource(key: "lbl_NewLogin_EnterPhone_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your promo code
      ///
      /// Locales: en, es, English
      static let lbl_Enter_Code = Rswift.StringResource(key: "lbl_Enter_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Enter your promo code.
      ///
      /// Locales: en, es, English
      static let lbl_PromotionalCode_Enter_Promo_Code = Rswift.StringResource(key: "lbl_PromotionalCode_Enter_Promo_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Enter your temporary code
      ///
      /// Locales: en, es
      static let hp_temporal_code_enter_temporal_code = Rswift.StringResource(key: "hp_temporal_code_enter_temporal_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your tokeN
      ///
      /// Locales: en, es, English
      static let lbl_Enter_Tokan = Rswift.StringResource(key: "lbl_Enter_Tokan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Entrepreneurial activities
      ///
      /// Locales: en, es, English
      static let lbl_OptionsInfoWithImage_Activites = Rswift.StringResource(key: "lbl_OptionsInfoWithImage_Activites", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Entrepreneurial activities
      ///
      /// Locales: en, es, English
      static let lbl_OptionsInfo_Activites = Rswift.StringResource(key: "lbl_OptionsInfo_Activites", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities
      ///
      /// Locales: en, es, English
      static let lbl_PartnerProduct_Activities = Rswift.StringResource(key: "lbl_PartnerProduct_Activities", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities
      ///
      /// Locales: en, es, English
      static let lbl_ProductNormal_Activities = Rswift.StringResource(key: "lbl_ProductNormal_Activities", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Errands
      ///
      /// Locales: en, es, English
      static let btn_WriteDescription_Mandadito = Rswift.StringResource(key: "btn_WriteDescription_Mandadito", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, es, English
      static let wrongSetRangeAddressTitle = Rswift.StringResource(key: "WrongSetRangeAddressTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Error code
      ///
      /// Locales: en, es
      static let error_Code = Rswift.StringResource(key: "Error_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Estate of order: HO-9999999999
      ///
      /// Locales: en, es, English
      static let lbl_Tracking_Order_Status = Rswift.StringResource(key: "lbl_Tracking_Order_Status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Example: Juan Carlos Aldana
      ///
      /// Locales: en, es
      static let example_Card_Name = Rswift.StringResource(key: "Example_Card_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Example: My orange credit card.
      ///
      /// Locales: en, es
      static let example_Card_Identier = Rswift.StringResource(key: "Example_Card_Identier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Excellent!
      ///
      /// Locales: en, es, English
      static let feedbackExcelentTitle = Rswift.StringResource(key: "FeedbackExcelentTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Exp.
      ///
      /// Locales: en, es
      static let card_Exp = Rswift.StringResource(key: "Card_Exp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Expense Control
      ///
      /// Locales: en, es
      static let hp_lbl_expense_title = Rswift.StringResource(key: "hp_lbl_expense_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Expenses
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionTypeExpense = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionTypeExpense", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Expiration
      ///
      /// Locales: en, es
      static let txt_Exp = Rswift.StringResource(key: "txt_Exp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Expiration date
      ///
      /// Locales: en, es, English
      static let expCardInfoTitle = Rswift.StringResource(key: "ExpCardInfoTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Expiration date
      ///
      /// Locales: en, es, English
      static let lbl_CardInfo_Expiration = Rswift.StringResource(key: "lbl_CardInfo_Expiration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Expiration date
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmAlert_ExpireDate = Rswift.StringResource(key: "lbl_ConfirmAlert_ExpireDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Expiration date
      ///
      /// Locales: en, es, English
      static let txt_creditcard_exirydate = Rswift.StringResource(key: "txt_creditcard_exirydate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Expiration month required
      ///
      /// Locales: en, es, English
      static let monthRequired = Rswift.StringResource(key: "MonthRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Explore as a guest
      ///
      /// Locales: en, es
      static let lbl_Welcome_Explora = Rswift.StringResource(key: "lbl_Welcome_Explora", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: FACEBOOK
      ///
      /// Locales: en, es, English
      static let btn_StartedPhone_Facebook = Rswift.StringResource(key: "btn_StartedPhone_Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: FILTER
      ///
      /// Locales: en, es, English
      static let sort_By = Rswift.StringResource(key: "Sort_By", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: FIND OUT WHERE TO REDEEM YOUR CASHBACK REWARDS
      ///
      /// Locales: en, es
      static let hp_cashback_commerce_info = Rswift.StringResource(key: "hp_cashback_commerce_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: FINISH
      ///
      /// Locales: en, es, English
      static let btn_TipCell_Finalizer = Rswift.StringResource(key: "btn_TipCell_Finalizer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: FINISH TRIP
      ///
      /// Locales: en, es, English
      static let lbl_End_Trip = Rswift.StringResource(key: "lbl_End_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: FREE
      ///
      /// Locales: en, es, English
      static let free = Rswift.StringResource(key: "Free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: FREE delivery
      ///
      /// Locales: en, es, English
      static let lbl_Promos_Free_Shipping = Rswift.StringResource(key: "lbl_Promos_Free_Shipping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: FREE_DELIVER_INSTALL
      ///
      /// Locales: en, es, English
      static let freeCouponCode = Rswift.StringResource(key: "FreeCouponCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Failed to process
      ///
      /// Locales: en, es
      static let failed_Process = Rswift.StringResource(key: "Failed_Process", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Far away
      ///
      /// Locales: en, es
      static let lbl_AlertTransport_FarAway = Rswift.StringResource(key: "lbl_AlertTransport_FarAway", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Favorite
      ///
      /// Locales: en, es
      static let partner_header_favorite_title = Rswift.StringResource(key: "partner_header_favorite_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Favorites
      ///
      /// Locales: en, es
      static let lbl_Main_favorites_section_title = Rswift.StringResource(key: "lbl_Main_favorites_section_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en, es, English
      static let lbl_BasicInfo_female = Rswift.StringResource(key: "lbl_BasicInfo_female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Fernando
      ///
      /// Locales: en, es, English
      static let lbl_OnTheWayRide2_Fernado = Rswift.StringResource(key: "lbl_OnTheWayRide2_Fernado", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Fernando
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide2_Fernando = Rswift.StringResource(key: "lbl_PickingRide2_Fernando", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Filter
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_FilterTitle = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_FilterTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Filter
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_title = Rswift.StringResource(key: "hp_lbl_transaction_filter_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Finance
      ///
      /// Locales: en, es, English
      static let lbl_PayServiceCollection_Financial = Rswift.StringResource(key: "lbl_PayServiceCollection_Financial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Financial Tracker
      ///
      /// Locales: en, es
      static let hp_expense_control_nav_title = Rswift.StringResource(key: "hp_expense_control_nav_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Find me in the map
      ///
      /// Locales: en, es, English
      static let lbl_Locate_Map = Rswift.StringResource(key: "lbl_Locate_Map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Find stop
      ///
      /// Locales: en, es
      static let find_Stop = Rswift.StringResource(key: "Find_Stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Finished delivery!
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeRide_Shipping_Completed = Rswift.StringResource(key: "lbl_FinalizeRide_Shipping_Completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Firebase
      ///
      /// Locales: en, es, English
      static let notificationService = Rswift.StringResource(key: "notificationService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Fish ceviche in pink sauce
      ///
      /// Locales: en, es, English
      static let lbl_OptionsInfoWithImage_Pink_Sauce = Rswift.StringResource(key: "lbl_OptionsInfoWithImage_Pink_Sauce", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Fish ceviche in pink sauce
      ///
      /// Locales: en, es, English
      static let lbl_OptionsInfo_Pink_Sauce = Rswift.StringResource(key: "lbl_OptionsInfo_Pink_Sauce", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Food
      ///
      /// Locales: en, es, English
      static let lbl_ServiceSelection_Food = Rswift.StringResource(key: "lbl_ServiceSelection_Food", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Food
      ///
      /// Locales: en, es, English
      static let lbl_Service_Food = Rswift.StringResource(key: "lbl_Service_Food", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Food, drinks, groceries,   errands, transportation,   bill payments and much more.
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Cell_Food = Rswift.StringResource(key: "lbl_WhatIsHugo_Cell_Food", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: For added security, your password should contain:
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Added_Security = Rswift.StringResource(key: "lbl_CreatePassword_Added_Security", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: For more information visit the prize section
      ///
      /// Locales: en, es
      static let lbl_ProcessOrder_MoreInfo = Rswift.StringResource(key: "lbl_ProcessOrder_MoreInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: For reasons beyond our control, sometimes it is possible not to receive a code, let me help you, request a call and I will create an account for you in seconds
      ///
      /// Locales: en, es, English
      static let getHelpMsg = Rswift.StringResource(key: "GetHelpMsg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: For% @ you do not yet have an address saved. To complete your shipment, please select an address or add a new address
      ///
      /// Locales: en, es
      static let please_Select_New_Address = Rswift.StringResource(key: "Please_Select_New_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Forget your password?
      ///
      /// Locales: en, es
      static let lbl_LoginPassword_Forgot_Password = Rswift.StringResource(key: "lbl_LoginPassword_Forgot_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Free cancellation
      ///
      /// Locales: en, es
      static let cancel_without_Cost = Rswift.StringResource(key: "Cancel_without_Cost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Frequent questions
      ///
      /// Locales: en, es, English
      static let frequent_questions = Rswift.StringResource(key: "Frequent_questions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: From
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_from = Rswift.StringResource(key: "hp_lbl_transaction_filter_from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Full Name
      ///
      /// Locales: en, es, English
      static let lbl_EmailInfo_username_title = Rswift.StringResource(key: "lbl_EmailInfo_username_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Full name
      ///
      /// Locales: en, es
      static let receipt_configutarion_name_title = Rswift.StringResource(key: "receipt_configutarion_name_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: GET CODE BY CALL
      ///
      /// Locales: en, es
      static let lbl_Step2_Get_Call_Code = Rswift.StringResource(key: "lbl_Step2_Get_Call_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: GET THE CODE THROUGH PHONE CALL.
      ///
      /// Locales: en, es, English
      static let btn_ValidatePhone_Get_Code = Rswift.StringResource(key: "btn_ValidatePhone_Get_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: GET THE CODE THROUGH PHONE CALL.
      ///
      /// Locales: en, es, English
      static let btn_ValidateRecoverCode_Get_Code = Rswift.StringResource(key: "btn_ValidateRecoverCode_Get_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: GHFYT-UODHFYG-154BGS
      ///
      /// Locales: en, es, English
      static let lbl_DateRangePicker_Id = Rswift.StringResource(key: "lbl_DateRangePicker_Id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Gender
      ///
      /// Locales: en, es, English
      static let lbl_BasicInfo_title = Rswift.StringResource(key: "lbl_BasicInfo_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Get started with hugoPay!
      ///
      /// Locales: en, es
      static let hp_full_TransactionHPFullViewController_EmptySubtitle = Rswift.StringResource(key: "hp_full_TransactionHPFullViewController_EmptySubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Giovanni
      ///
      /// Locales: en, English
      static let lbl_RideSummaryA = Rswift.StringResource(key: "lbl_RideSummaryA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Go to settings
      ///
      /// Locales: en, es, English
      static let goToSettingsMessage = Rswift.StringResource(key: "GoToSettingsMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Great!
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeGoodRating_Great = Rswift.StringResource(key: "lbl_FinalizeGoodRating_Great", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Guillermo
      ///
      /// Locales: en, es, English
      static let lbl_OnTheWayRide_Name = Rswift.StringResource(key: "lbl_OnTheWayRide_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Guillermo
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide_Name = Rswift.StringResource(key: "lbl_PickingRide_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: HISTORY
      ///
      /// Locales: en, es, English
      static let btn_order_history = Rswift.StringResource(key: "btn_order_history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: HO-12345462
      ///
      /// Locales: en, es, English
      static let lbl_TokanRowTable_Ho = Rswift.StringResource(key: "lbl_TokanRowTable_Ho", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: HUGO PAYMENT CODE
      ///
      /// Locales: en, es
      static let hugo_Payment_Code = Rswift.StringResource(key: "Hugo_Payment_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Have a good trip
      ///
      /// Locales: en, es
      static let good_Trip = Rswift.StringResource(key: "Good_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Haven't you received your code? Request Help
      ///
      /// Locales: en, es
      static let lbl_Step2_Have_Not_recive = Rswift.StringResource(key: "lbl_Step2_Have_Not_recive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hello!
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Hello = Rswift.StringResource(key: "lbl_CreatePassword_Hello", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hello! I'm Hugo,   the SuperApp!
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Cell_Hello = Rswift.StringResource(key: "lbl_WhatIsHugo_Cell_Hello", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: en, es, English
      static let help = Rswift.StringResource(key: "Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Help with my order
      ///
      /// Locales: en, es, English
      static let btn_help_with_my_order = Rswift.StringResource(key: "btn_help_with_my_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Here we will notify you of all the movements of your account!
      ///
      /// Locales: en, es
      static let hp_get_started_with_hugopay = Rswift.StringResource(key: "hp_get_started_with_hugopay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Here you could ask for help about any kind of problems in app. Create your account to use this service.
      ///
      /// Locales: en, es
      static let alert_chat_message = Rswift.StringResource(key: "alert_chat_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hi
      ///
      /// Locales: en, es, English
      static let lbl_AddPhone_UserName = Rswift.StringResource(key: "lbl_AddPhone_UserName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hi!
      ///
      /// Locales: en, es, English
      static let lbl_Hello = Rswift.StringResource(key: "lbl_Hello", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hola Ricardo!
      ///
      /// Locales: en, es, English
      static let lbl_InfoUser_Name = Rswift.StringResource(key: "lbl_InfoUser_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, English
      static let lbl_RideMap_Home = Rswift.StringResource(key: "lbl_RideMap_Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es, English
      static let lbl_PersonalAddress_Title = Rswift.StringResource(key: "lbl_PersonalAddress_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide2_Home = Rswift.StringResource(key: "lbl_PickingRide2_Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es, English
      static let lbl_RideSummaryArriving = Rswift.StringResource(key: "lbl_RideSummaryArriving", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es, English
      static let lbl_RouteItem_Home = Rswift.StringResource(key: "lbl_RouteItem_Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es, English
      static let lbl_SearchAddress_Home = Rswift.StringResource(key: "lbl_SearchAddress_Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Home, La Libertad, El Salvador
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentLocation_Address = Rswift.StringResource(key: "lbl_ShipmentLocation_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Home. Residencial los Olivos, #6, Santa Tecla. La Libertad, El Salvador, Centro America
      ///
      /// Locales: en, es, English
      static let lbl_RouteOutstanding_Address = Rswift.StringResource(key: "lbl_RouteOutstanding_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: House
      ///
      /// Locales: en, es
      static let lbl_AddressBook_Home = Rswift.StringResource(key: "lbl_AddressBook_Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: House or apartment number
      ///
      /// Locales: en, es
      static let lbl_AddressBook_House_Number = Rswift.StringResource(key: "lbl_AddressBook_House_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: How can we improve?
      ///
      /// Locales: en, es, English
      static let feedbackHowToImproveTitle = Rswift.StringResource(key: "FeedbackHowToImproveTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: How does it work?
      ///
      /// Locales: en, es
      static let shopping_Work = Rswift.StringResource(key: "Shopping_Work", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: How is our delivery service?
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeRide_About_Service = Rswift.StringResource(key: "lbl_FinalizeRide_About_Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: How to get?
      ///
      /// Locales: en, es
      static let btn_how_to_get = Rswift.StringResource(key: "btn_how_to_get", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: How was your experience?
      ///
      /// Locales: en, es, English
      static let lbl_RatingView_Experience = Rswift.StringResource(key: "lbl_RatingView_Experience", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: How was your trip?
      ///
      /// Locales: en, es, English
      static let lbl_RatingCell_Your_Trip = Rswift.StringResource(key: "lbl_RatingCell_Your_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hugo
      ///
      /// Locales: en, es, English
      static let lbl_SearchAddressShipment_Hugo = Rswift.StringResource(key: "lbl_SearchAddressShipment_Hugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hugo
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhoneAlternative_Hading = Rswift.StringResource(key: "lbl_StartedPhoneAlternative_Hading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hugo ID:
      ///
      /// Locales: en, es, English
      static let lbl_Hugo_ID = Rswift.StringResource(key: "lbl_Hugo_ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hugo ID: M3324455
      ///
      /// Locales: en, es, English
      static let lbl_driver_plate = Rswift.StringResource(key: "lbl_driver_plate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hugo help, I
      ///
      /// Locales: en, es, English
      static let lbl_HelpZendesk_Helps = Rswift.StringResource(key: "lbl_HelpZendesk_Helps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hugo is collecting your order, there isn't tracking information still. You can tap the icon above to see the history of your order.
      ///
      /// Locales: en, es, English
      static let lbl_picking_activ_order_info = Rswift.StringResource(key: "lbl_picking_activ_order_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hugo is expanding as fast as possible. At the moment we do not cover this shipping area, but we are working to solve it
      ///
      /// Locales: en, es, English
      static let noCoverMessage = Rswift.StringResource(key: "NoCoverMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Hugo support
      ///
      /// Locales: en, es
      static let alert_chat_title = Rswift.StringResource(key: "alert_chat_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hugo uses the internet to work. Please check that you have access and that the app is not restricted in the use of data
      ///
      /// Locales: en, es, English
      static let noInternetAccessMessage = Rswift.StringResource(key: "NoInternetAccessMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I AGREE
      ///
      /// Locales: en, es
      static let lbl_AgeReuired_Driver_Request_Ok = Rswift.StringResource(key: "lbl_AgeReuired_Driver_Request_Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: I FORGOT MY PASSWORD.
      ///
      /// Locales: en, es, English
      static let btn_LoginWithPassword_Forgot = Rswift.StringResource(key: "btn_LoginWithPassword_Forgot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I NEED HELP.
      ///
      /// Locales: en, es, English
      static let btn_ValidatePhone_Need_Help = Rswift.StringResource(key: "btn_ValidatePhone_Need_Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I NEED HELP.
      ///
      /// Locales: en, es, English
      static let btn_ValidateRecoverCode_Help = Rswift.StringResource(key: "btn_ValidateRecoverCode_Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I WANT TO CHECK MY POINTS
      ///
      /// Locales: en, es, English
      static let consult_Point = Rswift.StringResource(key: "Consult_Point", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I WILL GIVE THE CASH IN:
      ///
      /// Locales: en, es, English
      static let lbl_Driver_Cash_In = Rswift.StringResource(key: "lbl_Driver_Cash_In", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I accept the terms and conditions.
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhone_Condition = Rswift.StringResource(key: "lbl_StartedPhone_Condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I can receive a similar item if the one I select is sold out.
      ///
      /// Locales: en, es, English
      static let lbl_OrderSummary_Out_Of_Stock = Rswift.StringResource(key: "lbl_OrderSummary_Out_Of_Stock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I do all for you!
      ///
      /// Locales: en, es
      static let lbl_WelcomeEverything_You = Rswift.StringResource(key: "lbl_WelcomeEverything_You", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: I don't need change
      ///
      /// Locales: en, es, English
      static let noChangeAction = Rswift.StringResource(key: "NoChangeAction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I have read and accept the terms and conditions to use this service.
      ///
      /// Locales: en, es, English
      static let lbl_ThirdPartyImage_Accept = Rswift.StringResource(key: "lbl_ThirdPartyImage_Accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I have read and accept the terms and conditions.
      ///
      /// Locales: en, es, English
      static let lbl_RegisterPhone_ReadCondtion = Rswift.StringResource(key: "lbl_RegisterPhone_ReadCondtion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I have read and accept the terms and conditions.
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhoneAlternative_Conditions_Msg = Rswift.StringResource(key: "lbl_StartedPhoneAlternative_Conditions_Msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: I have read and agree to the 
      ///
      /// Locales: en, es
      static let lbl_Step1_Term_Condition_Message = Rswift.StringResource(key: "lbl_Step1_Term_Condition_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: I need help
      ///
      /// Locales: en, es, English
      static let helpYes = Rswift.StringResource(key: "helpYes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: IMAGES - LIST OF PURCHASE
      ///
      /// Locales: en, es, English
      static let lbl_Image_Purchase = Rswift.StringResource(key: "lbl_Image_Purchase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: IMPORTANT
      ///
      /// Locales: en, es
      static let importance = Rswift.StringResource(key: "importance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: INSERT
      ///
      /// Locales: en, es
      static let lbl_LoginPassword_Insert = Rswift.StringResource(key: "lbl_LoginPassword_Insert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: INSERT
      ///
      /// Locales: en, es, English
      static let btn_LoginWithPassword_Change = Rswift.StringResource(key: "btn_LoginWithPassword_Change", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: INVOICE
      ///
      /// Locales: en, es
      static let receipt_navBar_title = Rswift.StringResource(key: "receipt_navBar_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: INVOICE DETAIL
      ///
      /// Locales: en, es, English
      static let lbl_Billing_Details = Rswift.StringResource(key: "lbl_Billing_Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: IT IS UNDERSTOOD!
      ///
      /// Locales: en, es
      static let underStood = Rswift.StringResource(key: "UnderStood", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identifying name
      ///
      /// Locales: en, es
      static let card_Id_Name = Rswift.StringResource(key: "Card_Id_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: If you discard your order, your entire purchase order will be deleted.  Do you want to continue?
      ///
      /// Locales: en, es
      static let lbl_Process_Order_Discard_Desc = Rswift.StringResource(key: "lbl_Process_Order_Discard_Desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: If you don't find some article in your list, we will remove this item and you'll receive its value in the balance of your profile.
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmSimilar_Similar_Purchase_Desc = Rswift.StringResource(key: "lbl_ConfirmSimilar_Similar_Purchase_Desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: If you need help or you have any doubt about your invoice payment, we will communicate directly with the organization we provide the service with
      ///
      /// Locales: en, es, English
      static let lbl_Help_Service = Rswift.StringResource(key: "lbl_Help_Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: If you need help or you have any doubt about your recharge, we will communicate directly with the organization we provide the service with
      ///
      /// Locales: en, es, English
      static let lbl_Help_Recharge = Rswift.StringResource(key: "lbl_Help_Recharge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: If you want to cancel your order, we need to know how you would like to receive your money back.
      ///
      /// Locales: en, es
      static let lbl_Subtitle = Rswift.StringResource(key: "lbl_Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Important announcement
      ///
      /// Locales: en, es, English
      static let productAlertTitle = Rswift.StringResource(key: "ProductAlertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Important reminder
      ///
      /// Locales: en, es, English
      static let ccShowCSSTitle = Rswift.StringResource(key: "CCShowCSSTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Important reminder!
      ///
      /// Locales: en, es, English
      static let lbl_AgeReuired_Take_Account = Rswift.StringResource(key: "lbl_AgeReuired_Take_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Impressa Repuestos
      ///
      /// Locales: en, es, English
      static let lbl_TokenHeaderTable_Impressa = Rswift.StringResource(key: "lbl_TokenHeaderTable_Impressa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: In Hugo, we want to help you in the best way to you. The chat option is today available for you where we will help you in a personal way.
      ///
      /// Locales: en, es, English
      static let lbl_Boarding_personalized = Rswift.StringResource(key: "lbl_Boarding_personalized", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: In Hugo, we're implementing new security measures, we'd like you to add a password that will protect your data in our platform.
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_Legend_Heading = Rswift.StringResource(key: "lbl_CreateFBPassword_Legend_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: In a moment you will receive a call with your code.
      ///
      /// Locales: en, es, English
      static let phoneCallSmsSucess = Rswift.StringResource(key: "phoneCallSmsSucess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: In the event you need refund, please check out our refund policy.
      ///
      /// Locales: en, es, English
      static let lbl_RefundDesclaimer_Remimber_refund = Rswift.StringResource(key: "lbl_RefundDesclaimer_Remimber_refund", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: In this screen you will be able to access the transport option, to be able to access and enjoy this option, create your account or log in.
      ///
      /// Locales: en, es
      static let transporte_option = Rswift.StringResource(key: "transporte_option", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: In your current location this service is not available
      ///
      /// Locales: en, es
      static let current_location_Service_Not = Rswift.StringResource(key: "current_location_Service_Not", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: In your current location this service is not available
      ///
      /// Locales: en, es
      static let not_Available_service = Rswift.StringResource(key: "Not_Available_service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Income
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionTypeIncome = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionTypeIncome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Incomplete Order
      ///
      /// Locales: en, es
      static let lblpartnerBadRatings6 = Rswift.StringResource(key: "lblpartnerBadRatings6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Information
      ///
      /// Locales: en, es
      static let information_text = Rswift.StringResource(key: "Information_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Inmediate delivery
      ///
      /// Locales: en, es
      static let lbl_Sort_Demand = Rswift.StringResource(key: "lbl_Sort_Demand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Input a 4 digit PIN
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_newpin_subtitle = Rswift.StringResource(key: "hp_full_reset_pin_newpin_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Input your PIN one more time
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_newpin_confirmation_title = Rswift.StringResource(key: "hp_full_reset_pin_newpin_confirmation_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Insert Date
      ///
      /// Locales: en, es, English
      static let txt_BasicInfo_dob_placeholder = Rswift.StringResource(key: "txt_BasicInfo_dob_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insert the code we have sent to your cellphone number.
      ///
      /// Locales: en, es, English
      static let lbl_ValidatePhone_Sent_Code_Msg = Rswift.StringResource(key: "lbl_ValidatePhone_Sent_Code_Msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insert the date.
      ///
      /// Locales: en, es, English
      static let txt_EditUserProfile_Enter_Date = Rswift.StringResource(key: "txt_EditUserProfile_Enter_Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insert the recovery code that we have sent to your
      ///
      /// Locales: en, es, English
      static let lbl_ValidateRecoverCode_Sent_Code = Rswift.StringResource(key: "lbl_ValidateRecoverCode_Sent_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insert the recovery code.
      ///
      /// Locales: en, es, English
      static let lbl_ValidateRecoverCode_Recover_Code = Rswift.StringResource(key: "lbl_ValidateRecoverCode_Recover_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insert your access code.
      ///
      /// Locales: en, es, English
      static let lbl_OrderRedeem_Access_Code = Rswift.StringResource(key: "lbl_OrderRedeem_Access_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insert your code.
      ///
      /// Locales: en, es, English
      static let lbl_ValidatePhone_Enter_Code = Rswift.StringResource(key: "lbl_ValidatePhone_Enter_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insert your password.
      ///
      /// Locales: en, es, English
      static let lbl_LoginWithPassword_Password_Text = Rswift.StringResource(key: "lbl_LoginWithPassword_Password_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insert your tax document.
      ///
      /// Locales: en, es, English
      static let txt_new_billing_txt_number_placeholder = Rswift.StringResource(key: "txt_new_billing_txt_number_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insert your token (phone number).
      ///
      /// Locales: en, es, English
      static let lbl_enter_phone_number_token = Rswift.StringResource(key: "lbl_enter_phone_number_token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Inside your errand, you can find a list of purchases, we will make the payment when carrying them out.
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentLocation_Inside_Errand = Rswift.StringResource(key: "lbl_ShipmentLocation_Inside_Errand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Instructions
      ///
      /// Locales: en, es, English
      static let lbl_UpdatePassword_Instructions = Rswift.StringResource(key: "lbl_UpdatePassword_Instructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Instructions:
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_Introductio_Text = Rswift.StringResource(key: "lbl_CreateFBPassword_Introductio_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Insufficient product!
      ///
      /// Locales: en, es
      static let lbl_stock_unavailable_title = Rswift.StringResource(key: "lbl_stock_unavailable_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Insurance carrier
      ///
      /// Locales: en, es, English
      static let lbl_ProvidersPayServices_Insurance = Rswift.StringResource(key: "lbl_ProvidersPayServices_Insurance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Invalid Phone
      ///
      /// Locales: en, es
      static let hp_full_invalid_phone = Rswift.StringResource(key: "hp_full_invalid_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invalid Phone
      ///
      /// Locales: en, es
      static let invalid_Phone = Rswift.StringResource(key: "invalid_Phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invalid Token
      ///
      /// Locales: en, es, English
      static let tokenErrorDigitsTitle = Rswift.StringResource(key: "tokenErrorDigitsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Invalid address
      ///
      /// Locales: en, es, English
      static let wrongTerritoryAddressTitle = Rswift.StringResource(key: "WrongTerritoryAddressTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Invalid amount
      ///
      /// Locales: en, es
      static let hp_CashinMoneyConfirmation_invalidAmount = Rswift.StringResource(key: "hp_CashinMoneyConfirmation_invalidAmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invalid amount
      ///
      /// Locales: en, es
      static let hp_full_invalid_amount = Rswift.StringResource(key: "hp_full_invalid_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invalid code
      ///
      /// Locales: en, es, English
      static let invalid_Code = Rswift.StringResource(key: "Invalid_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Invalid coupon
      ///
      /// Locales: en, es, English
      static let noValidCouponTitle = Rswift.StringResource(key: "NoValidCouponTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Invalid email
      ///
      /// Locales: en, es
      static let hp_full_invalid_email = Rswift.StringResource(key: "hp_full_invalid_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invalid email
      ///
      /// Locales: en, es, English
      static let emailNoValidTitle = Rswift.StringResource(key: "EmailNoValidTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Invalid number
      ///
      /// Locales: en, es
      static let invalid_Number = Rswift.StringResource(key: "Invalid_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invalid option
      ///
      /// Locales: en, es
      static let invalid_option = Rswift.StringResource(key: "Invalid_option", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invalid phone number
      ///
      /// Locales: en, es
      static let invalid_Phone_Number = Rswift.StringResource(key: "Invalid_Phone_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invalid value
      ///
      /// Locales: en, es, English
      static let minimumAmountTitle = Rswift.StringResource(key: "MinimumAmountTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Invoice
      ///
      /// Locales: en, es, English
      static let lbl_Invoice = Rswift.StringResource(key: "lbl_Invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Invoice Information
      ///
      /// Locales: en, es
      static let receipt_configuration_title = Rswift.StringResource(key: "receipt_configuration_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invoice holder
      ///
      /// Locales: en, es, English
      static let lbl_PayServiceDetailHistory_Invoice = Rswift.StringResource(key: "lbl_PayServiceDetailHistory_Invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Invoice holder X:
      ///
      /// Locales: en, es, English
      static let lbl_BillPayService_Invoice_Holder = Rswift.StringResource(key: "lbl_BillPayService_Invoice_Holder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: It appears you may have blocked your account
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_locked_account_title = Rswift.StringResource(key: "hp_full_reset_pin_locked_account_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: It is impossible to locate Hugo, trying…
      ///
      /// Locales: en, es, English
      static let lbl_unable_to_locate_hugo = Rswift.StringResource(key: "lbl_unable_to_locate_hugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: It is the last step!
      ///
      /// Locales: en, es, English
      static let last_Step = Rswift.StringResource(key: "last_Step", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: It is time to change your password
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Change_Password = Rswift.StringResource(key: "lbl_CreatePassword_Change_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: It is time to enter your new password
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_New_Password = Rswift.StringResource(key: "lbl_CreatePassword_New_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: It may take up to 30 seconds for your temporary code to arrive
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_time_disclaimer = Rswift.StringResource(key: "hp_full_reset_pin_time_disclaimer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: It was not possible to cancel the order, try again
      ///
      /// Locales: en, es
      static let cancel_Order = Rswift.StringResource(key: "Cancel_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: It was not possible to complete the action
      ///
      /// Locales: en, es
      static let completed_Action = Rswift.StringResource(key: "Completed_Action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: It was not possible to get your location, you can check your iPhone settings or select a territory
      ///
      /// Locales: en, es, English
      static let noLocationPossibleMessage = Rswift.StringResource(key: "NoLocationPossibleMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: It was not possible to use the code entered, try again
      ///
      /// Locales: en, es
      static let code_Enter_Try_again = Rswift.StringResource(key: "Code_Enter_Try_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: It will take some seconds.
      ///
      /// Locales: en, es, English
      static let lbl_AddUserInfo_Take_Seconds = Rswift.StringResource(key: "lbl_AddUserInfo_Take_Seconds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: It's time to assign a password
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Assign = Rswift.StringResource(key: "lbl_CreatePassword_Assign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: JANUARY
      ///
      /// Locales: en, es, English
      static let lbl_EntertainmentOrder_January = Rswift.StringResource(key: "lbl_EntertainmentOrder_January", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Jeep Cheroke
      ///
      /// Locales: en, es, English
      static let lbl_OnTheWayRide_Jeep = Rswift.StringResource(key: "lbl_OnTheWayRide_Jeep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Jeep Cheroke
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide_Jeep = Rswift.StringResource(key: "lbl_PickingRide_Jeep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Jeep Cherokee
      ///
      /// Locales: en, English
      static let lbl_RideSummaryJeep = Rswift.StringResource(key: "lbl_RideSummaryJeep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Jeep Cherokee
      ///
      /// Locales: en, es, English
      static let lbl_OnTheWayRide2_Jeep = Rswift.StringResource(key: "lbl_OnTheWayRide2_Jeep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Jeep Cherokee
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide2_Jeep = Rswift.StringResource(key: "lbl_PickingRide2_Jeep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Jeep Cherokee 2016 / Placa: M-3324455
      ///
      /// Locales: en, es, English
      static let lbl_DriverDetail_Address = Rswift.StringResource(key: "lbl_DriverDetail_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Jhon Doe
      ///
      /// Locales: en, es, English
      static let billing_cell_lblname = Rswift.StringResource(key: "billing_cell_lblname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Job
      ///
      /// Locales: en, es
      static let lbl_AddressBook_Office = Rswift.StringResource(key: "lbl_AddressBook_Office", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Join the financial revolution!
      ///
      /// Locales: en, es
      static let user_login = Rswift.StringResource(key: "user_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Journey started
      ///
      /// Locales: en, es
      static let start_Jounary = Rswift.StringResource(key: "Start_Jounary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Juan Ernesto López
      ///
      /// Locales: en, es
      static let receipt_configuration_name_placeholder = Rswift.StringResource(key: "receipt_configuration_name_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Keep going
      ///
      /// Locales: en, es, English
      static let lbl_Keep_Going = Rswift.StringResource(key: "lbl_Keep_Going", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Keep in mind!
      ///
      /// Locales: en, es
      static let lbl_ProcessOrder_TO_Warning_Title = Rswift.StringResource(key: "lbl_ProcessOrder_TO_Warning_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Keep searching
      ///
      /// Locales: en, es
      static let lbl_Keep_Searching = Rswift.StringResource(key: "lbl_Keep_Searching", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kirkland Signature Compactor Bag With DrawstringKirkland Signature Compactor Bag With Drawstring
      ///
      /// Locales: en, es, English
      static let lbl_ProductCollection_Signature = Rswift.StringResource(key: "lbl_ProductCollection_Signature", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Know about our refund policy.
      ///
      /// Locales: en, es, English
      static let lbl_RefundDesclaimer_Refund_Policy = Rswift.StringResource(key: "lbl_RefundDesclaimer_Refund_Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Koi Sushi
      ///
      /// Locales: en, es, English
      static let lbl_PartnerTable_Name = Rswift.StringResource(key: "lbl_PartnerTable_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: LOCATE ME MANUALLY
      ///
      /// Locales: en, es
      static let locate_Me_County = Rswift.StringResource(key: "Locate_Me_County", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LOG IN
      ///
      /// Locales: en, es
      static let btn_WelcomeLog_In = Rswift.StringResource(key: "btn_WelcomeLog_In", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LOG IN
      ///
      /// Locales: en, es
      static let lbl_NewLogin_Login = Rswift.StringResource(key: "lbl_NewLogin_Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LOG IN
      ///
      /// Locales: en, es
      static let lbl_Step1_Login = Rswift.StringResource(key: "lbl_Step1_Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LOG IN
      ///
      /// Locales: en, es
      static let lbl_Step2_Login = Rswift.StringResource(key: "lbl_Step2_Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LWe are sorry the inconvenience, a help request has been generated and one of our agents will communicate with you to give a solution.
      ///
      /// Locales: en, es, English
      static let lbl_CustomCall_Agents_Contact = Rswift.StringResource(key: "lbl_CustomCall_Agents_Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: La Libertad, El Salvador
      ///
      /// Locales: en, es, English
      static let lbl_PersonalAddress_Address = Rswift.StringResource(key: "lbl_PersonalAddress_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: La Libertad, El Salvador
      ///
      /// Locales: en, es, English
      static let lbl_SearchAddress_Address = Rswift.StringResource(key: "lbl_SearchAddress_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Last message
      ///
      /// Locales: en, es, English
      static let lbl_HelpZendesk_Last_Msg = Rswift.StringResource(key: "lbl_HelpZendesk_Last_Msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Last name
      ///
      /// Locales: en, es
      static let lbl_Step3_Surname = Rswift.StringResource(key: "lbl_Step3_Surname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Let us have access to your location to recommend the businesses close to you.
      ///
      /// Locales: en, es, English
      static let lbl_Onboarding_Allow_Location = Rswift.StringResource(key: "lbl_Onboarding_Allow_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Let's add security!
      ///
      /// Locales: en, es
      static let createPassword_Add_Security = Rswift.StringResource(key: "CreatePassword_Add_Security", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Let's recharge.
      ///
      /// Locales: en, es, English
      static let lbl_TopUpMain_Recharge = Rswift.StringResource(key: "lbl_TopUpMain_Recharge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Let's recover it
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_locked_account_subtitle = Rswift.StringResource(key: "hp_full_reset_pin_locked_account_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Let's start with Hugo!
      ///
      /// Locales: en, es, English
      static let lbl_EmailInfo_Main_Heading = Rswift.StringResource(key: "lbl_EmailInfo_Main_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Let's update your password.
      ///
      /// Locales: en, es, English
      static let lbl_UpdatePassword_Help_SubTitle = Rswift.StringResource(key: "lbl_UpdatePassword_Help_SubTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Limit Exceeded
      ///
      /// Locales: en, es, English
      static let dailyLimitExceededTitle = Rswift.StringResource(key: "DailyLimitExceededTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Limit Exceeded
      ///
      /// Locales: en, es, English
      static let limitExceededTitle = Rswift.StringResource(key: "LimitExceededTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Limited product
      ///
      /// Locales: en, es, English
      static let partnerLimitTitle = Rswift.StringResource(key: "PartnerLimitTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: List of products
      ///
      /// Locales: en, es, English
      static let lbl_ListView_Product = Rswift.StringResource(key: "lbl_ListView_Product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: List of purchases
      ///
      /// Locales: en, es, English
      static let btn_WriteDescription_Buy_List = Rswift.StringResource(key: "btn_WriteDescription_Buy_List", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Loading ...
      ///
      /// Locales: en, es
      static let loading_Text = Rswift.StringResource(key: "loading_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Locate me in the map.
      ///
      /// Locales: en, es, English
      static let lbl_MyLocationNewAddress_Title = Rswift.StringResource(key: "lbl_MyLocationNewAddress_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Locate on the map
      ///
      /// Locales: en, es
      static let lbl_AddressBook_Localise = Rswift.StringResource(key: "lbl_AddressBook_Localise", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Log In
      ///
      /// Locales: en, es
      static let hp_lbl_onboarding_login = Rswift.StringResource(key: "hp_lbl_onboarding_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Log in to your account.
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhoneAlternative_Login_Text = Rswift.StringResource(key: "lbl_StartedPhoneAlternative_Login_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Login with
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhone_LoginWith = Rswift.StringResource(key: "lbl_StartedPhone_LoginWith", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Looking for transportation…
      ///
      /// Locales: en, English
      static let lbl_RideSummaryLooking = Rswift.StringResource(key: "lbl_RideSummaryLooking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Lost
      ///
      /// Locales: en, es
      static let lbldriverBadRatings2 = Rswift.StringResource(key: "lbldriverBadRatings2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Loyalty Program
      ///
      /// Locales: en, es, English
      static let program = Rswift.StringResource(key: "Program", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: M-3324455
      ///
      /// Locales: en, es, English
      static let lbl_OnTheWayRide_M = Rswift.StringResource(key: "lbl_OnTheWayRide_M", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: M-3324455
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide_Number = Rswift.StringResource(key: "lbl_PickingRide_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: MAKE ANOTHER DELIVERY.
      ///
      /// Locales: en, es, English
      static let btn_OrderFinished_Make_Another_Shipping = Rswift.StringResource(key: "btn_OrderFinished_Make_Another_Shipping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: MAKE ANOTHER PAYMENT
      ///
      /// Locales: en, es
      static let make_payments = Rswift.StringResource(key: "make_payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: MAKE ANOTHER RECHARGE
      ///
      /// Locales: en, es, English
      static let lbl_Another_Refill = Rswift.StringResource(key: "lbl_Another_Refill", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: MAKE RECHARGE
      ///
      /// Locales: en, es
      static let make_rechare = Rswift.StringResource(key: "Make_rechare", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: MODIFY IMAGE
      ///
      /// Locales: en, es
      static let lbl_SearchAddressShipment_modify_image = Rswift.StringResource(key: "lbl_SearchAddressShipment_modify_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: MY ADDRESSES
      ///
      /// Locales: en, es
      static let my_address = Rswift.StringResource(key: "MY_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Made in
      ///
      /// Locales: en, es
      static let lbl_Country_Made = Rswift.StringResource(key: "lbl_Country_Made", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Mail is required
      ///
      /// Locales: en, es, English
      static let emailNoValidMessage = Rswift.StringResource(key: "EmailNoValidMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Make an order
      ///
      /// Locales: en, es, English
      static let ordersList_Make = Rswift.StringResource(key: "OrdersList_Make", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Make an order
      ///
      /// Locales: en, es, English
      static let pastOrders_Make = Rswift.StringResource(key: "PastOrders_Make", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Make your first purchase with hugoPay
      ///
      /// Locales: en, es
      static let hp_lbl_home_emptystate_payall = Rswift.StringResource(key: "hp_lbl_home_emptystate_payall", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en, es, English
      static let lbl_BasicInfo_male = Rswift.StringResource(key: "lbl_BasicInfo_male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Max
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionAmountMax = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionAmountMax", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Maximum
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_maximum = Rswift.StringResource(key: "hp_lbl_transaction_filter_maximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Min
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionAmountMin = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionAmountMin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Minimum
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_minimum = Rswift.StringResource(key: "hp_lbl_transaction_filter_minimum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Minimum Amount 
      ///
      /// Locales: en, es
      static let hp_CashInMoneyIncome_MinimumAmountValidation = Rswift.StringResource(key: "hp_CashInMoneyIncome_MinimumAmountValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Minimum purchase required
      ///
      /// Locales: en, es, English
      static let minOrderRequiredTitle = Rswift.StringResource(key: "MinOrderRequiredTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Missing data
      ///
      /// Locales: en, es
      static let missing_Data = Rswift.StringResource(key: "missing_Data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Modify pin
      ///
      /// Locales: en, es, English
      static let lbl_Modify_Pin = Rswift.StringResource(key: "lbl_Modify_Pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Monday, February 25th
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentETA_Monday = Rswift.StringResource(key: "lbl_ShipmentETA_Monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Month must contain 2 digits
      ///
      /// Locales: en, es, English
      static let monthLength = Rswift.StringResource(key: "MonthLength", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: More Info
      ///
      /// Locales: en, es
      static let hp_lbl_onboarding_moreinfo = Rswift.StringResource(key: "hp_lbl_onboarding_moreinfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: More information
      ///
      /// Locales: en, es, English
      static let lbl_PromosMoreInfo_MoreInfo = Rswift.StringResource(key: "lbl_PromosMoreInfo_MoreInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Move in style
      ///
      /// Locales: en, es
      static let move_Style = Rswift.StringResource(key: "Move_Style", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Move the pin to the destiny place.
      ///
      /// Locales: en, es, English
      static let lbl_PlaceMarker_Destination = Rswift.StringResource(key: "lbl_PlaceMarker_Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Move the pin to the exact place where we will pick you up.
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmationBottom_Pick_Up = Rswift.StringResource(key: "lbl_ConfirmationBottom_Pick_Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Move the pin to the location you need
      ///
      /// Locales: en, es, English
      static let lbl_Location_Pin = Rswift.StringResource(key: "lbl_Location_Pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Move the pin to your destiny place
      ///
      /// Locales: en, es, English
      static let lbl_Move_Pin = Rswift.StringResource(key: "lbl_Move_Pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Move the pin to your destiny place
      ///
      /// Locales: en, es, English
      static let lbl_Move_To_Pin_Destination = Rswift.StringResource(key: "lbl_Move_To_Pin_Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Move your profile photo in the map to locate you better.
      ///
      /// Locales: en, English
      static let lbl_Search_GpsLocation_Profile = Rswift.StringResource(key: "lbl_Search_GpsLocation_Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: My %@
      ///
      /// Locales: en, es
      static let hp_lbl_home_mytransactions = Rswift.StringResource(key: "hp_lbl_home_mytransactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: My Tickets
      ///
      /// Locales: en, es, English
      static let lbl_Help_Tickets = Rswift.StringResource(key: "lbl_Help_Tickets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: My transactions
      ///
      /// Locales: en, es
      static let hp_expense_control_my_transactions = Rswift.StringResource(key: "hp_expense_control_my_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: My transactions
      ///
      /// Locales: en, es
      static let hp_my_transactions_title = Rswift.StringResource(key: "hp_my_transactions_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NEXT
      ///
      /// Locales: en
      static let btn_LoginWithPassword_Continue = Rswift.StringResource(key: "btn_LoginWithPassword_Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: NEXT
      ///
      /// Locales: en, es
      static let hp_CashInMoneyIncome_NextButton = Rswift.StringResource(key: "hp_CashInMoneyIncome_NextButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NEXT
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_next_button = Rswift.StringResource(key: "hp_full_reset_pin_next_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NEXT
      ///
      /// Locales: en, es
      static let hp_temporal_code_next = Rswift.StringResource(key: "hp_temporal_code_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NEXT
      ///
      /// Locales: en, es
      static let lbl_Step1_Following = Rswift.StringResource(key: "lbl_Step1_Following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NO
      ///
      /// Locales: en, es
      static let btn_AlertTransport_To_No = Rswift.StringResource(key: "btn_AlertTransport_To_No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NONE OF THESE
      ///
      /// Locales: en, es, English
      static let lbl_None_Of_These = Rswift.StringResource(key: "lbl_None_Of_These", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, es
      static let lbl_Step3_Name = Rswift.StringResource(key: "lbl_Step3_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, es, English
      static let lbl_new_billing_name = Rswift.StringResource(key: "lbl_new_billing_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, es, English
      static let txt_CoverAlert_Name = Rswift.StringResource(key: "txt_CoverAlert_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, es, English
      static let txt_new_billing_name_placeholder = Rswift.StringResource(key: "txt_new_billing_name_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Name is required
      ///
      /// Locales: en, es, English
      static let userNameRequired = Rswift.StringResource(key: "UserNameRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Name of the Card
      ///
      /// Locales: en, es, English
      static let name_Card = Rswift.StringResource(key: "Name_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Name on card required
      ///
      /// Locales: en, es, English
      static let cardNameRequired = Rswift.StringResource(key: "CardNameRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Name on the card
      ///
      /// Locales: en, es, English
      static let txt_creditcard_name_placeholder = Rswift.StringResource(key: "txt_creditcard_name_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Need help?
      ///
      /// Locales: en, es
      static let lbl_Step1_Need_Help = Rswift.StringResource(key: "lbl_Step1_Need_Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Need help?
      ///
      /// Locales: en, es, English
      static let helpTitle = Rswift.StringResource(key: "HelpTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: New
      ///
      /// Locales: en, es, English
      static let lbl_PartnerFeedTable_New = Rswift.StringResource(key: "lbl_PartnerFeedTable_New", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: New
      ///
      /// Locales: en, es, English
      static let lbl_PartnerTable_New = Rswift.StringResource(key: "lbl_PartnerTable_New", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: New Card
      ///
      /// Locales: en, es
      static let new_Card = Rswift.StringResource(key: "New_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, es, English
      static let lbl_UpdatePassword_New_Password = Rswift.StringResource(key: "lbl_UpdatePassword_New_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: New invoice
      ///
      /// Locales: en, es, English
      static let lbl_new_billing_title = Rswift.StringResource(key: "lbl_new_billing_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: New transport message
      ///
      /// Locales: en, es, English
      static let lbl_LocalNotification_New_Transport = Rswift.StringResource(key: "lbl_LocalNotification_New_Transport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: New version available
      ///
      /// Locales: en, es, English
      static let betaNewVersionTitle = Rswift.StringResource(key: "BetaNewVersionTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: New version available
      ///
      /// Locales: en, es, English
      static let newVersionTitle = Rswift.StringResource(key: "NewVersionTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, es
      static let hp_lbl_account_next = Rswift.StringResource(key: "hp_lbl_account_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Next step:
      ///
      /// Locales: en, es
      static let lbl_InfoUser_Next_Step = Rswift.StringResource(key: "lbl_InfoUser_Next_Step", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Next step: additional information
      ///
      /// Locales: en, es, English
      static let lbl_InfoUser_SubTitle = Rswift.StringResource(key: "lbl_InfoUser_SubTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Next you can select a reward:
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeGoodRating_Select_Reward = Rswift.StringResource(key: "lbl_FinalizeGoodRating_Select_Reward", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, es, English
      static let nO = Rswift.StringResource(key: "NO", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: No Change
      ///
      /// Locales: en, es
      static let lbldriverBadRatings3 = Rswift.StringResource(key: "lbldriverBadRatings3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No Internet access
      ///
      /// Locales: en, es, English
      static let noInternetAccessTitle = Rswift.StringResource(key: "NoInternetAccessTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: No notifications
      ///
      /// Locales: en, es
      static let hp_empty_transactions_lbl = Rswift.StringResource(key: "hp_empty_transactions_lbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No results found.
      ///
      /// Locales: en, es, English
      static let lbl_ProductView_No_Result_Found = Rswift.StringResource(key: "lbl_ProductView_No_Result_Found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: No thanks
      ///
      /// Locales: en, es, English
      static let helpNo = Rswift.StringResource(key: "helpNo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: No transactions
      ///
      /// Locales: en, es
      static let hp_full_TransactionHPFullViewController_EmptyText = Rswift.StringResource(key: "hp_full_TransactionHPFullViewController_EmptyText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No transactions yet.
      ///
      /// Locales: en, es
      static let hp_lbl_home_emptystate_trx = Rswift.StringResource(key: "hp_lbl_home_emptystate_trx", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No transactions yet.
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_list_emptytitle = Rswift.StringResource(key: "hp_lbl_transaction_list_emptytitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Not available
      ///
      /// Locales: en, es, English
      static let lbl_Not_Avaiable = Rswift.StringResource(key: "lbl_Not_Avaiable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Not available
      ///
      /// Locales: en, es, English
      static let noAvailable = Rswift.StringResource(key: "NoAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Not available due to saturation
      ///
      /// Locales: en, es, English
      static let saturated = Rswift.StringResource(key: "Saturated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Not now
      ///
      /// Locales: en, es, English
      static let btn_Onboarding_Not_Now = Rswift.StringResource(key: "btn_Onboarding_Not_Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Not valid
      ///
      /// Locales: en, es
      static let not_Valid = Rswift.StringResource(key: "Not_Valid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Not valid
      ///
      /// Locales: en, es, English
      static let noValidTitle = Rswift.StringResource(key: "NoValidTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Notes for the order
      ///
      /// Locales: en, es, English
      static let lbl_Note_Order = Rswift.StringResource(key: "lbl_Note_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, es
      static let ct_notification_title = Rswift.StringResource(key: "ct_notification_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, es
      static let hp_lbl_notifications_title = Rswift.StringResource(key: "hp_lbl_notifications_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Number on the card
      ///
      /// Locales: en, es
      static let card_Number = Rswift.StringResource(key: "Card_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Number on the card
      ///
      /// Locales: en, es, English
      static let txt_creditcard_number_placeholder = Rswift.StringResource(key: "txt_creditcard_number_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Number to recharge
      ///
      /// Locales: en, es, English
      static let lbl_TopUpCheckout_Number_Rechage = Rswift.StringResource(key: "lbl_TopUpCheckout_Number_Rechage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, es, English
      static let entendido = Rswift.StringResource(key: "Entendido", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, es, English
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: OK, UNDERSTOOD!
      ///
      /// Locales: en, es, English
      static let lbl_UnderStanding = Rswift.StringResource(key: "lbl_UnderStanding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: OPTION CATEGORY
      ///
      /// Locales: en, es, English
      static let lbl_Option_Category = Rswift.StringResource(key: "lbl_Option_Category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ORDER NUMBER
      ///
      /// Locales: en, es
      static let lbl_sch_detail_number = Rswift.StringResource(key: "lbl_sch_detail_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ORDER SUMMARY
      ///
      /// Locales: en, es, English
      static let lbl_OrderSummary_Summary_Order = Rswift.StringResource(key: "lbl_OrderSummary_Summary_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ORDERS
      ///
      /// Locales: en, es, English
      static let lbl_order_titke = Rswift.StringResource(key: "lbl_order_titke", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ORIGIN
      ///
      /// Locales: en, es
      static let lbl_Origen = Rswift.StringResource(key: "lbl_Origen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: On this screen you can see the history of your past orders and track all your active orders. Create your account and place your first order
      ///
      /// Locales: en, es
      static let first_Order_Create_account = Rswift.StringResource(key: "first_Order_Create_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: en, es, English
      static let btn_LocalNotification_Open = Rswift.StringResource(key: "btn_LocalNotification_Open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Or begin with
      ///
      /// Locales: en, es, English
      static let lbl_RegisterPhone_StartWith = Rswift.StringResource(key: "lbl_RegisterPhone_StartWith", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Or begin with
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhoneAlternative_StartWith = Rswift.StringResource(key: "lbl_StartedPhoneAlternative_StartWith", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Or enter your email
      ///
      /// Locales: en, es
      static let hp_full_send_money_enter_email_placeholder = Rswift.StringResource(key: "hp_full_send_money_enter_email_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Order Complete
      ///
      /// Locales: en, es
      static let lblpartnerGoodRatings5 = Rswift.StringResource(key: "lblpartnerGoodRatings5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Order again
      ///
      /// Locales: en, es, English
      static let btn_past_order_again = Rswift.StringResource(key: "btn_past_order_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Order cancellation
      ///
      /// Locales: en, es
      static let lbl_Title = Rswift.StringResource(key: "lbl_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Order delivered
      ///
      /// Locales: en, es, English
      static let orderDeliveredTitle = Rswift.StringResource(key: "OrderDeliveredTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Order detail
      ///
      /// Locales: en, es, English
      static let lbl_Detail_Order = Rswift.StringResource(key: "lbl_Detail_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Order in progress
      ///
      /// Locales: en, es
      static let hp_title_order_in_process = Rswift.StringResource(key: "hp_title_order_in_process", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Order products
      ///
      /// Locales: en, es
      static let lbl_sch_detail_products = Rswift.StringResource(key: "lbl_sch_detail_products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Orders
      ///
      /// Locales: en, es
      static let title_Orders = Rswift.StringResource(key: "title_Orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en, es
      static let lbl_AddressBook_Other = Rswift.StringResource(key: "lbl_AddressBook_Other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Our apologies!
      ///
      /// Locales: en, es, English
      static let lbl_AddUserInfo_Our_Apologies = Rswift.StringResource(key: "lbl_AddUserInfo_Our_Apologies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: P-845678
      ///
      /// Locales: en, es, English
      static let lbl_OnTheWayRide2_P = Rswift.StringResource(key: "lbl_OnTheWayRide2_P", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: P-845678
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide2_P = Rswift.StringResource(key: "lbl_PickingRide2_P", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PAY
      ///
      /// Locales: en, es, English
      static let btn_BottomButton_Pay = Rswift.StringResource(key: "btn_BottomButton_Pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PAY INVOICE
      ///
      /// Locales: en, es
      static let pay_invoice = Rswift.StringResource(key: "pay_invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: PAYMENT METHOD
      ///
      /// Locales: en, es, English
      static let lbl_PaymentTypeHeader_Method = Rswift.StringResource(key: "lbl_PaymentTypeHeader_Method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PAYMENT METHOD
      ///
      /// Locales: en, es, English
      static let lbl_PaymentTypeSelection_Way_To_Pay = Rswift.StringResource(key: "lbl_PaymentTypeSelection_Way_To_Pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PAYMENT METHOD
      ///
      /// Locales: en, es, English
      static let lbl_Payment_Method = Rswift.StringResource(key: "lbl_Payment_Method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PAYMENT METHOD
      ///
      /// Locales: en, es, English
      static let lbl_Payments_Method = Rswift.StringResource(key: "lbl_Payments_Method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PAYMENT UPDATE
      ///
      /// Locales: en, es, English
      static let lbl_Payment_Update = Rswift.StringResource(key: "lbl_Payment_Update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PAYMENT UPDATE
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentError_Update = Rswift.StringResource(key: "lbl_ShipmentError_Update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PENDING PAYMENT
      ///
      /// Locales: en, es, English
      static let lbl_Outstanding_Account = Rswift.StringResource(key: "lbl_Outstanding_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PERFECT!
      ///
      /// Locales: en, es, English
      static let lbl_Perfect = Rswift.StringResource(key: "lbl_Perfect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: POINT A
      ///
      /// Locales: en, es
      static let lbl_FinalizeRide_PointA = Rswift.StringResource(key: "lbl_FinalizeRide_PointA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: POINT A
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentLocation_Point = Rswift.StringResource(key: "lbl_ShipmentLocation_Point", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: POINT A - BUY WITH A LIST
      ///
      /// Locales: en, es, English
      static let lbl_PointA_Purchase = Rswift.StringResource(key: "lbl_PointA_Purchase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: POINT A - ERRAND
      ///
      /// Locales: en, es, English
      static let lbl_PointA = Rswift.StringResource(key: "lbl_PointA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: POINT B
      ///
      /// Locales: en, es
      static let lbl_FinalizeRide_PointB = Rswift.StringResource(key: "lbl_FinalizeRide_PointB", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: POINT B - BUY WITH A LIST
      ///
      /// Locales: en, es, English
      static let lbl_PointB_Purchase = Rswift.StringResource(key: "lbl_PointB_Purchase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: POINT B - DELIVERY
      ///
      /// Locales: en, es, English
      static let lbl_PointB = Rswift.StringResource(key: "lbl_PointB", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: POINT B - ERRAND
      ///
      /// Locales: en, es, English
      static let lbl_PointB_Mandadito = Rswift.StringResource(key: "lbl_PointB_Mandadito", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: POINT C
      ///
      /// Locales: en, es
      static let lbl_FinalizeRide_PointC = Rswift.StringResource(key: "lbl_FinalizeRide_PointC", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: POINT C
      ///
      /// Locales: en, es
      static let lbl_FinalizeRide_QualificationMSg = Rswift.StringResource(key: "lbl_FinalizeRide_QualificationMSg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: POINT C - DELIVERY
      ///
      /// Locales: en, es, English
      static let lbl_PointC = Rswift.StringResource(key: "lbl_PointC", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PPlease confirm the list of products that we will buy for you today:
      ///
      /// Locales: en, es, English
      static let lbl_AddressInit_Comnfirm_List = Rswift.StringResource(key: "lbl_AddressInit_Comnfirm_List", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PREDETERMINED
      ///
      /// Locales: en, es, English
      static let lbl_CreditCard_Predeterminado = Rswift.StringResource(key: "lbl_CreditCard_Predeterminado", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PREFERENCE
      ///
      /// Locales: en, es, English
      static let lbl_Preference = Rswift.StringResource(key: "lbl_Preference", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PRIZES
      ///
      /// Locales: en, es, English
      static let lbl_StatusProfile_Awards = Rswift.StringResource(key: "lbl_StatusProfile_Awards", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PROCEED
      ///
      /// Locales: en, es
      static let process = Rswift.StringResource(key: "Process", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: PROCESS MY ORDER
      ///
      /// Locales: en, es
      static let lbl_Process_Order_Upper = Rswift.StringResource(key: "lbl_Process_Order_Upper", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: PROCESS MY ORDER
      ///
      /// Locales: en, es, English
      static let lbl_Process_Order = Rswift.StringResource(key: "lbl_Process_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PROCESS ORDER
      ///
      /// Locales: en, es, English
      static let btn_OrderSummary_Process_Order = Rswift.StringResource(key: "btn_OrderSummary_Process_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PROCESS ORDER
      ///
      /// Locales: en, es, English
      static let btn_ProcessOrder_Precess_Order = Rswift.StringResource(key: "btn_ProcessOrder_Precess_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: PRODUCT AVAILABLE
      ///
      /// Locales: en, es
      static let lbl_OrderSummary_Header_Product = Rswift.StringResource(key: "lbl_OrderSummary_Header_Product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: PRODUCT NOT AVAILABLE
      ///
      /// Locales: en, es
      static let lbl_OrderSummary_Header_Variation_Supermarket = Rswift.StringResource(key: "lbl_OrderSummary_Header_Variation_Supermarket", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: PRODUCT NOT AVAILABLE IN BRANCH
      ///
      /// Locales: en, es
      static let lbl_OrderSummary_Header_Variation = Rswift.StringResource(key: "lbl_OrderSummary_Header_Variation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: PROFILE
      ///
      /// Locales: en, es, English
      static let lbl_Profile = Rswift.StringResource(key: "lbl_Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Packaging
      ///
      /// Locales: en, es
      static let lblpartnerBadRatings2 = Rswift.StringResource(key: "lblpartnerBadRatings2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Packaging
      ///
      /// Locales: en, es
      static let lblpartnerGoodRatings3 = Rswift.StringResource(key: "lblpartnerGoodRatings3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Packing
      ///
      /// Locales: en, es
      static let lblhugoGoodRatings6 = Rswift.StringResource(key: "lblhugoGoodRatings6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Parque Centenario
      ///
      /// Locales: en, es, English
      static let lbl_RouteNav_Address = Rswift.StringResource(key: "lbl_RouteNav_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Parque Maquilishuat
      ///
      /// Locales: en, es, English
      static let lbl_SearchNewAddress_Address = Rswift.StringResource(key: "lbl_SearchNewAddress_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Partner name
      ///
      /// Locales: en, es, English
      static let lbl_ProductsByCategory_Products = Rswift.StringResource(key: "lbl_ProductsByCategory_Products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Password required
      ///
      /// Locales: en, es
      static let password_Require = Rswift.StringResource(key: "Password_Require", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Passwords do not match.
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_DonT_Match = Rswift.StringResource(key: "lbl_CreatePassword_Don't_Match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay
      ///
      /// Locales: en, es
      static let hp_lbl_qr_payment_to_pay = Rswift.StringResource(key: "hp_lbl_qr_payment_to_pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay in Pago Móvil
      ///
      /// Locales: en, es
      static let lbl_PagoMovil_Payments = Rswift.StringResource(key: "lbl_PagoMovil_Payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay in Paypal
      ///
      /// Locales: en, es
      static let lbl_Paypal_Payments = Rswift.StringResource(key: "lbl_Paypal_Payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay in Pipol Pay
      ///
      /// Locales: en, es
      static let lbl_Pipol_Payments = Rswift.StringResource(key: "lbl_Pipol_Payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay in Reserve
      ///
      /// Locales: en, es
      static let lbl_Reserve_Payments = Rswift.StringResource(key: "lbl_Reserve_Payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay in Venmo
      ///
      /// Locales: en, es
      static let lbl_Venmo_Payments = Rswift.StringResource(key: "lbl_Venmo_Payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay in Zelle
      ///
      /// Locales: en, es
      static let lbl_Zelle_Payments = Rswift.StringResource(key: "lbl_Zelle_Payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay in cash
      ///
      /// Locales: en, es, English
      static let lbl_Cash_Payments = Rswift.StringResource(key: "lbl_Cash_Payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Pay with your card
      ///
      /// Locales: en, es, English
      static let lbl_Payment_By_Card = Rswift.StringResource(key: "lbl_Payment_By_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Paying from
      ///
      /// Locales: en, es, English
      static let playing_for = Rswift.StringResource(key: "Playing_for", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Payment
      ///
      /// Locales: en, es
      static let lblhugoBadRatings4 = Rswift.StringResource(key: "lblhugoBadRatings4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Payment Methods
      ///
      /// Locales: en, es, English
      static let payments_Method = Rswift.StringResource(key: "Payments_Method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Payment of commerce
      ///
      /// Locales: en, es
      static let hp_lbl_qr_payment_commerce = Rswift.StringResource(key: "hp_lbl_qr_payment_commerce", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Payment type
      ///
      /// Locales: en, es, English
      static let paymentRequiredWarningTitle = Rswift.StringResource(key: "PaymentRequiredWarningTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Pending balance
      ///
      /// Locales: en, es, English
      static let lbl_StatusProfile_OustStanding_balance = Rswift.StringResource(key: "lbl_StatusProfile_OustStanding_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Pending orders
      ///
      /// Locales: en, es, English
      static let lbl_pending_order_title = Rswift.StringResource(key: "lbl_pending_order_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Perfect!
      ///
      /// Locales: en, es, English
      static let lbl_CustomCall_Perfect = Rswift.StringResource(key: "lbl_CustomCall_Perfect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Perfect!
      ///
      /// Locales: en, es, English
      static let lbl_OrderFinished_Perfect = Rswift.StringResource(key: "lbl_OrderFinished_Perfect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Perfect!
      ///
      /// Locales: en, es, English
      static let lbl_UpdatePassword_Help = Rswift.StringResource(key: "lbl_UpdatePassword_Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Permissions
      ///
      /// Locales: en, es
      static let permission_Text = Rswift.StringResource(key: "permission_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, es, English
      static let txt_TopUpAdd_Enter_Number = Rswift.StringResource(key: "txt_TopUpAdd_Enter_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Pick up at location
      ///
      /// Locales: en, es
      static let lbl_Sort_TakeOut = Rswift.StringResource(key: "lbl_Sort_TakeOut", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pickup address
      ///
      /// Locales: en, es
      static let pickup_Address = Rswift.StringResource(key: "Pickup_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Place of delivery (B)
      ///
      /// Locales: en, es, English
      static let lbl_Place_Delivery = Rswift.StringResource(key: "lbl_Place_Delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Place of start
      ///
      /// Locales: en, es, English
      static let txt_SearchAddressShipment_Starting_place = Rswift.StringResource(key: "txt_SearchAddressShipment_Starting_place", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Place to collect (A)
      ///
      /// Locales: en, es, English
      static let lbl_PaymentLocation_Pickup_Location = Rswift.StringResource(key: "lbl_PaymentLocation_Pickup_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Platform
      ///
      /// Locales: en, es
      static let lblhugoGoodRatings4 = Rswift.StringResource(key: "lblhugoGoodRatings4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Platform
      ///
      /// Locales: en, es
      static let lblhugoNamRatingDelivery = Rswift.StringResource(key: "lblhugoNamRatingDelivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Platform
      ///
      /// Locales: en, es, English
      static let lbl_RatingHeader_Platform = Rswift.StringResource(key: "lbl_RatingHeader_Platform", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Please allow access to the camera to scan the credit card
      ///
      /// Locales: en, es, English
      static let accessToCameraExplanation2 = Rswift.StringResource(key: "AccessToCameraExplanation2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Please complete the following information
      ///
      /// Locales: en, es
      static let lbl_Step3_Info_Finish = Rswift.StringResource(key: "lbl_Step3_Info_Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please enter a valid amount for the change
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_Valid_QTY = Rswift.StringResource(key: "alert_ProcessOrder_Valid_QTY", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please enter a valid amount for the change.
      ///
      /// Locales: en, English
      static let valid_Amount = Rswift.StringResource(key: "Valid_Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Please enter the code you want to use.
      ///
      /// Locales: en, es, English
      static let enter_Code = Rswift.StringResource(key: "Enter_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Please input your temporary code
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_title = Rswift.StringResource(key: "hp_full_reset_pin_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please make sure the fields are not empty
      ///
      /// Locales: en, es, English
      static let reqiured_Msg = Rswift.StringResource(key: "Reqiured_Msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Please rate your experience
      ///
      /// Locales: en, es
      static let lbl_FinalizeGoodRating_Subtitle = Rswift.StringResource(key: "lbl_FinalizeGoodRating_Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please select a date and time to schedule the order
      ///
      /// Locales: en, es
      static let alert_sch_selectdate = Rswift.StringResource(key: "alert_sch_selectdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please select one of our options
      ///
      /// Locales: en, es, English
      static let lbl_Please_Select_One = Rswift.StringResource(key: "lbl_Please_Select_One", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Please select the area where you are.
      ///
      /// Locales: en, es, English
      static let lbl_Territory_Area_Selcet = Rswift.StringResource(key: "lbl_Territory_Area_Selcet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Please select the subject of your request.
      ///
      /// Locales: en, es, English
      static let lbl_CallRequest_Select_Subject = Rswift.StringResource(key: "lbl_CallRequest_Select_Subject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Please wait
      ///
      /// Locales: en, es, English
      static let please_Wait = Rswift.StringResource(key: "Please_Wait", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Points of participating banks were consulted
      ///
      /// Locales: en, es
      static let point_bank = Rswift.StringResource(key: "Point_bank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Portion
      ///
      /// Locales: en, es
      static let lblpartnerBadRatings4 = Rswift.StringResource(key: "lblpartnerBadRatings4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Portion
      ///
      /// Locales: en, es
      static let lblpartnerGoodRatings2 = Rswift.StringResource(key: "lblpartnerGoodRatings2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Preferences
      ///
      /// Locales: en, es, English
      static let lbl_ProfileOptions_Preferences = Rswift.StringResource(key: "lbl_ProfileOptions_Preferences", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Preferences
      ///
      /// Locales: en, es, English
      static let preferences = Rswift.StringResource(key: "Preferences", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Preparing search…
      ///
      /// Locales: en, es, English
      static let lbl_Preparing_Search = Rswift.StringResource(key: "lbl_Preparing_Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Presentation
      ///
      /// Locales: en, es
      static let lbldriverGoodRatings4 = Rswift.StringResource(key: "lbldriverGoodRatings4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Price
      ///
      /// Locales: en, es
      static let lblpartnerGoodRatings4 = Rswift.StringResource(key: "lblpartnerGoodRatings4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Price
      ///
      /// Locales: en, es, English
      static let lbl_Sort_Price = Rswift.StringResource(key: "lbl_Sort_Price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Privacy and Security Policy
      ///
      /// Locales: en, es, English
      static let policy_Security = Rswift.StringResource(key: "Policy_Security", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Prizes
      ///
      /// Locales: en, es
      static let ct_prizes_tag = Rswift.StringResource(key: "ct_prizes_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Prizes
      ///
      /// Locales: en, es, English
      static let lbl_Promos_Awards = Rswift.StringResource(key: "lbl_Promos_Awards", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Process order
      ///
      /// Locales: en, es, English
      static let tokenLoadNewOrderTitle = Rswift.StringResource(key: "tokenLoadNewOrderTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Product
      ///
      /// Locales: en, es
      static let lbl_Title_Type_Product = Rswift.StringResource(key: "lbl_Title_Type_Product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Product Handling
      ///
      /// Locales: en, es
      static let lbldriverBadRatings4 = Rswift.StringResource(key: "lbldriverBadRatings4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Product name
      ///
      /// Locales: en, es, English
      static let lbl_OrderSummary_Product_Name = Rswift.StringResource(key: "lbl_OrderSummary_Product_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Product name
      ///
      /// Locales: en, es, English
      static let lbl_ProductDetail_Product_Name = Rswift.StringResource(key: "lbl_ProductDetail_Product_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Product not avilable
      ///
      /// Locales: en, es, English
      static let productNotAvailableTitle = Rswift.StringResource(key: "ProductNotAvailableTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Profile saved
      ///
      /// Locales: en, es, English
      static let profileSaved = Rswift.StringResource(key: "ProfileSaved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Progress of your profile
      ///
      /// Locales: en, es, English
      static let progress_Profile = Rswift.StringResource(key: "Progress_Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Progress of your profile (2 out of 5)
      ///
      /// Locales: en, es, English
      static let lbl_InfoUser_Progress = Rswift.StringResource(key: "lbl_InfoUser_Progress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Promotional code
      ///
      /// Locales: en, es, English
      static let promotional_Code = Rswift.StringResource(key: "Promotional_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Promotions
      ///
      /// Locales: en, es
      static let ct_promos_tag = Rswift.StringResource(key: "ct_promos_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Promotions
      ///
      /// Locales: en, es
      static let lbl_Promo_Cell = Rswift.StringResource(key: "lbl_Promo_Cell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Qualification
      ///
      /// Locales: en, es, English
      static let lbl_Sort_Callsification = Rswift.StringResource(key: "lbl_Sort_Callsification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Qualification required
      ///
      /// Locales: en, es
      static let lbl_FinalizeGoodRating_Title = Rswift.StringResource(key: "lbl_FinalizeGoodRating_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Qualification required 
      ///
      /// Locales: en, es
      static let lbl_FinalizeRide_QualificationTitle = Rswift.StringResource(key: "lbl_FinalizeRide_QualificationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Quality
      ///
      /// Locales: en, es
      static let lblpartnerBadRatings1 = Rswift.StringResource(key: "lblpartnerBadRatings1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Quality
      ///
      /// Locales: en, es
      static let lblpartnerGoodRatings1 = Rswift.StringResource(key: "lblpartnerGoodRatings1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Quantity
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_quantity = Rswift.StringResource(key: "hp_lbl_transaction_filter_quantity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Quantity to request
      ///
      /// Locales: en, es
      static let hp_lbl_qr_payment_qty_request = Rswift.StringResource(key: "hp_lbl_qr_payment_qty_request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: R (max 12)
      ///
      /// Locales: en, es, English
      static let lbl_Option_R = Rswift.StringResource(key: "lbl_Option_R", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: RB
      ///
      /// Locales: en, es, English
      static let lbl_InfoUser_Inatial = Rswift.StringResource(key: "lbl_InfoUser_Inatial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: READY
      ///
      /// Locales: en, es, English
      static let btn_ConfirmationBottom_Ready = Rswift.StringResource(key: "btn_ConfirmationBottom_Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: READY
      ///
      /// Locales: en, es, English
      static let btn_PlaceMarker_Ready = Rswift.StringResource(key: "btn_PlaceMarker_Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: READY
      ///
      /// Locales: en, es, English
      static let lbl_Ready = Rswift.StringResource(key: "lbl_Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: RECENT TRIPS
      ///
      /// Locales: en, es
      static let recent_Trip = Rswift.StringResource(key: "Recent_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: RECENT TRIPS
      ///
      /// Locales: en, es, English
      static let lbl_Recent_Tips = Rswift.StringResource(key: "lbl_Recent_Tips", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: RECENT TRIPS
      ///
      /// Locales: en, es, English
      static let lbl_Recent_trip = Rswift.StringResource(key: "lbl_Recent_trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: RECENTS
      ///
      /// Locales: en, es
      static let lbl_service_recent = Rswift.StringResource(key: "lbl_service_recent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: RECOVER ACCOUNT
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_locked_account_recover_button = Rswift.StringResource(key: "hp_full_reset_pin_locked_account_recover_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: RECOVER PASSWORD
      ///
      /// Locales: en, es
      static let btn_ChanelRecover_Recover = Rswift.StringResource(key: "btn_ChanelRecover_Recover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: RECOVER PASSWORD
      ///
      /// Locales: en, es
      static let lbl_Step2_Recover_Password = Rswift.StringResource(key: "lbl_Step2_Recover_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: REMEMBER LATER
      ///
      /// Locales: en, es, English
      static let btn_ConfirmOutstanding_Remember_Later = Rswift.StringResource(key: "btn_ConfirmOutstanding_Remember_Later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: REQUEST HELP WITH THIS ORDER
      ///
      /// Locales: en, es, English
      static let btn_past_order_request_help = Rswift.StringResource(key: "btn_past_order_request_help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: REQUEST SENT
      ///
      /// Locales: en, es, English
      static let lbl_OrderFinished_Request_Sent = Rswift.StringResource(key: "lbl_OrderFinished_Request_Sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: REQUEST VEHICLE
      ///
      /// Locales: en, es, English
      static let lbl_Type_Request_Vehicle = Rswift.StringResource(key: "lbl_Type_Request_Vehicle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: RESEND
      ///
      /// Locales: en, es, English
      static let btn_ValidateRecoverCode_ReSend = Rswift.StringResource(key: "btn_ValidateRecoverCode_ReSend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: RESEND CODE
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_resend_code = Rswift.StringResource(key: "hp_full_reset_pin_resend_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: RESEND SMS.
      ///
      /// Locales: en, es, English
      static let btn_ValidatePhone_Forward_Sms = Rswift.StringResource(key: "btn_ValidatePhone_Forward_Sms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: RESULTS
      ///
      /// Locales: en, es
      static let lbl_Title_Search_Result = Rswift.StringResource(key: "lbl_Title_Search_Result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: RETRY
      ///
      /// Locales: en, es, English
      static let retry = Rswift.StringResource(key: "Retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: REWARD TO
      ///
      /// Locales: en, es, English
      static let btn_FinalizeGoodRating_Reward_To = Rswift.StringResource(key: "btn_FinalizeGoodRating_Reward_To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: RIGHT
      ///
      /// Locales: en, es
      static let lbl_NewLogin_Right = Rswift.StringResource(key: "lbl_NewLogin_Right", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: RIGHT
      ///
      /// Locales: en, es, English
      static let btn_Right = Rswift.StringResource(key: "btn_Right", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ROUTE
      ///
      /// Locales: en, es, English
      static let lbl_Route = Rswift.StringResource(key: "lbl_Route", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Rating
      ///
      /// Locales: en, es
      static let partner_header_rating_title = Rswift.StringResource(key: "partner_header_rating_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Raúl
      ///
      /// Locales: en, es, English
      static let lbl_DriverDetail_Name = Rswift.StringResource(key: "lbl_DriverDetail_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Re: problems with my app
      ///
      /// Locales: en, es, English
      static let lbl_HelpZendesk_Problem = Rswift.StringResource(key: "lbl_HelpZendesk_Problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Ready
      ///
      /// Locales: en, English
      static let lbl_Search_GpsLocation_Ready = Rswift.StringResource(key: "lbl_Search_GpsLocation_Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Ready
      ///
      /// Locales: en, es, English
      static let listoLabel = Rswift.StringResource(key: "ListoLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Ready! In a few moments we will call you on the registered phone number
      ///
      /// Locales: en, es, English
      static let helpRequested = Rswift.StringResource(key: "helpRequested", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Receive code by SMS
      ///
      /// Locales: en, es
      static let lbl_step1_send_sms = Rswift.StringResource(key: "lbl_step1_send_sms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Receive code by WhatsApp
      ///
      /// Locales: en, es
      static let lbl_step1_send_whatsapp = Rswift.StringResource(key: "lbl_step1_send_whatsapp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recent
      ///
      /// Locales: en, es
      static let lbl_Title_Type_Recent = Rswift.StringResource(key: "lbl_Title_Type_Recent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recharge total
      ///
      /// Locales: en, es, English
      static let lbl_TopUpCheckout_Total_Rechage = Rswift.StringResource(key: "lbl_TopUpCheckout_Total_Rechage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Recidencial Miramar, Poligono C, Casa #137
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide2_Job_Address = Rswift.StringResource(key: "lbl_PickingRide2_Job_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Recidencial Miramar, Poligono C, Casa #137 #56789
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide2_Address = Rswift.StringResource(key: "lbl_PickingRide2_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Recidencial Miramar, Poligono C, Casa #137 #56789
      ///
      /// Locales: en, es, English
      static let lbl_RouteItem_Address = Rswift.StringResource(key: "lbl_RouteItem_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Recommended Shops
      ///
      /// Locales: en, es, English
      static let lbl_SearchTable_Shop = Rswift.StringResource(key: "lbl_SearchTable_Shop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Recommended options
      ///
      /// Locales: en, es, English
      static let lbl_SearchTable_Option = Rswift.StringResource(key: "lbl_SearchTable_Option", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Redeem code
      ///
      /// Locales: en, es, English
      static let redeemLabel = Rswift.StringResource(key: "RedeemLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Reference identifier
      ///
      /// Locales: en, es, English
      static let lbl_BillPayService_Reference_Identifi = Rswift.StringResource(key: "lbl_BillPayService_Reference_Identifi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Reference identifier
      ///
      /// Locales: en, es, English
      static let lbl_PayServiceDetailHistory_Identifier = Rswift.StringResource(key: "lbl_PayServiceDetailHistory_Identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Reference number
      ///
      /// Locales: en, es, English
      static let lbl_Reference_Number = Rswift.StringResource(key: "lbl_Reference_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Reference number
      ///
      /// Locales: en, es, English
      static let lbl_TopUpDetailHistory_Refence_Number = Rswift.StringResource(key: "lbl_TopUpDetailHistory_Refence_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Reference point
      ///
      /// Locales: en, es
      static let lbl_AddressBook_Reference_Point = Rswift.StringResource(key: "lbl_AddressBook_Reference_Point", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Reference:
      ///
      /// Locales: en, es
      static let lbl_AddressBook_Reference = Rswift.StringResource(key: "lbl_AddressBook_Reference", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Refund Policies
      ///
      /// Locales: en, es, English
      static let refund_policy = Rswift.StringResource(key: "Refund_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Refund to the card
      ///
      /// Locales: en, es
      static let lbl_Program = Rswift.StringResource(key: "lbl_Program", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Refuse
      ///
      /// Locales: en, es
      static let hp_lbl_qr_payment_to_refuse = Rswift.StringResource(key: "hp_lbl_qr_payment_to_refuse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Remember any change required in cash will be given in Yummy Credits within the wallet of your profile for future orders. You can obtain your credit by messaging us on the Chat within the app once you recive your order. Remember to give us your order number.
      ///
      /// Locales: en, es
      static let lbl_Alert_Cash = Rswift.StringResource(key: "lbl_Alert_Cash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Remember that you'll receive in this email the invoice of each purchase in Hugo.
      ///
      /// Locales: en, es, English
      static let lbl_ValidateEmail_Remember_Text = Rswift.StringResource(key: "lbl_ValidateEmail_Remember_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Remove
      ///
      /// Locales: en, es, English
      static let actionDeleteLabel = Rswift.StringResource(key: "ActionDeleteLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Remove Product
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_remove_product_title = Rswift.StringResource(key: "alert_ProcessOrder_remove_product_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Request a call
      ///
      /// Locales: en, es, English
      static let request_Call = Rswift.StringResource(key: "Request_Call", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Request for help
      ///
      /// Locales: en, es
      static let request_Help = Rswift.StringResource(key: "request_Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Required
      ///
      /// Locales: en, es
      static let hp_CashInMoneyIncome_AmountRequired = Rswift.StringResource(key: "hp_CashInMoneyIncome_AmountRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Required
      ///
      /// Locales: en, es, English
      static let lbl_EmailInfo_requiretext = Rswift.StringResource(key: "lbl_EmailInfo_requiretext", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Required Options
      ///
      /// Locales: en, es, English
      static let orderRequiredOptionsTitle = Rswift.StringResource(key: "OrderRequiredOptionsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Required field
      ///
      /// Locales: en, es
      static let required_fields = Rswift.StringResource(key: "Required_fields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Required field
      ///
      /// Locales: en, es, English
      static let required_Fields = Rswift.StringResource(key: "Required_Fields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Required fields
      ///
      /// Locales: en, es, English
      static let reqiured_Field = Rswift.StringResource(key: "Reqiured_Field", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Required pending fields
      ///
      /// Locales: en, es
      static let reqiure_Field_Pending = Rswift.StringResource(key: "Reqiure_Field_Pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Residencial Miramar, Poligono G, casa #137
      ///
      /// Locales: en, es, English
      static let lbl_RideSummaryArriving_Address = Rswift.StringResource(key: "lbl_RideSummaryArriving_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Restaurant Mata 
      ///
      /// Locales: en, es, English
      static let lbl_PartnerProduct_Restaurant = Rswift.StringResource(key: "lbl_PartnerProduct_Restaurant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Reward your Hugo
      ///
      /// Locales: en, es, English
      static let lbl_Reward_Hugo = Rswift.StringResource(key: "lbl_Reward_Hugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Reward your driver.
      ///
      /// Locales: en, es, English
      static let lbl_DriverTip_Reward_Driver = Rswift.StringResource(key: "lbl_DriverTip_Reward_Driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Reward your driver.
      ///
      /// Locales: en, es, English
      static let lbl_RatingTip_Reward = Rswift.StringResource(key: "lbl_RatingTip_Reward", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Roberto Centeno
      ///
      /// Locales: en, es, English
      static let lbl_RatingView_Driver_Name = Rswift.StringResource(key: "lbl_RatingView_Driver_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Roberto Centeno
      ///
      /// Locales: en, es, English
      static let lbl_driver_name = Rswift.StringResource(key: "lbl_driver_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Rodrigo Antonio Bazan
      ///
      /// Locales: en, es, English
      static let lbl_CreditCard_Bazan = Rswift.StringResource(key: "lbl_CreditCard_Bazan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Round trip
      ///
      /// Locales: en, es, English
      static let btn_AddressInit_Round_Trip = Rswift.StringResource(key: "btn_AddressInit_Round_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Round trip
      ///
      /// Locales: en, es, English
      static let lbl_Round_Trip = Rswift.StringResource(key: "lbl_Round_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Route update!
      ///
      /// Locales: en, es, English
      static let lbl_ChangeDestination_Route_Update = Rswift.StringResource(key: "lbl_ChangeDestination_Route_Update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SAVE
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Save = Rswift.StringResource(key: "lbl_CreatePassword_Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SAVE
      ///
      /// Locales: en, es
      static let receipt_configuration_create_button_title = Rswift.StringResource(key: "receipt_configuration_create_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SAVE
      ///
      /// Locales: en, es, English
      static let btn_AddUserInfo_save = Rswift.StringResource(key: "btn_AddUserInfo_save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SAVE
      ///
      /// Locales: en, es, English
      static let btn_BasicInfo_save = Rswift.StringResource(key: "btn_BasicInfo_save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SAVE
      ///
      /// Locales: en, es, English
      static let btn_EmailInfo_save = Rswift.StringResource(key: "btn_EmailInfo_save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SAVE
      ///
      /// Locales: en, es, English
      static let btn_Preferences_Save = Rswift.StringResource(key: "btn_Preferences_Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SAVE CHANGES
      ///
      /// Locales: en, es, English
      static let save_Changes = Rswift.StringResource(key: "Save_Changes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SAVE PASSWORD.
      ///
      /// Locales: en, es, English
      static let btn_CreateFBPassword_Save = Rswift.StringResource(key: "btn_CreateFBPassword_Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SAVE PASSWORD.
      ///
      /// Locales: en, es, English
      static let btn_UpdatePassword_Save_Password = Rswift.StringResource(key: "btn_UpdatePassword_Save_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SCHEDULE
      ///
      /// Locales: en, es, English
      static let lbl_PartnerProduct_Schedule = Rswift.StringResource(key: "lbl_PartnerProduct_Schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SCHEDULED
      ///
      /// Locales: en, es
      static let lbl_Schedule_orders = Rswift.StringResource(key: "lbl_Schedule_orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SCHEDULED ORDER
      ///
      /// Locales: en, es
      static let lbl_sch_detail_sch_order = Rswift.StringResource(key: "lbl_sch_detail_sch_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SEARCH
      ///
      /// Locales: en, es
      static let lbl_Title_Search = Rswift.StringResource(key: "lbl_Title_Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SEARCH ADDRESS
      ///
      /// Locales: en, es, English
      static let lbl_Search_address = Rswift.StringResource(key: "lbl_Search_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SEARCH RESULTS
      ///
      /// Locales: en, es
      static let search_result = Rswift.StringResource(key: "Search_result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SECURITY
      ///
      /// Locales: en, es, English
      static let lbl_Preferences_Security = Rswift.StringResource(key: "lbl_Preferences_Security", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SECURITY
      ///
      /// Locales: en, es, English
      static let lbl_Security = Rswift.StringResource(key: "lbl_Security", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SEE ALL
      ///
      /// Locales: en, es
      static let lbl_see_all_services = Rswift.StringResource(key: "lbl_see_all_services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SEE MY ORDER
      ///
      /// Locales: en, es, English
      static let lbl_ProductView_ViewOrder = Rswift.StringResource(key: "lbl_ProductView_ViewOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SEE MY ORDER
      ///
      /// Locales: en, es, English
      static let lbl_ProductsByCategory_ViewOrder = Rswift.StringResource(key: "lbl_ProductsByCategory_ViewOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SEE MY ORDER STATUS.
      ///
      /// Locales: en, es, English
      static let btn_OrderFinished_See_Status_MyOrder = Rswift.StringResource(key: "btn_OrderFinished_See_Status_MyOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SEE SHOPS
      ///
      /// Locales: en, es
      static let see_Ubication_Shop = Rswift.StringResource(key: "See_Ubication_Shop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SEE TRIP
      ///
      /// Locales: en, es, English
      static let btn_ConfirmOutstanding_See_Trip = Rswift.StringResource(key: "btn_ConfirmOutstanding_See_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SELECT
      ///
      /// Locales: en, es
      static let selectSucursalButtonSelect = Rswift.StringResource(key: "SelectSucursalButtonSelect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SELECT A COUNTRY!
      ///
      /// Locales: en, es
      static let select_Country = Rswift.StringResource(key: "select_Country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SELECT A TERRITORY
      ///
      /// Locales: en, es, English
      static let lbl_Select_Territo = Rswift.StringResource(key: "lbl_Select_Territo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SELECT DESTINATION
      ///
      /// Locales: en, es
      static let select_Destination = Rswift.StringResource(key: "Select_Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SELECT ORIGIN
      ///
      /// Locales: en, es
      static let select_Origin = Rswift.StringResource(key: "Select_Origin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SEND
      ///
      /// Locales: en, es, English
      static let btn_CoverAlert_Submit = Rswift.StringResource(key: "btn_CoverAlert_Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SEND
      ///
      /// Locales: en, es, English
      static let btn_FinalizeBad_Submit = Rswift.StringResource(key: "btn_FinalizeBad_Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SEND CODE
      ///
      /// Locales: en, es
      static let btn_ChanelRecover_Send_Code = Rswift.StringResource(key: "btn_ChanelRecover_Send_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SEND CODE
      ///
      /// Locales: en, es, English
      static let btn_ChooseRecover_Recover = Rswift.StringResource(key: "btn_ChooseRecover_Recover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SEND COMMENT
      ///
      /// Locales: en, es, English
      static let btn_BottomBadRating_Send_Comment = Rswift.StringResource(key: "btn_BottomBadRating_Send_Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SEND IT!
      ///
      /// Locales: en, es
      static let lbl_Send_It = Rswift.StringResource(key: "lbl_Send_It", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SEND VALIDATION
      ///
      /// Locales: en, es, English
      static let btn_ValidateEmail_Email_validation = Rswift.StringResource(key: "btn_ValidateEmail_Email_validation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SERVICES
      ///
      /// Locales: en, es, English
      static let lbl_Service = Rswift.StringResource(key: "lbl_Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SET
      ///
      /// Locales: en, es, English
      static let btn_ConfirmationBottom_Pin_Up = Rswift.StringResource(key: "btn_ConfirmationBottom_Pin_Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SET
      ///
      /// Locales: en, es, English
      static let btn_MyLocation = Rswift.StringResource(key: "btn_MyLocation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SET ANOTHER DELIVERY POINT
      ///
      /// Locales: en, es, English
      static let btn_CoverAlert_Another_Shipping = Rswift.StringResource(key: "btn_CoverAlert_Another_Shipping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SET UP ERRADS
      ///
      /// Locales: en, es, English
      static let lbl_Request_Mandadito = Rswift.StringResource(key: "lbl_Request_Mandadito", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SHARE MY ADDRESS
      ///
      /// Locales: en, es
      static let share_My_Address = Rswift.StringResource(key: "Share_My_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SHOPPING CART
      ///
      /// Locales: en, es, English
      static let lbl_ProcessOrder_Nav = Rswift.StringResource(key: "lbl_ProcessOrder_Nav", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SIGN UP
      ///
      /// Locales: en, es
      static let btn_WelcomeSignup_free = Rswift.StringResource(key: "btn_WelcomeSignup_free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SOON
      ///
      /// Locales: en, es, English
      static let comingTitle = Rswift.StringResource(key: "ComingTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SOON IN HUGO!
      ///
      /// Locales: en, es, English
      static let lbl_soon_in_hugo = Rswift.StringResource(key: "lbl_soon_in_hugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: START
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Start = Rswift.StringResource(key: "lbl_WhatIsHugo_Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: START
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Start_Text = Rswift.StringResource(key: "lbl_WhatIsHugo_Start_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: START
      ///
      /// Locales: en, es, English
      static let lbl_Start = Rswift.StringResource(key: "lbl_Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: STOP
      ///
      /// Locales: en, es, English
      static let lbl_Stop = Rswift.StringResource(key: "lbl_Stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: SUBMIT
      ///
      /// Locales: en, es
      static let lbl_Step3_Following = Rswift.StringResource(key: "lbl_Step3_Following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SUMMARY
      ///
      /// Locales: en, es
      static let hp_CashinTransactionDetailViewController_Title = Rswift.StringResource(key: "hp_CashinTransactionDetailViewController_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SUMMARY
      ///
      /// Locales: en, es, English
      static let lbl_Summary = Rswift.StringResource(key: "lbl_Summary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sample description
      ///
      /// Locales: en, es, English
      static let lbl_description = Rswift.StringResource(key: "lbl_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sample description
      ///
      /// Locales: en, es, English
      static let txt_CustomPage_Sample_Description = Rswift.StringResource(key: "txt_CustomPage_Sample_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sample title
      ///
      /// Locales: en, es, English
      static let lbl_CustomPage_Sample_Title = Rswift.StringResource(key: "lbl_CustomPage_Sample_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sample title
      ///
      /// Locales: en, es, English
      static let lbl_sample_title = Rswift.StringResource(key: "lbl_sample_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: San Salvador
      ///
      /// Locales: en, es, English
      static let lbl_TerritoryHugo_Name = Rswift.StringResource(key: "lbl_TerritoryHugo_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: San Salvador, El Salvador
      ///
      /// Locales: en, es, English
      static let lbl_CustomAddress_Address = Rswift.StringResource(key: "lbl_CustomAddress_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: San Salvador, Municipality of San Salvador
      ///
      /// Locales: en, es, English
      static let lbl_CustomAddress_Title = Rswift.StringResource(key: "lbl_CustomAddress_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Saturated Trade 😢
      ///
      /// Locales: en, es, English
      static let saturatedPartnerTitle = Rswift.StringResource(key: "SaturatedPartnerTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Saturation
      ///
      /// Locales: en, es, English
      static let generalSaturatedTitle = Rswift.StringResource(key: "GeneralSaturatedTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Save as
      ///
      /// Locales: en, es, English
      static let lbl_ChooseAddress_Save_As = Rswift.StringResource(key: "lbl_ChooseAddress_Save_As", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Say hello to your new personal driver!
      ///
      /// Locales: en, es, English
      static let lbl_say_hello_yo_driver = Rswift.StringResource(key: "lbl_say_hello_yo_driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Say hi to your new personal driver!
      ///
      /// Locales: en, es, English
      static let lbl_InvitationCode_New_Driver = Rswift.StringResource(key: "lbl_InvitationCode_New_Driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Schedule
      ///
      /// Locales: en, es
      static let partner_header_schedule_title = Rswift.StringResource(key: "partner_header_schedule_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Schedule a date and time for your order
      ///
      /// Locales: en, es
      static let lbl_sch_alert_title = Rswift.StringResource(key: "lbl_sch_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Schedule order
      ///
      /// Locales: en, es
      static let lbl_Sort_Schedule = Rswift.StringResource(key: "lbl_Sort_Schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Scheduled orders only
      ///
      /// Locales: en, es
      static let lbl_title_onlyschedule = Rswift.StringResource(key: "lbl_title_onlyschedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, es, English
      static let lbl_Main_SearchFor = Rswift.StringResource(key: "lbl_Main_SearchFor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Search destination
      ///
      /// Locales: en, es
      static let search_Destination = Rswift.StringResource(key: "Search_Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Search for
      ///
      /// Locales: en, es, English
      static let searchLabelPlaceholder = Rswift.StringResource(key: "searchLabelPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Search for a store or label
      ///
      /// Locales: en, es, English
      static let search_Placeholder = Rswift.StringResource(key: "Search_Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Search in 
      ///
      /// Locales: en, es
      static let partner_header_search_in = Rswift.StringResource(key: "partner_header_search_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Search origin
      ///
      /// Locales: en, es
      static let search_Origin = Rswift.StringResource(key: "Search_Origin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Search your destiny.
      ///
      /// Locales: en, English
      static let lbl_WelcomeMaps_destiny = Rswift.StringResource(key: "lbl_WelcomeMaps_destiny", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Search your destiny.
      ///
      /// Locales: en, es, English
      static let lbl_LookUpRide_Search_Destiny = Rswift.StringResource(key: "lbl_LookUpRide_Search_Destiny", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Searching transportation…
      ///
      /// Locales: en, es, English
      static let lbl_SearchingDriver_Transport = Rswift.StringResource(key: "lbl_SearchingDriver_Transport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Section Title
      ///
      /// Locales: en, es, English
      static let lbl_ProductView_Title = Rswift.StringResource(key: "lbl_ProductView_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Security PIN
      ///
      /// Locales: en, es, English
      static let txt_creditcard_pin = Rswift.StringResource(key: "txt_creditcard_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Security Politics
      ///
      /// Locales: en, es
      static let hp_get_security_politics = Rswift.StringResource(key: "hp_get_security_politics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Security option
      ///
      /// Locales: en, es, English
      static let security_Option = Rswift.StringResource(key: "Security_Option", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Security pin required
      ///
      /// Locales: en, es, English
      static let pinRequired = Rswift.StringResource(key: "PinRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See
      ///
      /// Locales: en, es, English
      static let viewLabel = Rswift.StringResource(key: "ViewLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See all
      ///
      /// Locales: en, es
      static let hp_notifications_view_more = Rswift.StringResource(key: "hp_notifications_view_more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: See all
      ///
      /// Locales: en, es, English
      static let btn_SearchAddress_SeE_All = Rswift.StringResource(key: "btn_SearchAddress_SeE_All", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See all >
      ///
      /// Locales: en, es, English
      static let lbl_See = Rswift.StringResource(key: "lbl_See", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See all ›
      ///
      /// Locales: en, es, English
      static let lbl_ProductTable_See_ALl = Rswift.StringResource(key: "lbl_ProductTable_See_ALl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See detail
      ///
      /// Locales: en, es, English
      static let lbl_Tracking_See_Details = Rswift.StringResource(key: "lbl_Tracking_See_Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See my order
      ///
      /// Locales: en, es, English
      static let lbl_Main_View_MyOrder = Rswift.StringResource(key: "lbl_Main_View_MyOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See my order $1
      ///
      /// Locales: en, es, English
      static let viewOrderBtnTitle = Rswift.StringResource(key: "ViewOrderBtnTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See order
      ///
      /// Locales: en, es, English
      static let goToTracking = Rswift.StringResource(key: "GoToTracking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See product list
      ///
      /// Locales: en, es, English
      static let btn_ShipmentLocation_ProductList = Rswift.StringResource(key: "btn_ShipmentLocation_ProductList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See promotions
      ///
      /// Locales: en, es, English
      static let lbl_Promos_See_Promotion = Rswift.StringResource(key: "lbl_Promos_See_Promotion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See the Privacy Policies.
      ///
      /// Locales: en, es, English
      static let lbl_creditcard_privacy_policy = Rswift.StringResource(key: "lbl_creditcard_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: See the purchase ticket.
      ///
      /// Locales: en, es, English
      static let lbl_ViewReceipts_Purchase_Ticket = Rswift.StringResource(key: "lbl_ViewReceipts_Purchase_Ticket", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Select a new security PIN
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_newpin_title = Rswift.StringResource(key: "hp_full_reset_pin_newpin_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select a payment method
      ///
      /// Locales: en, es
      static let select_Payment_Method = Rswift.StringResource(key: "Select_Payment_Method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select a territory
      ///
      /// Locales: en, es, English
      static let selectTerritoriesMessage = Rswift.StringResource(key: "SelectTerritoriesMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Select a valid payment method
      ///
      /// Locales: en, es
      static let select_Valid_Payment = Rswift.StringResource(key: "Select_Valid_Payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select all
      ///
      /// Locales: en, es
      static let hp_lbl_notificactions_select_all = Rswift.StringResource(key: "hp_lbl_notificactions_select_all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select an icon.
      ///
      /// Locales: en, es, English
      static let lbl_ChooseAddressIcon_Heading = Rswift.StringResource(key: "lbl_ChooseAddressIcon_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Select payment method
      ///
      /// Locales: en, es, English
      static let selectPaymentTypeTitle = Rswift.StringResource(key: "SelectPaymentTypeTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Select the branch
      ///
      /// Locales: en, es
      static let selectSucursalTitle = Rswift.StringResource(key: "SelectSucursalTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select your country
      ///
      /// Locales: en, es
      static let select_County = Rswift.StringResource(key: "Select_County", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select your destiny!
      ///
      /// Locales: en, es, English
      static let lbl_Select_Destination = Rswift.StringResource(key: "lbl_Select_Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, es, English
      static let btn_RatingComment_Submit = Rswift.StringResource(key: "btn_RatingComment_Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, es, English
      static let lbl_Submit = Rswift.StringResource(key: "lbl_Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Send invoice to the mail:
      ///
      /// Locales: en, es
      static let lbl_new_billing_email = Rswift.StringResource(key: "lbl_new_billing_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Send me code as SMS
      ///
      /// Locales: en, es
      static let hp_title_recovery_method_sms = Rswift.StringResource(key: "hp_title_recovery_method_sms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Send me code to my email
      ///
      /// Locales: en, es
      static let hp_title_recovery_method_email = Rswift.StringResource(key: "hp_title_recovery_method_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Send the code again
      ///
      /// Locales: en, es
      static let lbl_Step2_Send_Code_Again = Rswift.StringResource(key: "lbl_Step2_Send_Code_Again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sent
      ///
      /// Locales: en, es, English
      static let sent = Rswift.StringResource(key: "Sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Service not available
      ///
      /// Locales: en, es, English
      static let noOperationalTitle = Rswift.StringResource(key: "noOperationalTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Servicio - Tributo a Natalia…
      ///
      /// Locales: en, es, English
      static let lbl_EntertainmentOrder_Service = Rswift.StringResource(key: "lbl_EntertainmentOrder_Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Set a password
      ///
      /// Locales: en, es
      static let createPassword_Set_Password = Rswift.StringResource(key: "CreatePassword_Set_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Set the pin in the correct address.
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmationBottom_Set_Pin = Rswift.StringResource(key: "lbl_ConfirmationBottom_Set_Pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Set the pin in the exact location
      ///
      /// Locales: en, es, English
      static let lbl_Set_Pin = Rswift.StringResource(key: "lbl_Set_Pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Set the pin on the delivery address.
      ///
      /// Locales: en, es
      static let set_UbicationPin_Location = Rswift.StringResource(key: "Set_UbicationPin_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Set the pin to the exact address.
      ///
      /// Locales: en, es, English
      static let lbl_MyLocation_Set_Pin = Rswift.StringResource(key: "lbl_MyLocation_Set_Pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Set up
      ///
      /// Locales: en, es
      static let hp_lbl_account_enable_biometric = Rswift.StringResource(key: "hp_lbl_account_enable_biometric", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Set your new security PIN
      ///
      /// Locales: en, es
      static let hp_temporal_code_set_security_pin = Rswift.StringResource(key: "hp_temporal_code_set_security_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Shops
      ///
      /// Locales: en, es
      static let lbl_Main_commerce_title = Rswift.StringResource(key: "lbl_Main_commerce_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sign off
      ///
      /// Locales: en, es, English
      static let closeSessionTitle = Rswift.StringResource(key: "CloseSessionTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: en, es, English
      static let btn_StartedPhoneAlternative_signup = Rswift.StringResource(key: "btn_StartedPhoneAlternative_signup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, es
      static let hp_lbl_account_skip_biometric = Rswift.StringResource(key: "hp_lbl_account_skip_biometric", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Skip = Rswift.StringResource(key: "lbl_WhatIsHugo_Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, es, English
      static let btn_CustomPage_Skip = Rswift.StringResource(key: "btn_CustomPage_Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, es, English
      static let btn_HeaderFinalizeRide_Skip = Rswift.StringResource(key: "btn_HeaderFinalizeRide_Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, es, English
      static let btn_RatingComment_Skip = Rswift.StringResource(key: "btn_RatingComment_Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, es, English
      static let btn_skip = Rswift.StringResource(key: "btn_skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Some products are no longer available in inventory. Please, check again the cart.
      ///
      /// Locales: en, es
      static let lbl_product_variation_message = Rswift.StringResource(key: "lbl_product_variation_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Some products may not be available or have a different price, do you want to continue?
      ///
      /// Locales: en, es, English
      static let productAlertMsg = Rswift.StringResource(key: "ProductAlertMsg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Something is wrong.
      ///
      /// Locales: en, es, English
      static let lbl_ServerError_Something_Wrong = Rswift.StringResource(key: "lbl_ServerError_Something_Wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Soon in Hugo
      ///
      /// Locales: en, es
      static let hp_lbl_onboarding_soon_hugo = Rswift.StringResource(key: "hp_lbl_onboarding_soon_hugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sorry an error arose, which has already been reported, please try again later
      ///
      /// Locales: en, es, English
      static let generalErrorMsg = Rswift.StringResource(key: "GeneralErrorMsg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry at this time it is not possible to make a call, try again later
      ///
      /// Locales: en, es, English
      static let phoneCallSmsFailedMessage = Rswift.StringResource(key: "phoneCallSmsFailedMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry for the inconveniences
      ///
      /// Locales: en, es, English
      static let lbl_Inconvenience = Rswift.StringResource(key: "lbl_Inconvenience", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry it was not possible to obtain the information for this order, if you think it is an error please call customer service at 2247-8100.
      ///
      /// Locales: en, es, English
      static let orderLoadErrorMessage = Rswift.StringResource(key: "orderLoadErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry it was not possible to select the billing information
      ///
      /// Locales: en, es, English
      static let not_Possible = Rswift.StringResource(key: "Not_Possible", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry it was not possible to validate the token, if you think it is an error please call customer service at 2247-8100
      ///
      /// Locales: en, es, English
      static let tokenErrorMessage = Rswift.StringResource(key: "tokenErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry no matches found
      ///
      /// Locales: en, es, English
      static let sorry_No_Match = Rswift.StringResource(key: "Sorry_No_Match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry something has gone wrong.
      ///
      /// Locales: en, es
      static let wrong_Error = Rswift.StringResource(key: "wrong_Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sorry there is no stock available for this product 😢
      ///
      /// Locales: en, es, English
      static let productNotAvailableMessage = Rswift.StringResource(key: "ProductNotAvailableMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry this option is not valid in your location.
      ///
      /// Locales: en, es
      static let not_Valid_Location = Rswift.StringResource(key: "Not_Valid_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sorry we cannot process your order, because the service where this order was processed is not available 😢
      ///
      /// Locales: en, es, English
      static let noOperationalMessage = Rswift.StringResource(key: "noOperationalMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry you can't add more than 3 cards. If you want to add a new card you must delete one.
      ///
      /// Locales: en, es, English
      static let limitExceededMessage = Rswift.StringResource(key: "LimitExceededMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry you don't have a billing record available, try adding a new one.
      ///
      /// Locales: en, es, English
      static let no_Bill = Rswift.StringResource(key: "No_Bill", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry you're out of coverage area, but don't worry you can select one of our coverage areas.
      ///
      /// Locales: en, es, English
      static let notInDelivereArea = Rswift.StringResource(key: "NotInDelivereArea", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry 😞 the selected card type is not supported in your location.
      ///
      /// Locales: en, es
      static let sorry_Card = Rswift.StringResource(key: "Sorry_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sorry 😞 the type of card entered is not supported in your location.
      ///
      /// Locales: en, es, English
      static let card_Not_Location = Rswift.StringResource(key: "Card_Not_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry 😣
      ///
      /// Locales: en, es
      static let sorry = Rswift.StringResource(key: "Sorry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sorry, payment types could not be loaded.
      ///
      /// Locales: en, es, English
      static let payment_Type = Rswift.StringResource(key: "Payment_Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sorry, we couldn't enter your order 🙁
      ///
      /// Locales: en, es
      static let sorry_Con_Not_Order = Rswift.StringResource(key: "Sorry_Con_Not_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sorry, you can't track this order at this time
      ///
      /// Locales: en, es
      static let can_Not_Track = Rswift.StringResource(key: "Can_Not_Track", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sorry, your order could not be completed, please contact support, your order is HO- $1
      ///
      /// Locales: en, es, English
      static let orderProcessError = Rswift.StringResource(key: "OrderProcessError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Sort by:
      ///
      /// Locales: en, es
      static let lbl_Sort_By = Rswift.StringResource(key: "lbl_Sort_By", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sort transactions as you wish!
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_FilterSubtitle = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_FilterSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Special instructions
      ///
      /// Locales: en, es, English
      static let lbl_OptionsQtyCell_Instruction = Rswift.StringResource(key: "lbl_OptionsQtyCell_Instruction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Specify what Hugo will do at Point A
      ///
      /// Locales: en, es, English
      static let shipmentAddDescriptionInstructionsA = Rswift.StringResource(key: "ShipmentAddDescriptionInstructionsA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Specify what Hugo will do at Point B
      ///
      /// Locales: en, es, English
      static let shipmentAddDescriptionInstructionsB = Rswift.StringResource(key: "ShipmentAddDescriptionInstructionsB", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Specify what you want to do in this location
      ///
      /// Locales: en, es
      static let specify_Location = Rswift.StringResource(key: "Specify_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Speed
      ///
      /// Locales: en, es
      static let lbldriverGoodRatings2 = Rswift.StringResource(key: "lbldriverGoodRatings2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Speed
      ///
      /// Locales: en, es
      static let lblhugoGoodRatings3 = Rswift.StringResource(key: "lblhugoGoodRatings3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionDateInit = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionDateInit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Start 5:40 p.m.
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide2_Start_Time = Rswift.StringResource(key: "lbl_PickingRide2_Start_Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Start a new cart?
      ///
      /// Locales: en, es, English
      static let orderNoSamePartnerTitle = Rswift.StringResource(key: "OrderNoSamePartnerTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Starting tracking...
      ///
      /// Locales: en, es
      static let showSimpleAlertLbl = Rswift.StringResource(key: "showSimpleAlertLbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: State
      ///
      /// Locales: en, es
      static let lbl_AddressBook_State = Rswift.StringResource(key: "lbl_AddressBook_State", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Status of your order
      ///
      /// Locales: en, es, English
      static let statu_Order = Rswift.StringResource(key: "Statu_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Status of your shipment:
      ///
      /// Locales: en, es, English
      static let status_Shipping = Rswift.StringResource(key: "Status_Shipping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Step 3: Basic Information
      ///
      /// Locales: en, es, English
      static let lbl_BasicInfo_Sub_Heading = Rswift.StringResource(key: "lbl_BasicInfo_Sub_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Step 4: Email validation
      ///
      /// Locales: en, es, English
      static let lbl_ValidateEmail_Mail_validation = Rswift.StringResource(key: "lbl_ValidateEmail_Mail_validation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Step 5: Add payment method
      ///
      /// Locales: en, es, English
      static let step_5 = Rswift.StringResource(key: "Step_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Subscription failed
      ///
      /// Locales: en, es, English
      static let subscriptionFailTitle = Rswift.StringResource(key: "SubscriptionFailTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Subtotal
      ///
      /// Locales: en, es, English
      static let lbl_TotalTable_SubTotal = Rswift.StringResource(key: "lbl_TotalTable_SubTotal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Successful update
      ///
      /// Locales: en, es
      static let hp_biometrics_successful_update = Rswift.StringResource(key: "hp_biometrics_successful_update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Super Marino
      ///
      /// Locales: en, es, English
      static let lbl_PartnerFeedTable_Address = Rswift.StringResource(key: "lbl_PartnerFeedTable_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Swipe down
      ///
      /// Locales: en, es, English
      static let lbl_swipe_down = Rswift.StringResource(key: "lbl_swipe_down", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Swipe for more
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Swipe = Rswift.StringResource(key: "lbl_WhatIsHugo_Swipe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Swipe up
      ///
      /// Locales: en, es, English
      static let lbl_swipe_up = Rswift.StringResource(key: "lbl_swipe_up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: THANKS A LOT HUGO!
      ///
      /// Locales: en, es, English
      static let lbl_CustomCall_Thanks = Rswift.StringResource(key: "lbl_CustomCall_Thanks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: TICKET ID
      ///
      /// Locales: en, es, English
      static let lbl_DateRangePicker_TicketId = Rswift.StringResource(key: "lbl_DateRangePicker_TicketId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: TOTAL
      ///
      /// Locales: en, es, English
      static let lbl_TotalTable_Total = Rswift.StringResource(key: "lbl_TotalTable_Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: TOTAL COST OF DELIVERY ONLY
      ///
      /// Locales: en, es, English
      static let lbl_AddressInit_Total_Cost = Rswift.StringResource(key: "lbl_AddressInit_Total_Cost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: TRAJECTORY
      ///
      /// Locales: en, es
      static let search_Title_Route = Rswift.StringResource(key: "Search_Title_Route", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRANSACTION AMOUNT
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionAmount = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionAmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRANSACTION DATE
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionDateLabel = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionDateLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRANSACTION DETAILS
      ///
      /// Locales: en, es
      static let hp_CashinSucessViewController_seeDetail = Rswift.StringResource(key: "hp_CashinSucessViewController_seeDetail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRANSACTION DETAILS
      ///
      /// Locales: en, es
      static let hp_full_send_money_success_details_button_title = Rswift.StringResource(key: "hp_full_send_money_success_details_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRANSACTION NOTE
      ///
      /// Locales: en, es
      static let hp_transaction_title = Rswift.StringResource(key: "hp_transaction_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRANSACTION TYPE
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionTypeLabel = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionTypeLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRIP'S ROUTE
      ///
      /// Locales: en, es, English
      static let lbl_RouteCell_Route = Rswift.StringResource(key: "lbl_RouteCell_Route", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Tap to end.
      ///
      /// Locales: en, es, English
      static let btn_Boarding_Finish = Rswift.StringResource(key: "btn_Boarding_Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Tax ID Number
      ///
      /// Locales: en, es
      static let receipt_configuration_document_title = Rswift.StringResource(key: "receipt_configuration_document_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Tax document
      ///
      /// Locales: en, es, English
      static let lbl_new_billing_txt_number = Rswift.StringResource(key: "lbl_new_billing_txt_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Tell us what you liked.
      ///
      /// Locales: en, es, English
      static let lbl_RatingHeader_Liked = Rswift.StringResource(key: "lbl_RatingHeader_Liked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Terms
      ///
      /// Locales: en, es
      static let hp_lbl_onboarding_terms_word = Rswift.StringResource(key: "hp_lbl_onboarding_terms_word", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: en, es, English
      static let termAndCondition = Rswift.StringResource(key: "TermAndCondition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Terms and conditions
      ///
      /// Locales: en, es, English
      static let lbl_PreferencesSingle_Condtion = Rswift.StringResource(key: "lbl_PreferencesSingle_Condtion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Test
      ///
      /// Locales: en, es
      static let test = Rswift.StringResource(key: "test", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Thank you for choosing us, enjoy it!
      ///
      /// Locales: en, es, English
      static let orderDeliveredMessage = Rswift.StringResource(key: "OrderDeliveredMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thank you for installing Hugo App, your first order 🛵 is on us :)
      ///
      /// Locales: en, es, English
      static let firstInstallMsg = Rswift.StringResource(key: "FirstInstallMsg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thank you for participating in our beta. We are still working to adjust some things, but we need your opinion about our app. We appreciate your patience, because with your help we will make Hugo the best app to take what you need, to your home. 
      ///
      /// Locales: en, es, English
      static let welcomeBetaMessage = Rswift.StringResource(key: "WelcomeBetaMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thank you for using Hugo! To make our app better for you, we send regular updates to the App Store. Each update includes speed and stability improvements as well as new features. Your current version is $1 and the latest version is $ 2. 
      ///
      /// Locales: en, es, English
      static let newVersionMessage = Rswift.StringResource(key: "NewVersionMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thank you!
      ///
      /// Locales: en, es
      static let lblThankyou = Rswift.StringResource(key: "lblThankyou", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Thanks
      ///
      /// Locales: en, es, English
      static let btn_DriverTip_ThanksYou = Rswift.StringResource(key: "btn_DriverTip_ThanksYou", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thanks a lot!
      ///
      /// Locales: en, es, English
      static let lbl_Thanks_You_Very_Much = Rswift.StringResource(key: "lbl_Thanks_You_Very_Much", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thanks a lot!
      ///
      /// Locales: en, es, English
      static let lbl_Thnaks_You = Rswift.StringResource(key: "lbl_Thnaks_You", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thanks for letting us know. We will work to improve the service our team provides.
      ///
      /// Locales: en, es, English
      static let lbl_BottomBadRating_Improve_Service = Rswift.StringResource(key: "lbl_BottomBadRating_Improve_Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thanks for letting us know. We will work to improve the service our team provides.
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeBad_Team_provider = Rswift.StringResource(key: "lbl_FinalizeBad_Team_provider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thanks for using 
      ///
      /// Locales: en, es
      static let hp_CashinSucessViewController_ThanksForUse = Rswift.StringResource(key: "hp_CashinSucessViewController_ThanksForUse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Thanks for your trust in us
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeGoodRating_Thanks_Trusting = Rswift.StringResource(key: "lbl_FinalizeGoodRating_Thanks_Trusting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Thanks to trust in us!
      ///
      /// Locales: en, es, English
      static let lbl_OrderFinished_Trusting_Us = Rswift.StringResource(key: "lbl_OrderFinished_Trusting_Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The action could not be completed
      ///
      /// Locales: en, es, English
      static let subscriptionFailBody = Rswift.StringResource(key: "SubscriptionFailBody", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The action could not be performed.
      ///
      /// Locales: en, es, English
      static let wrongSetRangeAddressMessage = Rswift.StringResource(key: "WrongSetRangeAddressMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The app does not have access to your location. Go to settings -> privacy
      ///
      /// Locales: en, es, English
      static let locationNoAccess = Rswift.StringResource(key: "LocationNoAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The applicable taxes are included in your recharge.
      ///
      /// Locales: en, es, English
      static let lbl_Already_include = Rswift.StringResource(key: "lbl_Already_include", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The card is saved exclusively in the device in a safe way and the information is subject to our privacy policies and use. 
      ///
      /// Locales: en, es, English
      static let lbl_creditcard_description = Rswift.StringResource(key: "lbl_creditcard_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The card is stored exclusively in the device in a secure way. This information is subject to our policies and use. Read more
      ///
      /// Locales: en, es, English
      static let read_More = Rswift.StringResource(key: "Read_More", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The card number is invalid.
      ///
      /// Locales: en, es, English
      static let invalid_Card = Rswift.StringResource(key: "Invalid_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The cash will be delivered at the destination point because you have at least one purchase with a list at one point.
      ///
      /// Locales: en, es
      static let lbl_ShipmentCheckout_Subtitle = Rswift.StringResource(key: "lbl_ShipmentCheckout_Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The change of branch can generate a variation in your shopping cart, either in the price or in product stock. We ask you to verify your order again to proceed.
      ///
      /// Locales: en, es
      static let sucursalChangeAlertDesc = Rswift.StringResource(key: "SucursalChangeAlertDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The chat you had with your driver is no longer active because your journey has started and you are on your way to your destination.
      ///
      /// Locales: en, es, English
      static let errorChatMessage = Rswift.StringResource(key: "ErrorChatMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The code could not be sent
      ///
      /// Locales: en, es
      static let code_Not_Send = Rswift.StringResource(key: "code_Not_Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The code entered is not correct
      ///
      /// Locales: en, es
      static let lbl_Step2_InCorrect = Rswift.StringResource(key: "lbl_Step2_InCorrect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The code may take up to 30 seconds to arrive
      ///
      /// Locales: en, es
      static let lbl_Step2_30_Sec = Rswift.StringResource(key: "lbl_Step2_30_Sec", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The data does not match
      ///
      /// Locales: en, es
      static let date_Not_Match = Rswift.StringResource(key: "Date_Not_Match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The date of birth field is required   
      ///
      /// Locales: en, es, English
      static let birthdateRequired = Rswift.StringResource(key: "BirthdateRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The delivery time is above 60 minutes.
      ///
      /// Locales: en, es, English
      static let lbl_Main_Delivery_Time = Rswift.StringResource(key: "lbl_Main_Delivery_Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The driver will ask for you to show your ID to verify your age.
      ///
      /// Locales: en, es, English
      static let lbl_AgeReuired_Driver_Request = Rswift.StringResource(key: "lbl_AgeReuired_Driver_Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The driver will ask for you to show your payment card and ID to verify your identity
      ///
      /// Locales: en, es, English
      static let ccShowCSSMsg = Rswift.StringResource(key: "CCShowCSSMsg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The email field is required
      ///
      /// Locales: en, es, English
      static let email_Filed_Required = Rswift.StringResource(key: "Email_Filed_Required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The email is not in a correct format
      ///
      /// Locales: en, es
      static let email_Not_Correct_Format = Rswift.StringResource(key: "Email_Not_Correct_Format", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The entered phone does not   have an active account
      ///
      /// Locales: en, es
      static let active_Account = Rswift.StringResource(key: "active_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The expiration date is invalid.
      ///
      /// Locales: en, es, English
      static let expire_Date_Invalid = Rswift.StringResource(key: "Expire_Date_Invalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The limit for this product is 
      ///
      /// Locales: en, es
      static let limit_Product = Rswift.StringResource(key: "Limit_Product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The location could not be determined
      ///
      /// Locales: en, es, English
      static let locationImpossibleLocation = Rswift.StringResource(key: "LocationImpossibleLocation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The mail was sent, you can close this screen
      ///
      /// Locales: en, es, English
      static let emailSentMessage = Rswift.StringResource(key: "EmailSentMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The minimum purchase of this business is __min__, add something else
      ///
      /// Locales: en, es, English
      static let minOrderRequiredMessage = Rswift.StringResource(key: "MinOrderRequiredMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The name field is required
      ///
      /// Locales: en, es, English
      static let name_Filed_Rquired = Rswift.StringResource(key: "Name_Filed_Rquired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The new point is very far from the original point.
      ///
      /// Locales: en, es
      static let lbl_AlertTransport_FarAway_Subtitle = Rswift.StringResource(key: "lbl_AlertTransport_FarAway_Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The number **** **** is linked to a login through Facebook. We'd like you to validate your account through this social network.
      ///
      /// Locales: en, es, English
      static let lbl_ValidPhoneLoginWithFB_lengend_Text = Rswift.StringResource(key: "lbl_ValidPhoneLoginWithFB_lengend_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The number entered already has an active account
      ///
      /// Locales: en, es
      static let lbl_Step1_Already_Active = Rswift.StringResource(key: "lbl_Step1_Already_Active", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The number of the card entered is invalid.
      ///
      /// Locales: en, es, English
      static let enter_Invalid_Card_Number = Rswift.StringResource(key: "Enter_Invalid_Card_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The number you entered is linked to another account, please try to enter your password
      ///
      /// Locales: en, es, English
      static let lbl_Existing_Account = Rswift.StringResource(key: "lbl_Existing_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The order cannot be processed
      ///
      /// Locales: en, es, English
      static let orderProcessTerritoryTitleError = Rswift.StringResource(key: "OrderProcessTerritoryTitleError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The password does not meet one or more of the necessary requirements.
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Neccesary = Rswift.StringResource(key: "lbl_CreatePassword_Neccesary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The password entered is invalid
      ///
      /// Locales: en, es
      static let lbl_LoginPassword_Invalid_Password = Rswift.StringResource(key: "lbl_LoginPassword_Invalid_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The password field is required
      ///
      /// Locales: en, es, English
      static let passwordRequired = Rswift.StringResource(key: "PasswordRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The password is mandatory
      ///
      /// Locales: en, es, English
      static let passNoValidMessage = Rswift.StringResource(key: "PassNoValidMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The password must have:                                        At least one number                                        At least one symbol                                        At least one lowercase                                        at least one capital letter                                        A minimum of eight characters 
      ///
      /// Locales: en, es, English
      static let weakPasswordSubmitted = Rswift.StringResource(key: "WeakPasswordSubmitted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The phone can only contain numbers
      ///
      /// Locales: en, es, English
      static let cannotHaveLetttersMessage = Rswift.StringResource(key: "cannotHaveLetttersMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The phone must contain $1 digits
      ///
      /// Locales: en, es, English
      static let cannotHaveMoreOrLessCharactersMessage = Rswift.StringResource(key: "cannotHaveMoreOrLessCharactersMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The phone must not contain blank spaces
      ///
      /// Locales: en, es, English
      static let cannotHaveBlankSpacesMessage = Rswift.StringResource(key: "cannotHaveBlankSpacesMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The phone must not contain the country code
      ///
      /// Locales: en, es, English
      static let cannotHaveCountryCodeInPhoneMessage = Rswift.StringResource(key: "cannotHaveCountryCodeInPhoneMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The phone number is very important for the proper functioning of the app.
      ///
      /// Locales: en, es, English
      static let lbl_Proper_Testing = Rswift.StringResource(key: "lbl_Proper_Testing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The phone number must contain $1 digits. Please verify the number entered.
      ///
      /// Locales: en, es
      static let contain_Digit = Rswift.StringResource(key: "contain_Digit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The points of the banks that apply will be consulted.
      ///
      /// Locales: en, es, English
      static let lbl_PaymentTypeSelection_Consulted = Rswift.StringResource(key: "lbl_PaymentTypeSelection_Consulted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The requested fields are required.
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Require = Rswift.StringResource(key: "lbl_CreatePassword_Require", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The sale of these products is not allowed to minors.
      ///
      /// Locales: en, es
      static let lbl_AgeReuired_Product = Rswift.StringResource(key: "lbl_AgeReuired_Product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The security number is invalid.
      ///
      /// Locales: en, es
      static let security_number_Invalid = Rswift.StringResource(key: "Security_number_Invalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The security number is invalid.
      ///
      /// Locales: en, es, English
      static let scurity_Number_Invalid = Rswift.StringResource(key: "Scurity_Number_Invalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The selected address is not within the coverage area
      ///
      /// Locales: en, es, English
      static let orderProcessTerritoryMsgError = Rswift.StringResource(key: "OrderProcessTerritoryMsgError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The selected address is outside the coverage range of the trade. If you want to change to this address your order will be automatically canceled. Do you want to continue?
      ///
      /// Locales: en, es, English
      static let wrongRangeAddressDeleteOrderMessage = Rswift.StringResource(key: "WrongRangeAddressDeleteOrderMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The selected destination is outside our area of ​​operations. Please choose another address
      ///
      /// Locales: en, es, English
      static let hotZoneMessage = Rswift.StringResource(key: "HotZoneMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The time of the scheduled order has expired, select a new one
      ///
      /// Locales: en, es
      static let alert_sch_expired = Rswift.StringResource(key: "alert_sch_expired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The token must contain 8 digits
      ///
      /// Locales: en, es, English
      static let tokenErrorDigitsMessage = Rswift.StringResource(key: "tokenErrorDigitsMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The total of the purchase does not exceed the minimum amount for card payment.   Do you want to change the payment to cash?
      ///
      /// Locales: en, es, English
      static let ccPaymentMinimunAmountBody = Rswift.StringResource(key: "CCPaymentMinimunAmountBody", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The transaction was not possible, please try another form of payment or contact your bank, reason: $1
      ///
      /// Locales: en, es, English
      static let ccPaymentErrorMessage = Rswift.StringResource(key: "CCPaymentErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The update was successful
      ///
      /// Locales: en, es
      static let hp_biometrics_update_was_successful = Rswift.StringResource(key: "hp_biometrics_update_was_successful", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The username or password are incorrect
      ///
      /// Locales: en, es, English
      static let userOrPassNoValidTitle = Rswift.StringResource(key: "UserOrPassNoValidTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: The username or password entered is not correct, please verify the information again.
      ///
      /// Locales: en, es
      static let password_Not_Correct = Rswift.StringResource(key: "Password_Not_Correct", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The value of the change must be greater than the total of the order
      ///
      /// Locales: en, es, English
      static let minimumAmounMessage = Rswift.StringResource(key: "MinimumAmounMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: There are no active orders
      ///
      /// Locales: en, es, English
      static let ordersList_No_Active_Order = Rswift.StringResource(key: "OrdersList_No_Active_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: There are no addresses.
      ///
      /// Locales: en, English
      static let lbl_WelcomeMaps_address = Rswift.StringResource(key: "lbl_WelcomeMaps_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: There are no registered cards
      ///
      /// Locales: en, es, English
      static let no_Card_Register = Rswift.StringResource(key: "No_Card_Register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: There are no results in this covered area.
      ///
      /// Locales: en, es, English
      static let lbl_Main_Not_Coverage_Area = Rswift.StringResource(key: "lbl_Main_Not_Coverage_Area", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: There are no transactions for the selected filter
      ///
      /// Locales: en, es
      static let hp_full_TransactionHPFullViewController_EmptyTextFilter = Rswift.StringResource(key: "hp_full_TransactionHPFullViewController_EmptyTextFilter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: There are no transactions for the selected range
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_list_emptytitlefilters = Rswift.StringResource(key: "hp_lbl_transaction_list_emptytitlefilters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: There is a problem
      ///
      /// Locales: en, es, English
      static let problemTitle = Rswift.StringResource(key: "ProblemTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: There is an account associated with this phone
      ///
      /// Locales: en, es
      static let account_Assocaite = Rswift.StringResource(key: "account_Assocaite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: There is no user associated with this email, it is possible that your profile was created with Facebook
      ///
      /// Locales: en, es
      static let create_With_Facebook = Rswift.StringResource(key: "Create_With_Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: There isn't any registered address.
      ///
      /// Locales: en, es, English
      static let lbl_ProfileOptions_Not_Resgister = Rswift.StringResource(key: "lbl_ProfileOptions_Not_Resgister", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: There was a problem
      ///
      /// Locales: en, es, English
      static let aProblemOcurredTitle = Rswift.StringResource(key: "AProblemOcurredTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: There was a problem
      ///
      /// Locales: en, es, English
      static let tokenErrorTitle = Rswift.StringResource(key: "tokenErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: There was a problem when logging in
      ///
      /// Locales: en, es, English
      static let lbl_Proble_When_Entering = Rswift.StringResource(key: "lbl_Proble_When_Entering", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: There was a problem with the transaction
      ///
      /// Locales: en, es, English
      static let ccPaymentErrorTitle = Rswift.StringResource(key: "CCPaymentErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Think of me as your personal assistant
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Cell_Shack_Hand = Rswift.StringResource(key: "lbl_WhatIsHugo_Cell_Shack_Hand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: This address does not belong to the coverage area of ​​your order, please select a different one
      ///
      /// Locales: en, es, English
      static let wrongTerritoryAddressMessage = Rswift.StringResource(key: "WrongTerritoryAddressMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: This card does not apply.
      ///
      /// Locales: en, es, English
      static let lbl_CardTable_Not_Apply = Rswift.StringResource(key: "lbl_CardTable_Not_Apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: This coupon is not valid in this order 😵
      ///
      /// Locales: en, es, English
      static let noValidCouponMsg = Rswift.StringResource(key: "NoValidCouponMsg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: This is taking too long, check your connection and try again
      ///
      /// Locales: en, es
      static let hp_conecction_taking_too_long = Rswift.StringResource(key: "hp_conecction_taking_too_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: This is the cashback you have obtained   from your purchases. Use it when paying with QR!
      ///
      /// Locales: en, es
      static let hp_cashback_message_about = Rswift.StringResource(key: "hp_cashback_message_about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: This number will be important for us.
      ///
      /// Locales: en, es, English
      static let lbl_CorrectNumber_Importtance = Rswift.StringResource(key: "lbl_CorrectNumber_Importtance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: This order is already beign processed
      ///
      /// Locales: en, es
      static let hp_message_order_in_process = Rswift.StringResource(key: "hp_message_order_in_process", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: This process can take up to 90 days depending on your bank.
      ///
      /// Locales: en, es
      static let lbl_Program_Subtitle = Rswift.StringResource(key: "lbl_Program_Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: This product is no longer available, we recommend you a similar product.
      ///
      /// Locales: en, es
      static let lbl_product_unavailable_message = Rswift.StringResource(key: "lbl_product_unavailable_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: This product requires to show your identity document
      ///
      /// Locales: en, es, English
      static let productRequireDocTitle = Rswift.StringResource(key: "ProductRequireDocTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: This purchase requires an invitation code, if you have received one, insert it in the space above and then tap continue.
      ///
      /// Locales: en, es, English
      static let lbl_OrderRedeem_Invitation_Code = Rswift.StringResource(key: "lbl_OrderRedeem_Invitation_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: This trade is closed for the moment
      ///
      /// Locales: en, es, English
      static let closeMessage = Rswift.StringResource(key: "CloseMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: This trade only allows adding $1 per purchase
      ///
      /// Locales: en, es, English
      static let partnerLimitMessage = Rswift.StringResource(key: "PartnerLimitMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Time
      ///
      /// Locales: en, es
      static let lblpartnerBadRatings3 = Rswift.StringResource(key: "lblpartnerBadRatings3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Title address
      ///
      /// Locales: en, es, English
      static let lbl_SearchAddress_Title = Rswift.StringResource(key: "lbl_SearchAddress_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: To
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_to = Rswift.StringResource(key: "hp_lbl_transaction_filter_to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To authorize the use of your card
      ///
      /// Locales: en, es
      static let cvcDescAutorization_Base = Rswift.StringResource(key: "CVCDescAutorization_Base", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To cancel an order
      ///
      /// Locales: en, es, English
      static let cancelOrderTitle = Rswift.StringResource(key: "CancelOrderTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: To continue it is necessary that all the requested fields are completed
      ///
      /// Locales: en, es
      static let to_Continue_Ness = Rswift.StringResource(key: "To_Continue_Ness", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To continue we must create a profile for you, it is easy and fast, it will take you less than a minute. Do you want to continue?
      ///
      /// Locales: en, es
      static let do_You_Continuous = Rswift.StringResource(key: "Do_You_Continuous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To continue you must accept the terms and conditions
      ///
      /// Locales: en, es
      static let accept_Terms = Rswift.StringResource(key: "Accept_Terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To continue you must choose a location manually to provide you with our services
      ///
      /// Locales: en, es, English
      static let lbl_To_Continue = Rswift.StringResource(key: "lbl_To_Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: To continue you need to enter your password
      ///
      /// Locales: en, es
      static let to_Continue_Password = Rswift.StringResource(key: "To_Continue_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To enter hugo we need to know your location, in order to provide you with our services.
      ///
      /// Locales: en, es
      static let need_Location_Service = Rswift.StringResource(key: "Need_Location_Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To enter you must   select a territory
      ///
      /// Locales: en, es
      static let lbl_Territory_Selcet = Rswift.StringResource(key: "lbl_Territory_Selcet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To get started, enter your phone number.
      ///
      /// Locales: en, es
      static let lbl_Step1_Start = Rswift.StringResource(key: "lbl_Step1_Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To give you a better experience, help us with your authorization in the necessary permissions. Go to Accesses, Location to configure them.
      ///
      /// Locales: en, es
      static let locationNoAccess2 = Rswift.StringResource(key: "LocationNoAccess2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To give you the best experience, we will request your authorization on the necessary permissions.
      ///
      /// Locales: en, es
      static let authu_naessary = Rswift.StringResource(key: "Authu_naessary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To make a round trip you must select an address for point A
      ///
      /// Locales: en, es, English
      static let shipmentRoundTrip = Rswift.StringResource(key: "ShipmentRoundTrip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: To update
      ///
      /// Locales: en, es, English
      static let actualizar = Rswift.StringResource(key: "Actualizar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: To update
      ///
      /// Locales: en, es, English
      static let newVersionButton = Rswift.StringResource(key: "NewVersionButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, es
      static let hp_total_title = Rswift.StringResource(key: "hp_total_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Total cost of delivery only
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentPurchase_Total_Cost = Rswift.StringResource(key: "lbl_ShipmentPurchase_Total_Cost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Total: $20.23
      ///
      /// Locales: en, es, English
      static let lbl_RideOrderTable_Total = Rswift.StringResource(key: "lbl_RideOrderTable_Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Trabajo
      ///
      /// Locales: en, es, English
      static let lbl_PickingRide2_Job = Rswift.StringResource(key: "lbl_PickingRide2_Job", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Track order
      ///
      /// Locales: en, es, English
      static let track = Rswift.StringResource(key: "Track", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Tracking
      ///
      /// Locales: en, es
      static let lblhugoBadRatings3 = Rswift.StringResource(key: "lblhugoBadRatings3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Tracking
      ///
      /// Locales: en, es
      static let lblhugoGoodRatings1 = Rswift.StringResource(key: "lblhugoGoodRatings1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Trade not found
      ///
      /// Locales: en, es
      static let search_Not_Found = Rswift.StringResource(key: "Search_Not_Found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Transaction ID
      ///
      /// Locales: en, es
      static let hp_transaction_id_title = Rswift.StringResource(key: "hp_transaction_id_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Transactions
      ///
      /// Locales: en, es
      static let hp_lbl_home_transactions = Rswift.StringResource(key: "hp_lbl_home_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Transactions of
      ///
      /// Locales: en, es
      static let hp_expense_control_transactions_of = Rswift.StringResource(key: "hp_expense_control_transactions_of", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Transportation
      ///
      /// Locales: en, es, English
      static let lbl_RideOrderTable_Transporte = Rswift.StringResource(key: "lbl_RideOrderTable_Transporte", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Travel safe
      ///
      /// Locales: en, es
      static let safe_travels = Rswift.StringResource(key: "safe_travels", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Tributo a Natalia Lafourcade
      ///
      /// Locales: en, es, English
      static let lbl_DateRangePicker_Tribute = Rswift.StringResource(key: "lbl_DateRangePicker_Tribute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Try again
      ///
      /// Locales: en, es
      static let hp_create_pin_dont_match_second = Rswift.StringResource(key: "hp_create_pin_dont_match_second", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Try again
      ///
      /// Locales: en, es
      static let hp_verify_pin_try_again = Rswift.StringResource(key: "hp_verify_pin_try_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Type a comment…
      ///
      /// Locales: en, es, English
      static let lbl_Type_Of_Comment = Rswift.StringResource(key: "lbl_Type_Of_Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Type a text to search
      ///
      /// Locales: en, es
      static let search_Text = Rswift.StringResource(key: "Search_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Type of address required
      ///
      /// Locales: en, es, English
      static let addressTypeRequired = Rswift.StringResource(key: "AddressTypeRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Type of card
      ///
      /// Locales: en, es, English
      static let txt_creditcard_type = Rswift.StringResource(key: "txt_creditcard_type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Type of monthly consumption
      ///
      /// Locales: en, es
      static let hp_expense_control_type_monthly = Rswift.StringResource(key: "hp_expense_control_type_monthly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: UPDATE
      ///
      /// Locales: en, es
      static let receipt_configuration_edit_button_title = Rswift.StringResource(key: "receipt_configuration_edit_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: UPDATE AND VALIDATE
      ///
      /// Locales: en, es, English
      static let btn_ValidateEmail_Update_Validate = Rswift.StringResource(key: "btn_ValidateEmail_Update_Validate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: UPDATE CARD
      ///
      /// Locales: en, es
      static let update_Card = Rswift.StringResource(key: "Update_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: UPDATE PAYMENT
      ///
      /// Locales: en, es
      static let lbl_Update_Payment = Rswift.StringResource(key: "lbl_Update_Payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: UPDATED REQUEST
      ///
      /// Locales: en, es, English
      static let lbl_Update_App = Rswift.StringResource(key: "lbl_Update_App", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: UPLOAD PROOF OF PAYMENT
      ///
      /// Locales: en, es
      static let lbl_PaymentTypeSelection_Upload_Voucher = Rswift.StringResource(key: "lbl_PaymentTypeSelection_Upload_Voucher", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: UPS!
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentError = Rswift.StringResource(key: "lbl_ShipmentError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: USE DATA
      ///
      /// Locales: en, es
      static let btn_Use_Billing = Rswift.StringResource(key: "btn_Use_Billing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: USE INFORMATION
      ///
      /// Locales: en, es
      static let receipt_list_button_title = Rswift.StringResource(key: "receipt_list_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Unable to complete action 😣
      ///
      /// Locales: en, es, English
      static let helpRequestFailedTitle = Rswift.StringResource(key: "helpRequestFailedTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Unexpected Error 😵
      ///
      /// Locales: en, es, English
      static let generalErrorTitle = Rswift.StringResource(key: "GeneralErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Unknown error
      ///
      /// Locales: en, es, English
      static let ccPaymentGeneralTitle = Rswift.StringResource(key: "CCPaymentGeneralTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Unsatisfied
      ///
      /// Locales: en, es, English
      static let lbl_RatingCell_Your_Dissatisfied = Rswift.StringResource(key: "lbl_RatingCell_Your_Dissatisfied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Unselect all
      ///
      /// Locales: en, es
      static let hp_lbl_notifications_unselect_all = Rswift.StringResource(key: "hp_lbl_notifications_unselect_all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Update data
      ///
      /// Locales: en, es
      static let receipt_configuration_edit_subtitle = Rswift.StringResource(key: "receipt_configuration_edit_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Update your email!
      ///
      /// Locales: en, es, English
      static let lbl_ValidateEmail_Update_email = Rswift.StringResource(key: "lbl_ValidateEmail_Update_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Update your password!
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Update_Password = Rswift.StringResource(key: "lbl_CreatePassword_Update_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Update.
      ///
      /// Locales: en, es, English
      static let btn_Update_ToUpdate_Text = Rswift.StringResource(key: "btn_Update_ToUpdate_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Updating...
      ///
      /// Locales: en, es
      static let searching_points_calculating = Rswift.StringResource(key: "Searching_points_calculating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Ups it looks like you've locked your account.
      ///
      /// Locales: en, es
      static let hp_block_account_title = Rswift.StringResource(key: "hp_block_account_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Ups!
      ///
      /// Locales: en, es, English
      static let lbl_Outstanding_Ups = Rswift.StringResource(key: "lbl_Outstanding_Ups", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Ups! Something went wrong
      ///
      /// Locales: en, es, English
      static let lbl_Whoops_Somthing = Rswift.StringResource(key: "lbl_Whoops_Somthing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Use Fingertip in place of your Passcode for faster purchases
      ///
      /// Locales: en, es
      static let hp_lbl_account_desc_biometric = Rswift.StringResource(key: "hp_lbl_account_desc_biometric", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Use another address
      ///
      /// Locales: en, es, English
      static let chooseOtherAddrTitle = Rswift.StringResource(key: "ChooseOtherAddrTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Use either phone number or email address
      ///
      /// Locales: en, es
      static let hp_full_invalid_fields = Rswift.StringResource(key: "hp_full_invalid_fields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Use my Cashback
      ///
      /// Locales: en, es
      static let hp_lbl_qr_payment_use_my_cashback = Rswift.StringResource(key: "hp_lbl_qr_payment_use_my_cashback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Use points
      ///
      /// Locales: en, es, English
      static let lbl_Use_Point = Rswift.StringResource(key: "lbl_Use_Point", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Use this address
      ///
      /// Locales: en, es, English
      static let btn_AddressBook_Use_Address = Rswift.StringResource(key: "btn_AddressBook_Use_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Use this card
      ///
      /// Locales: en, es, English
      static let btn_use_this_card = Rswift.StringResource(key: "btn_use_this_card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Use this information.
      ///
      /// Locales: en, es, English
      static let billing_use_the_info = Rswift.StringResource(key: "billing_use_the_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Use this prize.
      ///
      /// Locales: en, es, English
      static let btn_Promos_Used_Awards = Rswift.StringResource(key: "btn_Promos_Used_Awards", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: User is required
      ///
      /// Locales: en, es, English
      static let userRequired = Rswift.StringResource(key: "UserRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: VALIDATE
      ///
      /// Locales: en, es
      static let hp_temporal_code_validate = Rswift.StringResource(key: "hp_temporal_code_validate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: VALIDATE CODE
      ///
      /// Locales: en, es
      static let valid_code = Rswift.StringResource(key: "valid_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: VALIDATE WITH FACEBOOK
      ///
      /// Locales: en, es, English
      static let btn_ValidPhoneLoginWithFB_save = Rswift.StringResource(key: "btn_ValidPhoneLoginWithFB_save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: VIP / A
      ///
      /// Locales: en, es, English
      static let lbl_DateRangePicker_Vip = Rswift.StringResource(key: "lbl_DateRangePicker_Vip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Validate your account
      ///
      /// Locales: en, es, English
      static let lbl_Validate_Account = Rswift.StringResource(key: "lbl_Validate_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Validate your email.
      ///
      /// Locales: en, es, English
      static let lbl_ValidateEmail_validate_email = Rswift.StringResource(key: "lbl_ValidateEmail_validate_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Vehicles not found
      ///
      /// Locales: en, es, English
      static let vehicleNotAvailable = Rswift.StringResource(key: "VehicleNotAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Verify your last delivery address or try another address.
      ///
      /// Locales: en, es, English
      static let lbl_Main_Checking_Shipping = Rswift.StringResource(key: "lbl_Main_Checking_Shipping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Verify.
      ///
      /// Locales: en, es, English
      static let btn_verifier = Rswift.StringResource(key: "btn_verifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Verify.
      ///
      /// Locales: en, es, English
      static let lbl_OrderRedeem_Check = Rswift.StringResource(key: "lbl_OrderRedeem_Check", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Very satisfied
      ///
      /// Locales: en, es, English
      static let lbl_RatingCell_Very_satisfied = Rswift.StringResource(key: "lbl_RatingCell_Very_satisfied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Very soon
      ///
      /// Locales: en, es, English
      static let lbl_ServiceSelection_Coming_Soon = Rswift.StringResource(key: "lbl_ServiceSelection_Coming_Soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: View All
      ///
      /// Locales: en, es
      static let hp_lbl_home_viewall = Rswift.StringResource(key: "hp_lbl_home_viewall", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: View All
      ///
      /// Locales: en, es
      static let hp_my_view_all_transactions_title = Rswift.StringResource(key: "hp_my_view_all_transactions_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: WHAT WILL HUGO BUY AT POINT A?
      ///
      /// Locales: en, es
      static let lbl_Hugo_Buy_PointA = Rswift.StringResource(key: "lbl_Hugo_Buy_PointA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: WHAT WILL HUGO BUY AT POINT B?
      ///
      /// Locales: en, es
      static let lbl_Hugo_Buy_PointB = Rswift.StringResource(key: "lbl_Hugo_Buy_PointB", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: WHAT WILL HUGO DO AT POINT A?
      ///
      /// Locales: en, es, English
      static let lbl_Hugo_PointA = Rswift.StringResource(key: "lbl_Hugo_PointA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: WHAT WILL HUGO DO AT POINT B?
      ///
      /// Locales: en, es, English
      static let lbl_Hugo_PointB = Rswift.StringResource(key: "lbl_Hugo_PointB", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: WHAT WILL HUGO DO AT POINT C?
      ///
      /// Locales: en, es, English
      static let lbl_Hugo_PointC = Rswift.StringResource(key: "lbl_Hugo_PointC", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: WHAT WILL HUGO DO IN POINT A?
      ///
      /// Locales: en, es, English
      static let lbl_WriteDescription_Point_Hugo = Rswift.StringResource(key: "lbl_WriteDescription_Point_Hugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Wait a moment!
      ///
      /// Locales: en, es, English
      static let lbl_ValidPhoneLoginWithFB_Main_Heading = Rswift.StringResource(key: "lbl_ValidPhoneLoginWithFB_Main_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Wait for it!
      ///
      /// Locales: en, es, English
      static let comingMessage = Rswift.StringResource(key: "ComingMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Water
      ///
      /// Locales: en, es, English
      static let lbl_Category_Water = Rswift.StringResource(key: "lbl_Category_Water", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Way to pay
      ///
      /// Locales: en, es, English
      static let paymentTypeTitle = Rswift.StringResource(key: "PaymentTypeTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We apologize for the inconvenience, in this moment we don’t count with the product quantity that you need.
      ///
      /// Locales: en, es
      static let lbl_stock_unavailable_message = Rswift.StringResource(key: "lbl_stock_unavailable_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We are creating an expense report for you, with it you can identify your  consumption patterns and make better financial decisions. Keep trading to get it.
      ///
      /// Locales: en, es
      static let hp_expense_control_message_title = Rswift.StringResource(key: "hp_expense_control_message_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We are experiencing high traffic now, it is possible that you get your order in a delivery time of 60 min.
      ///
      /// Locales: en, es, English
      static let lbl_HANotificationBanner_Text = Rswift.StringResource(key: "lbl_HANotificationBanner_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are experiencing high traffic.
      ///
      /// Locales: en, es, English
      static let lbl_Main_Saturation = Rswift.StringResource(key: "lbl_Main_Saturation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are experiencing saturation in this trade, it is possible that your order has a delivery time of more than 60 minutes
      ///
      /// Locales: en, es, English
      static let partnerPanicModeStatusMessage = Rswift.StringResource(key: "PartnerPanicModeStatusMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are experiencing saturation, so your order may have a delay of more than 60 minutes
      ///
      /// Locales: en, es, English
      static let generalPanicModeStatusMessage = Rswift.StringResource(key: "GeneralPanicModeStatusMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are far, your product may not arrive in the best condition.
      ///
      /// Locales: en, es, English
      static let lbl_RangeSlider_Condition = Rswift.StringResource(key: "lbl_RangeSlider_Condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are glad you had a good trip
      ///
      /// Locales: en, es, English
      static let lbl_Good_Trip = Rswift.StringResource(key: "lbl_Good_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are having high traffic now, it is possible that your order will have a delivery time of more than 60 minutes
      ///
      /// Locales: en, es, English
      static let lbl_Delivery_Time = Rswift.StringResource(key: "lbl_Delivery_Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are having little technical problems, reload your app. We will solve it soon.
      ///
      /// Locales: en, es, English
      static let lbl_ServerError_Technical_Problem = Rswift.StringResource(key: "lbl_ServerError_Technical_Problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are ready!
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Ready = Rswift.StringResource(key: "lbl_CreatePassword_Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We are sorry
      ///
      /// Locales: en, es, English
      static let ccPaymentMinimunAmountTitle = Rswift.StringResource(key: "CCPaymentMinimunAmountTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are sorry at the moment the store is too saturated to receive your order... Try again later.
      ///
      /// Locales: en, es, English
      static let saturatedPartnerMessage = Rswift.StringResource(key: "SaturatedPartnerMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are sorry at the moment we do not have hugos available to meet our delivery times, try later
      ///
      /// Locales: en, es, English
      static let generalSaturatedMessage = Rswift.StringResource(key: "GeneralSaturatedMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are sorry at this time it is not possible to request help
      ///
      /// Locales: en, es, English
      static let helpRequestFailedMessage = Rswift.StringResource(key: "helpRequestFailedMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are sorry no results were found(territoryName), please verify your address 
      ///
      /// Locales: en, es, English
      static let lbl_No_Result_Found_Name = Rswift.StringResource(key: "lbl_No_Result_Found_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are sorry the inconvenience!
      ///
      /// Locales: en, es
      static let lbl_product_unavailable_title = Rswift.StringResource(key: "lbl_product_unavailable_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We are sorry the inconvenience.
      ///
      /// Locales: en, es
      static let lbl_OrderSummary_Not_Variation_Title = Rswift.StringResource(key: "lbl_OrderSummary_Not_Variation_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We are sorry you didn't have a good experience.
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeBadRating_experience = Rswift.StringResource(key: "lbl_FinalizeBadRating_experience", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are sorry you didn't have a good trip
      ///
      /// Locales: en, es, English
      static let lbl_Didnt_Good = Rswift.StringResource(key: "lbl_Didnt_Good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are sorry!
      ///
      /// Locales: en, es, English
      static let lbl_We_are_Sorry = Rswift.StringResource(key: "lbl_We_are_Sorry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are sorry, no results were found 
      ///
      /// Locales: en, es, English
      static let lbl_No_result_found = Rswift.StringResource(key: "lbl_No_result_found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are sorry, no results were found.
      ///
      /// Locales: en, es, English
      static let lbl_SearchAddressShipment_Sorry_NoResult = Rswift.StringResource(key: "lbl_SearchAddressShipment_Sorry_NoResult", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are very sorry
      ///
      /// Locales: en, es, English
      static let lbl_CoverAlert_Heading = Rswift.StringResource(key: "lbl_CoverAlert_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We are very sorry.
      ///
      /// Locales: en, es, English
      static let errorCDTitle = Rswift.StringResource(key: "ErrorCDTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We can help you get it back
      ///
      /// Locales: en, es
      static let hp_block_account_body = Rswift.StringResource(key: "hp_block_account_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We can´t locate your driver now, we suggest you to be aware, it will be updated shortly. 
      ///
      /// Locales: en, es, English
      static let lbl_AlertOutOfSync_Update_Shortly = Rswift.StringResource(key: "lbl_AlertOutOfSync_Update_Shortly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We could not detect your GPS location
      ///
      /// Locales: en, es, English
      static let lbl_Didnt_Get_GPS = Rswift.StringResource(key: "lbl_Didnt_Get_GPS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We couldn't create your password, please try again.
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Try_Again = Rswift.StringResource(key: "lbl_CreatePassword_Try_Again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We couldn't recognize you, are you sure it's your fingerprint?
      ///
      /// Locales: en, es, English
      static let authErrorDesc = Rswift.StringResource(key: "authErrorDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We couldn't resend the verification code to you.
      ///
      /// Locales: en, es
      static let lbl_Step2_Resend = Rswift.StringResource(key: "lbl_Step2_Resend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We do not accept cash payments for scheduled orders. Please select a debit or credit card.
      ///
      /// Locales: en, es
      static let alert_sch_onlycard = Rswift.StringResource(key: "alert_sch_onlycard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We had a problem, we ask that you please try again later.
      ///
      /// Locales: en, es
      static let try_Again = Rswift.StringResource(key: "Try_Again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We have a new version of the app. During our beta, we are adding new functions quickly and fixing problems. In order for the app to continue working normally for you it is important that you update it every time a new version is released. Your current version is $1 and the latest version is $ 2, please upgrade from TestFlight 
      ///
      /// Locales: en, es, English
      static let betaNewVersionMessage = Rswift.StringResource(key: "BetaNewVersionMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We have detected an account.
      ///
      /// Locales: en, es, English
      static let lbl_ValidPhoneLoginWithFB_Sub_Heading = Rswift.StringResource(key: "lbl_ValidPhoneLoginWithFB_Sub_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We have detected that the shipping address is not your default address. Please select or add a new address
      ///
      /// Locales: en, es
      static let defalut_Address = Rswift.StringResource(key: "Defalut_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We have detected that you have an order pending to process, if you change your address it will be deleted. Do you want to continue?
      ///
      /// Locales: en, es, English
      static let wrongTerritoryAddressDeleteOrderMessage2 = Rswift.StringResource(key: "WrongTerritoryAddressDeleteOrderMessage2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We have detected that you´re outside our service area. Hugo is expanding as quickly as possible. Would you like to be notified when we cover this zone?
      ///
      /// Locales: en, es, English
      static let lbl_CoverAlert_Sub_Headling = Rswift.StringResource(key: "lbl_CoverAlert_Sub_Headling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We have not been able to charge the card registered for your order, help us changing the payment method or selecting another card.
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentError_Selecting_Another = Rswift.StringResource(key: "lbl_ShipmentError_Selecting_Another", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We have not found a result for the word "%@"
      ///
      /// Locales: en, es
      static let lbl_NoResult_Search = Rswift.StringResource(key: "lbl_NoResult_Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We have not yet reached the destination and you are about to end your trip, if you continue, you will be charged the value of the trip generated up to this moment. Do you want to continue?
      ///
      /// Locales: en, es, English
      static let cancelRideMessageOnWay = Rswift.StringResource(key: "CancelRideMessageOnWay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We have problems with your card.
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentError_Card_Problem = Rswift.StringResource(key: "lbl_ShipmentError_Card_Problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We help you!
      ///
      /// Locales: en, es, English
      static let lbl_ChooseRecover_Main_Heading = Rswift.StringResource(key: "lbl_ChooseRecover_Main_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We hope you enjoy it!
      ///
      /// Locales: en, es, English
      static let lbl_RatingView_enjoy = Rswift.StringResource(key: "lbl_RatingView_enjoy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We invite you to read our terms and conditions
      ///
      /// Locales: en, es
      static let we_invite = Rswift.StringResource(key: "We_invite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We need the following data to send you the invoices of each purchase in our platform.
      ///
      /// Locales: en, es, English
      static let lbl_AddUserInfo_Send_Receipts = Rswift.StringResource(key: "lbl_AddUserInfo_Send_Receipts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We need to know your location
      ///
      /// Locales: en, es, English
      static let lbl_Where_You_Are = Rswift.StringResource(key: "lbl_Where_You_Are", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We need you to update your payment information for the next detail:
      ///
      /// Locales: en, es, English
      static let lbl_ShipmentError_Info = Rswift.StringResource(key: "lbl_ShipmentError_Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We present you a summary of the shipment
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeRide_Total_Shipping_Order = Rswift.StringResource(key: "lbl_FinalizeRide_Total_Shipping_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We want to be sure
      ///
      /// Locales: en, es, English
      static let lbl_Safe = Rswift.StringResource(key: "lbl_Safe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We were unable to complete your change of destination request, please try again
      ///
      /// Locales: en, es, English
      static let errorCDMessage = Rswift.StringResource(key: "ErrorCDMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We will send a recovery code to one of your registered media. Choose the channel where you would like to receive the code
      ///
      /// Locales: en, es, English
      static let lbl_ChooseRecover_Recover_Msg = Rswift.StringResource(key: "lbl_ChooseRecover_Recover_Msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We will take very good care of her
      ///
      /// Locales: en, es, English
      static let good_Care = Rswift.StringResource(key: "Good_Care", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We would like to know your opinion about the experience.
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeRide_Exprience = Rswift.StringResource(key: "lbl_FinalizeRide_Exprience", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We would like to know your opinion.
      ///
      /// Locales: en, es, English
      static let lbl_RatingCell_Your_Opinion = Rswift.StringResource(key: "lbl_RatingCell_Your_Opinion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We'd like to know you!
      ///
      /// Locales: en, es, English
      static let lbl_BasicInfo_Main_Heading = Rswift.StringResource(key: "lbl_BasicInfo_Main_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We'd like to know you.
      ///
      /// Locales: en, es, English
      static let lbl_EmailInfo_Sub_Heading = Rswift.StringResource(key: "lbl_EmailInfo_Sub_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We'll add your security.
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_Sub_Heading = Rswift.StringResource(key: "lbl_CreateFBPassword_Sub_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We'll recover your password.
      ///
      /// Locales: en, es, English
      static let lbl_ChooseRecover_Sub_Heading = Rswift.StringResource(key: "lbl_ChooseRecover_Sub_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We'll send an email to your synchronized account.
      ///
      /// Locales: en, es, English
      static let lbl_ValidateEmail_Mail_Msg = Rswift.StringResource(key: "lbl_ValidateEmail_Mail_Msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We'll send you a verification code
      ///
      /// Locales: en, es
      static let lbl_Step1_Send_Code = Rswift.StringResource(key: "lbl_Step1_Send_Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We're sorry, something went wrong when you got your phone.
      ///
      /// Locales: en, es, English
      static let cannotGetPhoneMessage = Rswift.StringResource(key: "cannotGetPhoneMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We're very sorry!
      ///
      /// Locales: en, es, English
      static let lbl_ServerError_Sorry_Text = Rswift.StringResource(key: "lbl_ServerError_Sorry_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: We've got you!
      ///
      /// Locales: en, es, English
      static let lbl_AddressInit_Ready = Rswift.StringResource(key: "lbl_AddressInit_Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Welcome
      ///
      /// Locales: en, es, English
      static let lbl_LoginWithPassword_Heading = Rswift.StringResource(key: "lbl_LoginWithPassword_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Welcome back
      ///
      /// Locales: en, es
      static let lbl_CreatePassword_Welcome = Rswift.StringResource(key: "lbl_CreatePassword_Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Welcome back
      ///
      /// Locales: en, es
      static let lbl_LoginPassword_Welcome = Rswift.StringResource(key: "lbl_LoginPassword_Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Welcome to
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhoneAlternative_Help = Rswift.StringResource(key: "lbl_StartedPhoneAlternative_Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Welcome to
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhone_Welcome = Rswift.StringResource(key: "lbl_StartedPhone_Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Welcome to Hugo
      ///
      /// Locales: en, es, English
      static let lbl_Welcome_Hugo = Rswift.StringResource(key: "lbl_Welcome_Hugo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Welcome to)
      ///
      /// Locales: en, es, English
      static let welcomeBetaTitle = Rswift.StringResource(key: "WelcomeBetaTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Welcome!
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_Welcome = Rswift.StringResource(key: "lbl_CreateFBPassword_Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: What a shame we
      ///
      /// Locales: en, es, English
      static let noCoverTitle = Rswift.StringResource(key: "NoCoverTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: What can $name improve?
      ///
      /// Locales: en, es, English
      static let lbl_ImprovementList_Improve_Name = Rswift.StringResource(key: "lbl_ImprovementList_Improve_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: What can improve
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeBadRating_Improve_Name = Rswift.StringResource(key: "lbl_FinalizeBadRating_Improve_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: What can we improve?
      ///
      /// Locales: en, es
      static let lbl_RatingHeader_Improve = Rswift.StringResource(key: "lbl_RatingHeader_Improve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: What do you 
      ///
      /// Locales: en, es
      static let lbl_TitlPayService_Pay = Rswift.StringResource(key: "lbl_TitlPayService_Pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: What do you want today?
      ///
      /// Locales: en, es, English
      static let lbl_Salutation_You_Need = Rswift.StringResource(key: "lbl_Salutation_You_Need", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: What's up
      ///
      /// Locales: en, English
      static let lbl_WelcomeMaps_UP = Rswift.StringResource(key: "lbl_WelcomeMaps_UP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: What's up
      ///
      /// Locales: en, es, English
      static let lbl_LookUpRide_title = Rswift.StringResource(key: "lbl_LookUpRide_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: What's up
      ///
      /// Locales: en, es, English
      static let lbl_What_Ware = Rswift.StringResource(key: "lbl_What_Ware", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: When changing your linked phone number, all your information will move to this number
      ///
      /// Locales: en, es, English
      static let lbl_Link_Number = Rswift.StringResource(key: "lbl_Link_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: When re-processing this order, some prices may vary depending on the charges that are in effect at the time of processing (e.g., delivery charge, booking fee, tax and others).
      ///
      /// Locales: en, es, English
      static let lbl_past_order_imp_notes = Rswift.StringResource(key: "lbl_past_order_imp_notes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: When using cash as a payment, method we recommend having the exact amount. If change is required well fund the wallet in your profile with Yummy Credits for future orders. To obtain your credit message us on the Chat within the app.
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_cash_payment = Rswift.StringResource(key: "alert_ProcessOrder_cash_payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: When you receive the email, go to the link to complete the validation.
      ///
      /// Locales: en, es, English
      static let lbl_ValidateEmail_Recive_Mail = Rswift.StringResource(key: "lbl_ValidateEmail_Recive_Mail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Where are we going today?
      ///
      /// Locales: en, es, English
      static let lbl_AddressInit_Do_for_Today = Rswift.StringResource(key: "lbl_AddressInit_Do_for_Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Where are you going?
      ///
      /// Locales: en, es, English
      static let lbl_PlaceMarker_Going = Rswift.StringResource(key: "lbl_PlaceMarker_Going", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Where are you?
      ///
      /// Locales: en, es, English
      static let lbl_WhereAreYou_Heading = Rswift.StringResource(key: "lbl_WhereAreYou_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Where do we depart?
      ///
      /// Locales: en, es, English
      static let lbl_Come_Form = Rswift.StringResource(key: "lbl_Come_Form", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Where do we stop?
      ///
      /// Locales: en, es, English
      static let lbl_Where_do_Stop = Rswift.StringResource(key: "lbl_Where_do_Stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Where do you want to go today?
      ///
      /// Locales: en, English
      static let lbl_WelcomeMaps_today = Rswift.StringResource(key: "lbl_WelcomeMaps_today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Where do you want to go today?
      ///
      /// Locales: en, es, English
      static let lbl_LookUpRide_Go_Today = Rswift.StringResource(key: "lbl_LookUpRide_Go_Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Where do you want to go today?
      ///
      /// Locales: en, es, English
      static let txt_Search_Go_Today = Rswift.StringResource(key: "txt_Search_Go_Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Where will we deliver your orders?
      ///
      /// Locales: en, es, English
      static let lbl_MyLocation = Rswift.StringResource(key: "lbl_MyLocation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Where will we deliver your orders? 
      ///
      /// Locales: en, es
      static let where_UbicationDeliver_Order = Rswift.StringResource(key: "Where_UbicationDeliver_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: While you were placing your order the  following products were sold out
      ///
      /// Locales: en, es
      static let lbl_OrderSummary_Not_Variation_Message = Rswift.StringResource(key: "lbl_OrderSummary_Not_Variation_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Who will we recharge?
      ///
      /// Locales: en, es, English
      static let lbl_TopUpMain_Who_Recharge = Rswift.StringResource(key: "lbl_TopUpMain_Who_Recharge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Why are you ending the trip?
      ///
      /// Locales: en, es
      static let lbl_ConfirmCancelRide_Why_Cancel_Ride = Rswift.StringResource(key: "lbl_ConfirmCancelRide_Why_Cancel_Ride", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Will arrive in %d minutes
      ///
      /// Locales: en, es
      static let lbl_Picking_Ride_Minutes = Rswift.StringResource(key: "lbl_Picking_Ride_Minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Will arrive in 1 minute
      ///
      /// Locales: en, es
      static let lbl_Picking_Ride_Minute = Rswift.StringResource(key: "lbl_Picking_Ride_Minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: With our exclusive network of professional drivers
      ///
      /// Locales: en, es
      static let profiession_Cycle = Rswift.StringResource(key: "Profiession_Cycle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: With our modern fleet
      ///
      /// Locales: en, es
      static let mordel_feet = Rswift.StringResource(key: "Mordel_feet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Without Bag
      ///
      /// Locales: en, es
      static let lblhugoBadRatings2 = Rswift.StringResource(key: "lblhugoBadRatings2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Without the location we cannot show the closest branches. Go to settings -> privacy
      ///
      /// Locales: en, es, English
      static let locationWithoutAccess = Rswift.StringResource(key: "LocationWithoutAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Without your location we cannot show you the shops near you. Go to settings -> privacy
      ///
      /// Locales: en, es, English
      static let locationNeededForPartners = Rswift.StringResource(key: "LocationNeededForPartners", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Work
      ///
      /// Locales: en, English
      static let lbl_RideMap_Work = Rswift.StringResource(key: "lbl_RideMap_Work", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "English"], comment: nil)
      /// en translation: Wow!
      ///
      /// Locales: en, es, English
      static let lbl_Buaa = Rswift.StringResource(key: "lbl_Buaa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Wow!
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeBadRating_Name = Rswift.StringResource(key: "lbl_FinalizeBadRating_Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Write it in the space below, your driver will ask you before giving you the order, otherwise we will not be able to complete your order
      ///
      /// Locales: en, es, English
      static let productRequireDocMsg = Rswift.StringResource(key: "ProductRequireDocMsg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Write your message...
      ///
      /// Locales: en, es
      static let lbl_ChatTransport_TextField = Rswift.StringResource(key: "lbl_ChatTransport_TextField", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Wrong PIN
      ///
      /// Locales: en, es
      static let hp_verify_pin_wrong_message = Rswift.StringResource(key: "hp_verify_pin_wrong_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Wrong code, the numbers you have entered do not match those entered previously, 
      ///
      /// Locales: en, es
      static let hp_create_pin_dont_match_first = Rswift.StringResource(key: "hp_create_pin_dont_match_first", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: YES
      ///
      /// Locales: en, es
      static let btn_AlertTransport_To_Yes = Rswift.StringResource(key: "btn_AlertTransport_To_Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Year must contain 2 digits
      ///
      /// Locales: en, es, English
      static let yearLength = Rswift.StringResource(key: "YearLength ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Year of expiration required
      ///
      /// Locales: en, es, English
      static let yearRequired = Rswift.StringResource(key: "YearRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, es, English
      static let si = Rswift.StringResource(key: "Si", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Yippee!
      ///
      /// Locales: en, es, English
      static let lbl_Yuu = Rswift.StringResource(key: "lbl_Yuu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You are about to cancel your scheduled order, your money will be refunded in the form of consumable credits within the app.
      ///
      /// Locales: en, es
      static let lblDescription1ConfirmCancelOrder = Rswift.StringResource(key: "lblDescription1ConfirmCancelOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You are about to cancel your scheduled order, your money will be returned to your card according to the process of each bank.
      ///
      /// Locales: en, es
      static let lblDescription2ConfirmCancelOrder = Rswift.StringResource(key: "lblDescription2ConfirmCancelOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You are about to cancel your trip  Are you sure you wish to continue?
      ///
      /// Locales: en, es, English
      static let cancelRideMessagePicking = Rswift.StringResource(key: "CancelRideMessagePicking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You are about to delete the card ****%@. Are you sure you want to continue
      ///
      /// Locales: en, es
      static let lbl_DeleteCardMessage = Rswift.StringResource(key: "lbl_DeleteCardMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You are about to make a call to the assigned driver, this action may generate an extra charge from your company on your credit. Are you sure you want to continue?
      ///
      /// Locales: en, es, English
      static let callMessagePicking = Rswift.StringResource(key: "CallMessagePicking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You are about to make a change to your route, this action can affect the cost and final time of the trip.
      ///
      /// Locales: en, es, English
      static let lbl_AlertTransport_Affect_Cost = Rswift.StringResource(key: "lbl_AlertTransport_Affect_Cost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You are about to make an emergency call to 911. Are you sure you want to continue?
      ///
      /// Locales: en, es, English
      static let callMessageOnWay = Rswift.StringResource(key: "CallMessageOnWay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You are about to pay
      ///
      /// Locales: en, es
      static let about_pay = Rswift.StringResource(key: "About_pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You can enjoy the products of this trade
      ///
      /// Locales: en, es, English
      static let cominSoonMessage = Rswift.StringResource(key: "CominSoonMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You can find this date in the front of your card, under the card number.
      ///
      /// Locales: en, es, English
      static let expCardInfoMessage = Rswift.StringResource(key: "ExpCardInfoMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You can find this date in the front of your card, under the card number.
      ///
      /// Locales: en, es, English
      static let lbl_CardInfo_Under_Card = Rswift.StringResource(key: "lbl_CardInfo_Under_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You can give an additional reward (Optional):
      ///
      /// Locales: en, es, English
      static let lbl_TipCell_Thanks_Sub = Rswift.StringResource(key: "lbl_TipCell_Thanks_Sub", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You can thank
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeGoodRating_Thank_you = Rswift.StringResource(key: "lbl_FinalizeGoodRating_Thank_you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You can thank to
      ///
      /// Locales: en, es, English
      static let lbl_TipCell_Thanks = Rswift.StringResource(key: "lbl_TipCell_Thanks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You can use this card in:
      ///
      /// Locales: en, es
      static let hp_lbl_qr_card_disabled = Rswift.StringResource(key: "hp_lbl_qr_card_disabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You do not have a registered credit card, please register one
      ///
      /// Locales: en, es
      static let no_Cards_Registered_Message = Rswift.StringResource(key: "No_Cards_Registered_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You don't have an account?
      ///
      /// Locales: en, es, English
      static let lbl_StartedPhoneAlternative_Not_Account = Rswift.StringResource(key: "lbl_StartedPhoneAlternative_Not_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You don't have an active order, ask what you need and we will bring it in minutes
      ///
      /// Locales: en, es, English
      static let lbl_no_active_order_notes = Rswift.StringResource(key: "lbl_no_active_order_notes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You don't have an active order.
      ///
      /// Locales: en, es, English
      static let lbl_no_active_orders = Rswift.StringResource(key: "lbl_no_active_orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You don't have an order history yet
      ///
      /// Locales: en, es, English
      static let pastOrders_Not_Order_History = Rswift.StringResource(key: "PastOrders_Not_Order_History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have
      ///
      /// Locales: en, es, English
      static let lbl_Main_Active = Rswift.StringResource(key: "lbl_Main_Active", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have 1 active order.
      ///
      /// Locales: en, es, English
      static let lbl_ActiveOrder_Active = Rswift.StringResource(key: "lbl_ActiveOrder_Active", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have 1 active order.
      ///
      /// Locales: en, es, English
      static let lbl_Main_Active_Order = Rswift.StringResource(key: "lbl_Main_Active_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have a FREE delivery
      ///
      /// Locales: en, es, English
      static let firstInstallTitle = Rswift.StringResource(key: "FirstInstallTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have a new Hugo version available, please update to enjoy our new features.
      ///
      /// Locales: en, es, English
      static let lbl_Update_Update_Version = Rswift.StringResource(key: "lbl_Update_Update_Version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have a pending order
      ///
      /// Locales: en, es, English
      static let draftExist = Rswift.StringResource(key: "DraftExist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have a pending payment. Please pay the former trip to use this function.
      ///
      /// Locales: en, es, English
      static let lbl_ConfirmOutstanding_Cancel_Trip = Rswift.StringResource(key: "lbl_ConfirmOutstanding_Cancel_Trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have a pending payment. Please pay the former trip to use this function.
      ///
      /// Locales: en, es, English
      static let lbl_Outstanding_pending = Rswift.StringResource(key: "lbl_Outstanding_pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have an order in your truck; if you want to change to this address your order will be automatically canceled. Do you want to continue?
      ///
      /// Locales: en, es, English
      static let wrongTerritoryAddressDeleteOrderMessage = Rswift.StringResource(key: "WrongTerritoryAddressDeleteOrderMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have charged
      ///
      /// Locales: en, es
      static let hp_CashinTransactionDetailViewController_ChargedLabel = Rswift.StringResource(key: "hp_CashinTransactionDetailViewController_ChargedLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You have exceeded the ATM transaction limit per day.
      ///
      /// Locales: en, es, English
      static let dailyLimitExceededMessage = Rswift.StringResource(key: "DailyLimitExceededMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have prizes that can apply for this order.
      ///
      /// Locales: en, es, English
      static let lbl_GetPrize_Apply_Order = Rswift.StringResource(key: "lbl_GetPrize_Apply_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You have sent
      ///
      /// Locales: en, es
      static let hp_transaction_detail_have_sent = Rswift.StringResource(key: "hp_transaction_detail_have_sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You have successfully completed your trip, you will receive an email with all the details
      ///
      /// Locales: en, es
      static let lbl_HeaderFinalizeRide_Success = Rswift.StringResource(key: "lbl_HeaderFinalizeRide_Success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You haven't won any awards yet
      ///
      /// Locales: en, es
      static let not_Awrad = Rswift.StringResource(key: "not_Awrad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must agree to terms and conditions
      ///
      /// Locales: en, es
      static let agree_Term_Condition = Rswift.StringResource(key: "Agree_Term_Condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must choose a card
      ///
      /// Locales: en, es
      static let hp_CashinMoneyConfirmation_CreditCardSelectionValidation = Rswift.StringResource(key: "hp_CashinMoneyConfirmation_CreditCardSelectionValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must enter the reference number
      ///
      /// Locales: en, es
      static let reference_Number = Rswift.StringResource(key: "Reference_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must have an active session, do you want to log in?
      ///
      /// Locales: en, es, English
      static let needLoginDesc = Rswift.StringResource(key: "NeedLoginDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You must have the location function active. Go to settings -> privacy
      ///
      /// Locales: en, es, English
      static let locationNeedToBeActive = Rswift.StringResource(key: "LocationNeedToBeActive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You must keep at least one address on your list
      ///
      /// Locales: en, es
      static let atlest_One_address = Rswift.StringResource(key: "Atlest_One_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must select a payment method
      ///
      /// Locales: en, es, English
      static let paymentRequiredWarningMessage = Rswift.StringResource(key: "PaymentRequiredWarningMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You must select a territory in order to access to payment methods.
      ///
      /// Locales: en, es
      static let access_CC = Rswift.StringResource(key: "Access_CC", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must select a territory in order to create an address.
      ///
      /// Locales: en, es
      static let create_Address = Rswift.StringResource(key: "Create_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must select an option
      ///
      /// Locales: en, es
      static let select_Option = Rswift.StringResource(key: "Select_Option", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must select billing information to continue with your order.
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_billing_required = Rswift.StringResource(key: "alert_ProcessOrder_billing_required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must select the required options
      ///
      /// Locales: en, es, English
      static let orderRequiredOptions = Rswift.StringResource(key: "OrderRequiredOptions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: You must upload your payment image in Pago Móvil to continue with your order.
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_pagomovil_image_required = Rswift.StringResource(key: "alert_ProcessOrder_pagomovil_image_required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must upload your payment image in Paypal to continue with your order.
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_paypal_image_required = Rswift.StringResource(key: "alert_ProcessOrder_paypal_image_required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must upload your payment image in Pipol Pay to continue with your order.
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_pipolpay_image_required = Rswift.StringResource(key: "alert_ProcessOrder_pipolpay_image_required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must upload your payment image in Reserve to continue with your order.
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_reserve_image_required = Rswift.StringResource(key: "alert_ProcessOrder_reserve_image_required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must upload your payment image in Venmo to continue with your order.
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_venmo_image_required = Rswift.StringResource(key: "alert_ProcessOrder_venmo_image_required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You must upload your payment image in Zelle to continue with your order.
      ///
      /// Locales: en, es
      static let alert_ProcessOrder_zelle_image_required = Rswift.StringResource(key: "alert_ProcessOrder_zelle_image_required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You're about to end your trip
      ///
      /// Locales: en, es
      static let lbl_ConfirmCancelRide_Desc = Rswift.StringResource(key: "lbl_ConfirmCancelRide_Desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You're about to log in with the following number  %@
      ///
      /// Locales: en, es
      static let title_Number = Rswift.StringResource(key: "title_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You're about to recharge
      ///
      /// Locales: en, es
      static let about_Recharge = Rswift.StringResource(key: "About_Recharge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Your PIN must be 4 digits
      ///
      /// Locales: en, es
      static let hp_temporary_code_label_text = Rswift.StringResource(key: "hp_temporary_code_label_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Your account has been created successfully!
      ///
      /// Locales: en, es
      static let lbl_SignUpFinalize_Sucessfully = Rswift.StringResource(key: "lbl_SignUpFinalize_Sucessfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Your address will be saved in this way:
      ///
      /// Locales: en, es, English
      static let lbl_Address_Save = Rswift.StringResource(key: "lbl_Address_Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your addresses
      ///
      /// Locales: en, es, English
      static let lbl_ProfileOptions_Address = Rswift.StringResource(key: "lbl_ProfileOptions_Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your cart already contains and item from a different store. Would you like to clear the cart and add this item instead?
      ///
      /// Locales: en, es, English
      static let orderNoSamePartner = Rswift.StringResource(key: "OrderNoSamePartner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your chat is no longer active!
      ///
      /// Locales: en, es, English
      static let errorChatTitle = Rswift.StringResource(key: "ErrorChatTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your item(s) must fit in our backpack.
      ///
      /// Locales: en, es, English
      static let lbl_WriteDescription_Item_BackPack = Rswift.StringResource(key: "lbl_WriteDescription_Item_BackPack", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your location is important for us, we'd like to know your location to offer the best Delivery experience.
      ///
      /// Locales: en, es, English
      static let lbl_WhereAreYou_Sub_Heading = Rswift.StringResource(key: "lbl_WhereAreYou_Sub_Heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your new balance has been updated
      ///
      /// Locales: en, es
      static let hp_CashinSucessViewController_subtitle = Rswift.StringResource(key: "hp_CashinSucessViewController_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Your order in
      ///
      /// Locales: en, es
      static let lbl_OrderSummary_Title_Partner = Rswift.StringResource(key: "lbl_OrderSummary_Title_Partner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Your order information
      ///
      /// Locales: en, es
      static let lbl_order_information = Rswift.StringResource(key: "lbl_order_information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Your order was delivered by:
      ///
      /// Locales: en, es, English
      static let lbl_RatingView_Order_Delovered = Rswift.StringResource(key: "lbl_RatingView_Order_Delovered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your order was scheduled. We'll notify you when your scheduled delivery begins.
      ///
      /// Locales: en, es, English
      static let lbl_RatingView_Order_Processed = Rswift.StringResource(key: "lbl_RatingView_Order_Processed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your payment has been processed successfully, the progress will be notified
      ///
      /// Locales: en, es, English
      static let lbl_Processed_Sucessfully = Rswift.StringResource(key: "lbl_Processed_Sucessfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your request has been received and is being processed. We will notify the progress.
      ///
      /// Locales: en, es, English
      static let lbl_OrderFinished_Request_Received = Rswift.StringResource(key: "lbl_OrderFinished_Request_Received", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your temporary code has been sent to
      ///
      /// Locales: en, es
      static let hp_full_reset_pin_subtitle = Rswift.StringResource(key: "hp_full_reset_pin_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Your total is:
      ///
      /// Locales: en, es, English
      static let lbl_HeaderFinalizeRide_Total = Rswift.StringResource(key: "lbl_HeaderFinalizeRide_Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Your total to cancel through %@ is
      ///
      /// Locales: en, es
      static let lbl_PaymentTypeSelection_Pay_Total = Rswift.StringResource(key: "lbl_PaymentTypeSelection_Pay_Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Yuca Fritag con Parmesano Yuca Fritag con Parmesano
      ///
      /// Locales: en, es, English
      static let lbl_ProductNormal_Title = Rswift.StringResource(key: "lbl_ProductNormal_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Yuca Fritag with Parmesan cheeseYuca Fritag with Parmesan cheese
      ///
      /// Locales: en, es, English
      static let lbl_PartnerProduct_Tiltle = Rswift.StringResource(key: "lbl_PartnerProduct_Tiltle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: Yummy Support
      ///
      /// Locales: en, es
      static let lbl_Yummy_Support = Rswift.StringResource(key: "lbl_Yummy_Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Yummy is collecting your order, there isn't tracking information still. You can tap the icon above to see the history of your order.
      ///
      /// Locales: en, es
      static let lbl_yummy_picking_activ_order_info = Rswift.StringResource(key: "lbl_yummy_picking_activ_order_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Zone
      ///
      /// Locales: en, es
      static let lbl_AddressBook_State_GT = Rswift.StringResource(key: "lbl_AddressBook_State_GT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: __min__ minimum
      ///
      /// Locales: en, es, English
      static let min = Rswift.StringResource(key: "Min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: active order
      ///
      /// Locales: en, es, English
      static let lbl_Main_Active_OrderCount = Rswift.StringResource(key: "lbl_Main_Active_OrderCount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: active orders
      ///
      /// Locales: en, es
      static let lbl_Main_Active_Orders_Count = Rswift.StringResource(key: "lbl_Main_Active_Orders_Count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: back!
      ///
      /// Locales: en, es, English
      static let lbl_LoginWithPassword_UserName = Rswift.StringResource(key: "lbl_LoginWithPassword_UserName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: charge
      ///
      /// Locales: en, es, English
      static let lbl_RideSummaryCars_Cargo = Rswift.StringResource(key: "lbl_RideSummaryCars_Cargo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: close
      ///
      /// Locales: en, es, English
      static let lbl_To_Close = Rswift.StringResource(key: "lbl_To_Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: digits of the code that you will find on the back of your card.
      ///
      /// Locales: en, es
      static let cvcDescAutorization_End = Rswift.StringResource(key: "CVCDescAutorization_End", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: e-mail
      ///
      /// Locales: en, es, English
      static let lbl_EmailInfo_Email_Title = Rswift.StringResource(key: "lbl_EmailInfo_Email_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: eExtra description
      ///
      /// Locales: en, es, English
      static let lbl_OptionsInfo_Extra_Descripation = Rswift.StringResource(key: "lbl_OptionsInfo_Extra_Descripation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: hide
      ///
      /// Locales: en, es, English
      static let lbl_Hide = Rswift.StringResource(key: "lbl_Hide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: hour
      ///
      /// Locales: en, es
      static let hp_lbl_qr_card_remaining_value = Rswift.StringResource(key: "hp_lbl_qr_card_remaining_value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: hours
      ///
      /// Locales: en, es
      static let hp_lbl_qr_card_remaining_time_value = Rswift.StringResource(key: "hp_lbl_qr_card_remaining_time_value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: hugo Support
      ///
      /// Locales: en, es, English
      static let lbl_Hugo_Support = Rswift.StringResource(key: "lbl_Hugo_Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: hugoPay!
      ///
      /// Locales: en, es
      static let hp_CashinSucessViewController_HugoPay = Rswift.StringResource(key: "hp_CashinSucessViewController_HugoPay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: km
      ///
      /// Locales: en, es, English
      static let km_UNITS = Rswift.StringResource(key: "KM_UNITS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: lbl_Cancel_Trip
      ///
      /// Locales: en, es, English
      static let cancelRideTitlePicking = Rswift.StringResource(key: "CancelRideTitlePicking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: lbl_Cash
      ///
      /// Locales: en, es, English
      static let cashLabel = Rswift.StringResource(key: "CashLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: lbl_End_Trip
      ///
      /// Locales: en, es, English
      static let cancelRideTitleOnWay = Rswift.StringResource(key: "CancelRideTitleOnWay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: lbl_To_Accept
      ///
      /// Locales: en, es, English
      static let acceptLabel = Rswift.StringResource(key: "AcceptLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: lbl_To_Accept
      ///
      /// Locales: en, es, English
      static let locationChangedAcceptLabelBtn = Rswift.StringResource(key: "LocationChangedAcceptLabelBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: lbl_To_Close
      ///
      /// Locales: en, es, English
      static let closeLabel = Rswift.StringResource(key: "CloseLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: loading…
      ///
      /// Locales: en, es, English
      static let lbl_Loading = Rswift.StringResource(key: "lbl_Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: need to pay today?
      ///
      /// Locales: en, es, English
      static let lbl_TitlPayService_Pay_Today = Rswift.StringResource(key: "lbl_TitlPayService_Pay_Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: out of
      ///
      /// Locales: en, es
      static let progress_Profile_title_component = Rswift.StringResource(key: "Progress_Profile_title_component", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: recover password
      ///
      /// Locales: en, es
      static let hp_block_account_button = Rswift.StringResource(key: "hp_block_account_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ricardo_lopez@gmail.com
      ///
      /// Locales: en, es, English
      static let lbl_InfoUser_Email = Rswift.StringResource(key: "lbl_InfoUser_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: sample info
      ///
      /// Locales: en, es, English
      static let lbl_Optionrecover_sample_info = Rswift.StringResource(key: "lbl_Optionrecover_sample_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: sample@mail.com
      ///
      /// Locales: en, es, English
      static let lbl_ValidateRecoverCode_Email = Rswift.StringResource(key: "lbl_ValidateRecoverCode_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: see detail
      ///
      /// Locales: en, es, English
      static let lbl_See_Detail = Rswift.StringResource(key: "lbl_See_Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: soon in hugo
      ///
      /// Locales: en, es
      static let hp_very_soon_title = Rswift.StringResource(key: "hp_very_soon_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: successfully
      ///
      /// Locales: en, es
      static let hp_transaction_detail_successfully_title = Rswift.StringResource(key: "hp_transaction_detail_successfully_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: terms and conditions
      ///
      /// Locales: en, es
      static let lbl_Step1_Term_Condition = Rswift.StringResource(key: "lbl_Step1_Term_Condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: test
      ///
      /// Locales: en, es
      static let test_Small = Rswift.StringResource(key: "test_Small", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: test
      ///
      /// Locales: en, es, English
      static let lbl_FinalizeRideNew_test = Rswift.StringResource(key: "lbl_FinalizeRideNew_test", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: textoooooooooooorretrtrtertertertertertrtrt
      ///
      /// Locales: en, es, English
      static let lbl_ImprovementList_Details = Rswift.StringResource(key: "lbl_ImprovementList_Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: to
      ///
      /// Locales: en, es
      static let hp_full_TransactionFiltersViewController_TransactionAmountTo = Rswift.StringResource(key: "hp_full_TransactionFiltersViewController_TransactionAmountTo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: to order
      ///
      /// Locales: en, es
      static let lbl_OrderSummary_Add_To_Order = Rswift.StringResource(key: "lbl_OrderSummary_Add_To_Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: to your card
      ///
      /// Locales: en, es
      static let hp_CashinTransactionDetailViewController_CardLabel = Rswift.StringResource(key: "hp_CashinTransactionDetailViewController_CardLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: we have detected that your shipping address is no longer valid in the place where you are
      ///
      /// Locales: en, es, English
      static let locationChangedMessage = Rswift.StringResource(key: "LocationChangedMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: where it is convenient for you to withdraw your order
      ///
      /// Locales: en, es
      static let selectSucursalSubtitle = Rswift.StringResource(key: "SelectSucursalSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: with instant access to the best products and service around.
      ///
      /// Locales: en, es
      static let lbl_WhatIsHugo_Cell_Everthing_You = Rswift.StringResource(key: "lbl_WhatIsHugo_Cell_Everthing_You", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: you must enter the last
      ///
      /// Locales: en, es
      static let cvcDescAutorization_Middle = Rswift.StringResource(key: "CVCDescAutorization_Middle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ¡Add your first card and start your hugo experience!
      ///
      /// Locales: en, es
      static let first_Card = Rswift.StringResource(key: "First_Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ¡Get started with hugoPay!
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_list_emptysubtitle = Rswift.StringResource(key: "hp_lbl_transaction_list_emptysubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ¡Hi %@! Start taking to your driver.
      ///
      /// Locales: en, es, English
      static let lbl_ChatEmpty_Title = Rswift.StringResource(key: "lbl_ChatEmpty_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: ¡Keep your account Safe!
      ///
      /// Locales: en, es
      static let hp_lbl_account_keepsafe = Rswift.StringResource(key: "hp_lbl_account_keepsafe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ¡Order transactions as you like!
      ///
      /// Locales: en, es
      static let hp_lbl_transaction_filter_description = Rswift.StringResource(key: "hp_lbl_transaction_filter_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ¡Payment Sent!
      ///
      /// Locales: en, es
      static let hp_full_send_money_success_title = Rswift.StringResource(key: "hp_full_send_money_success_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ¡Request Sent!
      ///
      /// Locales: en, es
      static let hp_full_request_money_success_title = Rswift.StringResource(key: "hp_full_request_money_success_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ¡Soon!
      ///
      /// Locales: en, es
      static let hp_expense_control_body_title = Rswift.StringResource(key: "hp_expense_control_body_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ¡Thanks for your understanding!
      ///
      /// Locales: en, es
      static let lbl_schedule_understanding_msg = Rswift.StringResource(key: "lbl_schedule_understanding_msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: • It must have at least 8 characters
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_Length_Text = Rswift.StringResource(key: "lbl_CreateFBPassword_Length_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: • It must have at least 8 characters
      ///
      /// Locales: en, es, English
      static let lbl_UpdatePassword_Minimum_msg = Rswift.StringResource(key: "lbl_UpdatePassword_Minimum_msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: • Use at least a capital letter
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_UpperCase_Text = Rswift.StringResource(key: "lbl_CreateFBPassword_UpperCase_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: • Use at least a capital letter
      ///
      /// Locales: en, es, English
      static let lbl_UpdatePassword_Used_UpperCase = Rswift.StringResource(key: "lbl_UpdatePassword_Used_UpperCase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: • Use at least a lower case letter
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_LowerCase_Text = Rswift.StringResource(key: "lbl_CreateFBPassword_LowerCase_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: • Use at least a lower case letter
      ///
      /// Locales: en, es, English
      static let lbl_UpdatePassword_Used_LowerCase = Rswift.StringResource(key: "lbl_UpdatePassword_Used_LowerCase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: • Use at least a number
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_Number_Text = Rswift.StringResource(key: "lbl_CreateFBPassword_Number_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: • Use at least a number
      ///
      /// Locales: en, es, English
      static let lbl_UpdatePassword_Used_Number = Rswift.StringResource(key: "lbl_UpdatePassword_Used_Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: • Use at least a symbol
      ///
      /// Locales: en, es, English
      static let lbl_CreateFBPassword_Symbol_Text = Rswift.StringResource(key: "lbl_CreateFBPassword_Symbol_Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)
      /// en translation: • Use at least a symbol
      ///
      /// Locales: en, es, English
      static let lbl_UpdatePassword_Used_Symbol = Rswift.StringResource(key: "lbl_UpdatePassword_Used_Symbol", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "English"], comment: nil)

      /// en translation: 
      ///
      /// Locales: en, es, English
      static func errorCDSubTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ErrorCDSubTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ErrorCDSubTitle"
        }

        return NSLocalizedString("ErrorCDSubTitle", bundle: bundle, comment: "")
      }

      /// en translation: 
      ///
      /// Locales: en, es, English
      static func hotZoneSubTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HotZoneSubTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HotZoneSubTitle"
        }

        return NSLocalizedString("HotZoneSubTitle", bundle: bundle, comment: "")
      }

      /// en translation:      1. Write the address where we will pick up your package (Point A)      2. Write the address where we will deliver your package (Point B)      3. Tell us what Hugo should do at Point A (Request the keys to ...)      4. Tell us what Hugo should do at point B (leave the keys with ...)      5. Add a photo for a better explanation (Optional)      Ready! It's that easy      * Remember that we transport anything, that fits on the motorcycle * 
      ///
      /// Locales: en, es, English
      static func infoShipment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InfoShipment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InfoShipment"
        }

        return NSLocalizedString("InfoShipment", bundle: bundle, comment: "")
      }

      /// en translation:   Ready! We have sent the code again
      ///
      /// Locales: en, es
      static func lbl_Step2_Send_Code_Ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Send_Code_Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Send_Code_Ready"
        }

        return NSLocalizedString("lbl_Step2_Send_Code_Ready", bundle: bundle, comment: "")
      }

      /// en translation:  @ name is on the way.
      ///
      /// Locales: en, es, English
      static func lbl_Information_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Information_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Information_Name"
        }

        return NSLocalizedString("lbl_Information_Name", bundle: bundle, comment: "")
      }

      /// en translation:  @vehicleModel - @color
      ///
      /// Locales: en, es, English
      static func lbl_Information_Model(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Information_Model", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Information_Model"
        }

        return NSLocalizedString("lbl_Information_Model", bundle: bundle, comment: "")
      }

      /// en translation:  @vehiclePlate
      ///
      /// Locales: en, es, English
      static func lbl_Information_Plate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Information_Plate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Information_Plate"
        }

        return NSLocalizedString("lbl_Information_Plate", bundle: bundle, comment: "")
      }

      /// en translation:  Add something else
      ///
      /// Locales: en, es, English
      static func btn_OrderSummary_Add_Something(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_OrderSummary_Add_Something", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_OrderSummary_Add_Something"
        }

        return NSLocalizedString("btn_OrderSummary_Add_Something", bundle: bundle, comment: "")
      }

      /// en translation:  Call 911
      ///
      /// Locales: en, es, English
      static func lbl_EmergencyOn_Call(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EmergencyOn_Call", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EmergencyOn_Call"
        }

        return NSLocalizedString("lbl_EmergencyOn_Call", bundle: bundle, comment: "")
      }

      /// en translation:  Closed
      ///
      /// Locales: en, es, English
      static func lbl_PartnerFeedTable_Closed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerFeedTable_Closed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerFeedTable_Closed"
        }

        return NSLocalizedString("lbl_PartnerFeedTable_Closed", bundle: bundle, comment: "")
      }

      /// en translation:  EDIT ROUTE
      ///
      /// Locales: en, es, English
      static func btn_RouteCell_Edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_RouteCell_Edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_RouteCell_Edit"
        }

        return NSLocalizedString("btn_RouteCell_Edit", bundle: bundle, comment: "")
      }

      /// en translation:  Edit my telephone number.
      ///
      /// Locales: en, es, English
      static func lbl_PreferencesSubtitle_Edit_Phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PreferencesSubtitle_Edit_Phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PreferencesSubtitle_Edit_Phone"
        }

        return NSLocalizedString("lbl_PreferencesSubtitle_Edit_Phone", bundle: bundle, comment: "")
      }

      /// en translation:  He will arrive in @time
      ///
      /// Locales: en, es, English
      static func lbl_Information_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Information_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Information_time"
        }

        return NSLocalizedString("lbl_Information_time", bundle: bundle, comment: "")
      }

      /// en translation:  MODIFY LIST
      ///
      /// Locales: en, es, English
      static func btn_ListView_Modify_List(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ListView_Modify_List", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ListView_Modify_List"
        }

        return NSLocalizedString("btn_ListView_Modify_List", bundle: bundle, comment: "")
      }

      /// en translation:  Select the quantity.
      ///
      /// Locales: en, es, English
      static func lbl_OptionsQtyCell_Qty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OptionsQtyCell_Qty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OptionsQtyCell_Qty"
        }

        return NSLocalizedString("lbl_OptionsQtyCell_Qty", bundle: bundle, comment: "")
      }

      /// en translation:  Stop place (B)
      ///
      /// Locales: en, es, English
      static func lbl_PaymentLocation_Stop_Place(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PaymentLocation_Stop_Place", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PaymentLocation_Stop_Place"
        }

        return NSLocalizedString("lbl_PaymentLocation_Stop_Place", bundle: bundle, comment: "")
      }

      /// en translation:  YOUR TRANSPORTATION WILL ARRIVE IN 4 MIN.!
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide2_Arrives_Time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide2_Arrives_Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide2_Arrives_Time"
        }

        return NSLocalizedString("lbl_PickingRide2_Arrives_Time", bundle: bundle, comment: "")
      }

      /// en translation:  to the number 
      ///
      /// Locales: en, es
      static func to_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("To_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "To_Number"
        }

        return NSLocalizedString("To_Number", bundle: bundle, comment: "")
      }

      /// en translation: $10 minimum
      ///
      /// Locales: en, es, English
      static func lbl_PartnerTable_Minimum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerTable_Minimum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerTable_Minimum"
        }

        return NSLocalizedString("lbl_PartnerTable_Minimum", bundle: bundle, comment: "")
      }

      /// en translation: $100,999.95 minimum
      ///
      /// Locales: en, es, English
      static func lbl_PartnerFeedTable_Minimum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerFeedTable_Minimum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerFeedTable_Minimum"
        }

        return NSLocalizedString("lbl_PartnerFeedTable_Minimum", bundle: bundle, comment: "")
      }

      /// en translation: $amount
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeRide_Amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_Amount"
        }

        return NSLocalizedString("lbl_FinalizeRide_Amount", bundle: bundle, comment: "")
      }

      /// en translation: (Soon)
      ///
      /// Locales: en, es
      static func hp_tutorial_control_soon_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_tutorial_control_soon_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_tutorial_control_soon_title"
        }

        return NSLocalizedString("hp_tutorial_control_soon_title", bundle: bundle, comment: "")
      }

      /// en translation: * Required
      ///
      /// Locales: en, es
      static func lbl_AddressBook_Required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Required"
        }

        return NSLocalizedString("lbl_AddressBook_Required", bundle: bundle, comment: "")
      }

      /// en translation: * You must enter a valid email
      ///
      /// Locales: en, es, English
      static func emailRequiredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EmailRequiredTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "EmailRequiredTitle"
        }

        return NSLocalizedString("EmailRequiredTitle", bundle: bundle, comment: "")
      }

      /// en translation: ** Minimum amount to charge 
      ///
      /// Locales: en, es
      static func hp_CashInMoneyIncome_MinimumAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashInMoneyIncome_MinimumAmount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashInMoneyIncome_MinimumAmount"
        }

        return NSLocalizedString("hp_CashInMoneyIncome_MinimumAmount", bundle: bundle, comment: "")
      }

      /// en translation: 00000000000000
      ///
      /// Locales: en, es
      static func receipt_configuration_document_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_document_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_document_placeholder"
        }

        return NSLocalizedString("receipt_configuration_document_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 00:00
      ///
      /// Locales: en, es, English
      static func lbl_order_estimation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_order_estimation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_order_estimation"
        }

        return NSLocalizedString("lbl_order_estimation", bundle: bundle, comment: "")
      }

      /// en translation: 1 of 3
      ///
      /// Locales: en, es
      static func lbl_Step1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1"
        }

        return NSLocalizedString("lbl_Step1", bundle: bundle, comment: "")
      }

      /// en translation: 1-9 passengers
      ///
      /// Locales: en, English
      static func lbl_RideMap_passenger(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideMap_passenger", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideMap_passenger"
        }

        return NSLocalizedString("lbl_RideMap_passenger", bundle: bundle, comment: "")
      }

      /// en translation: 1. First article on the list
      ///
      /// Locales: en, es, English
      static func lbl_First_Time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_First_Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_First_Time"
        }

        return NSLocalizedString("lbl_First_Time", bundle: bundle, comment: "")
      }

      /// en translation: 1. Product Name
      ///
      /// Locales: en, es, English
      static func lbl_ListView_Product_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ListView_Product_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ListView_Product_Name"
        }

        return NSLocalizedString("lbl_ListView_Product_Name", bundle: bundle, comment: "")
      }

      /// en translation: 101-2563-123-8
      ///
      /// Locales: en, es, English
      static func billing_cell_nit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("billing_cell_nit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "billing_cell_nit"
        }

        return NSLocalizedString("billing_cell_nit", bundle: bundle, comment: "")
      }

      /// en translation: 10:00 am
      ///
      /// Locales: en, es, English
      static func lbl_cell_order_tracking_info_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_cell_order_tracking_info_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_cell_order_tracking_info_time"
        }

        return NSLocalizedString("lbl_cell_order_tracking_info_time", bundle: bundle, comment: "")
      }

      /// en translation: 10:00am - 10:30pm
      ///
      /// Locales: en, es, English
      static func lbl_PartnerTable_Time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerTable_Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerTable_Time"
        }

        return NSLocalizedString("lbl_PartnerTable_Time", bundle: bundle, comment: "")
      }

      /// en translation: 140 restaurants
      ///
      /// Locales: en, es, English
      static func lbl_Service_Restaurants(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Service_Restaurants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Service_Restaurants"
        }

        return NSLocalizedString("lbl_Service_Restaurants", bundle: bundle, comment: "")
      }

      /// en translation: 2 of 2
      ///
      /// Locales: en, es
      static func lbl_Step2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2"
        }

        return NSLocalizedString("lbl_Step2", bundle: bundle, comment: "")
      }

      /// en translation: 2- Which was the last business you had contact with?
      ///
      /// Locales: en, es, English
      static func lbl_Last_Trade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Last_Trade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Last_Trade"
        }

        return NSLocalizedString("lbl_Last_Trade", bundle: bundle, comment: "")
      }

      /// en translation: 2. Product Name
      ///
      /// Locales: en, es, English
      static func lbl_ListView_Product2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ListView_Product2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ListView_Product2"
        }

        return NSLocalizedString("lbl_ListView_Product2", bundle: bundle, comment: "")
      }

      /// en translation: 3 of 3
      ///
      /// Locales: en, es
      static func lbl_Step3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step3"
        }

        return NSLocalizedString("lbl_Step3", bundle: bundle, comment: "")
      }

      /// en translation: 3.  Product Name
      ///
      /// Locales: en, es, English
      static func lbl_ListView_Product3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ListView_Product3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ListView_Product3"
        }

        return NSLocalizedString("lbl_ListView_Product3", bundle: bundle, comment: "")
      }

      /// en translation: 30-40 min.
      ///
      /// Locales: en, es, English
      static func lbl_PartnerTable_Minutes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerTable_Minutes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerTable_Minutes"
        }

        return NSLocalizedString("lbl_PartnerTable_Minutes", bundle: bundle, comment: "")
      }

      /// en translation: 35 min.
      ///
      /// Locales: en, es, English
      static func lbl_PartnerFeedTable_Mintues(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerFeedTable_Mintues", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerFeedTable_Mintues"
        }

        return NSLocalizedString("lbl_PartnerFeedTable_Mintues", bundle: bundle, comment: "")
      }

      /// en translation: 4.  Product Name
      ///
      /// Locales: en, es, English
      static func lbl_ListView_Product4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ListView_Product4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ListView_Product4"
        }

        return NSLocalizedString("lbl_ListView_Product4", bundle: bundle, comment: "")
      }

      /// en translation: 5.  Product Name
      ///
      /// Locales: en, es, English
      static func lbl_ListView_Product5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ListView_Product5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ListView_Product5"
        }

        return NSLocalizedString("lbl_ListView_Product5", bundle: bundle, comment: "")
      }

      /// en translation: 8-16 character password
      ///
      /// Locales: en, es
      static func createPassword_Eight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CreatePassword_Eight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CreatePassword_Eight"
        }

        return NSLocalizedString("CreatePassword_Eight", bundle: bundle, comment: "")
      }

      /// en translation: 91 Avenida Norte, San Salvador …
      ///
      /// Locales: en, es, English
      static func lbl_RideOrderTable_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideOrderTable_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideOrderTable_Address"
        }

        return NSLocalizedString("lbl_RideOrderTable_Address", bundle: bundle, comment: "")
      }

      /// en translation: A capital letter
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Capital_Later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Capital_Later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Capital_Later"
        }

        return NSLocalizedString("lbl_CreatePassword_Capital_Later", bundle: bundle, comment: "")
      }

      /// en translation: A help request has been sent.
      ///
      /// Locales: en, es, English
      static func lbl_CustomCall_Sent_Help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CustomCall_Sent_Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CustomCall_Sent_Help"
        }

        return NSLocalizedString("lbl_CustomCall_Sent_Help", bundle: bundle, comment: "")
      }

      /// en translation: A minimum of 8 characters
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Minimum_Eight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Minimum_Eight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Minimum_Eight"
        }

        return NSLocalizedString("lbl_CreatePassword_Minimum_Eight", bundle: bundle, comment: "")
      }

      /// en translation: A new order will be loaded, if you have an unprocessed order it will be replaced. Do you want to continue?
      ///
      /// Locales: en, es, English
      static func tokenLoadNewOrderMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokenLoadNewOrderMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokenLoadNewOrderMessage"
        }

        return NSLocalizedString("tokenLoadNewOrderMessage", bundle: bundle, comment: "")
      }

      /// en translation: A number
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Number"
        }

        return NSLocalizedString("lbl_CreatePassword_Number", bundle: bundle, comment: "")
      }

      /// en translation: A session is needed
      ///
      /// Locales: en, es, English
      static func needLoginTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NeedLoginTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NeedLoginTitle"
        }

        return NSLocalizedString("NeedLoginTitle", bundle: bundle, comment: "")
      }

      /// en translation: A three digit code on your credit card can be found on the back of your card.
      ///
      /// Locales: en, es, English
      static func cvcCardInfoMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CVCCardInfoMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CVCCardInfoMessage"
        }

        return NSLocalizedString("CVCCardInfoMessage", bundle: bundle, comment: "")
      }

      /// en translation: ABOUT HUGO
      ///
      /// Locales: en, es, English
      static func lbl_About_Hugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_About_Hugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_About_Hugo"
        }

        return NSLocalizedString("lbl_About_Hugo", bundle: bundle, comment: "")
      }

      /// en translation: ABOUT YUMMY
      ///
      /// Locales: en, es
      static func lbl_About_Yummy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_About_Yummy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_About_Yummy"
        }

        return NSLocalizedString("lbl_About_Yummy", bundle: bundle, comment: "")
      }

      /// en translation: ACCEPT
      ///
      /// Locales: en, es, English
      static func lbl_To_Accept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_To_Accept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_To_Accept"
        }

        return NSLocalizedString("lbl_To_Accept", bundle: bundle, comment: "")
      }

      /// en translation: ACSA Insurance
      ///
      /// Locales: en, es, English
      static func lbl_ProvidersPayServices_Insurance_ACSA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProvidersPayServices_Insurance_ACSA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProvidersPayServices_Insurance_ACSA"
        }

        return NSLocalizedString("lbl_ProvidersPayServices_Insurance_ACSA", bundle: bundle, comment: "")
      }

      /// en translation: ACTIVE
      ///
      /// Locales: en, es
      static func lbl_Active_orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Active_orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Active_orders"
        }

        return NSLocalizedString("lbl_Active_orders", bundle: bundle, comment: "")
      }

      /// en translation: ACTIVE ORDERS
      ///
      /// Locales: en, es, English
      static func btn_active_orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_active_orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_active_orders"
        }

        return NSLocalizedString("btn_active_orders", bundle: bundle, comment: "")
      }

      /// en translation: ADD
      ///
      /// Locales: en, es, English
      static func btn_ChooseAddressIcon_Add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ChooseAddressIcon_Add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ChooseAddressIcon_Add"
        }

        return NSLocalizedString("btn_ChooseAddressIcon_Add", bundle: bundle, comment: "")
      }

      /// en translation: ADD
      ///
      /// Locales: en, es, English
      static func btn_PaymentTypeHeader_Add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_PaymentTypeHeader_Add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_PaymentTypeHeader_Add"
        }

        return NSLocalizedString("btn_PaymentTypeHeader_Add", bundle: bundle, comment: "")
      }

      /// en translation: ADD DATA
      ///
      /// Locales: en, es
      static func btn_Add_Billing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Add_Billing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Add_Billing"
        }

        return NSLocalizedString("btn_Add_Billing", bundle: bundle, comment: "")
      }

      /// en translation: ADD STOP
      ///
      /// Locales: en, es, English
      static func btn_AddressInit_Add_Stop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_AddressInit_Add_Stop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_AddressInit_Add_Stop"
        }

        return NSLocalizedString("btn_AddressInit_Add_Stop", bundle: bundle, comment: "")
      }

      /// en translation: ADD TO ORDER
      ///
      /// Locales: en, es
      static func btn_add_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_add_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_add_order"
        }

        return NSLocalizedString("btn_add_order", bundle: bundle, comment: "")
      }

      /// en translation: ADDRESS
      ///
      /// Locales: en, es
      static func lbl_Ubication_Direction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Ubication_Direction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Ubication_Direction"
        }

        return NSLocalizedString("lbl_Ubication_Direction", bundle: bundle, comment: "")
      }

      /// en translation: ADDRESS A
      ///
      /// Locales: en, es
      static func address_A(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address_A", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address_A"
        }

        return NSLocalizedString("Address_A", bundle: bundle, comment: "")
      }

      /// en translation: ADDRESS B
      ///
      /// Locales: en, es
      static func address_B(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address_B", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address_B"
        }

        return NSLocalizedString("Address_B", bundle: bundle, comment: "")
      }

      /// en translation: ADDRESS C
      ///
      /// Locales: en, es
      static func address_C(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address_C", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address_C"
        }

        return NSLocalizedString("Address_C", bundle: bundle, comment: "")
      }

      /// en translation: ADDRESS DETAILS
      ///
      /// Locales: en, es, English
      static func lbl_WriteDescription_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WriteDescription_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WriteDescription_Address"
        }

        return NSLocalizedString("lbl_WriteDescription_Address", bundle: bundle, comment: "")
      }

      /// en translation: AGREE
      ///
      /// Locales: en, es
      static func btn_Agree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Agree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Agree"
        }

        return NSLocalizedString("btn_Agree", bundle: bundle, comment: "")
      }

      /// en translation: ALL BRANCHES
      ///
      /// Locales: en, es
      static func selectSucursalTitleAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectSucursalTitleAll", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectSucursalTitleAll"
        }

        return NSLocalizedString("SelectSucursalTitleAll", bundle: bundle, comment: "")
      }

      /// en translation: ALL SET!
      ///
      /// Locales: en, es, English
      static func lbl_RatingView_Ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingView_Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingView_Ready"
        }

        return NSLocalizedString("lbl_RatingView_Ready", bundle: bundle, comment: "")
      }

      /// en translation: ATTENTION!
      ///
      /// Locales: en, es, English
      static func lbl_Attenting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Attenting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Attenting"
        }

        return NSLocalizedString("lbl_Attenting", bundle: bundle, comment: "")
      }

      /// en translation: Absolute
      ///
      /// Locales: en, es, English
      static func lbl_GLIndexed_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_GLIndexed_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_GLIndexed_Title"
        }

        return NSLocalizedString("lbl_GLIndexed_Title", bundle: bundle, comment: "")
      }

      /// en translation: Accept
      ///
      /// Locales: en, es, English
      static func btn_AlertTransport_To_Accept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_AlertTransport_To_Accept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_AlertTransport_To_Accept"
        }

        return NSLocalizedString("btn_AlertTransport_To_Accept", bundle: bundle, comment: "")
      }

      /// en translation: Access required
      ///
      /// Locales: en, es, English
      static func accessRequiredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AccessRequiredTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AccessRequiredTitle"
        }

        return NSLocalizedString("AccessRequiredTitle", bundle: bundle, comment: "")
      }

      /// en translation: Access to the camera is required to perform the credit card scan
      ///
      /// Locales: en, es, English
      static func accessToCameraExplanation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AccessToCameraExplanation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AccessToCameraExplanation"
        }

        return NSLocalizedString("AccessToCameraExplanation", bundle: bundle, comment: "")
      }

      /// en translation: Accredited card!
      ///
      /// Locales: en, es
      static func hp_CashinSucessViewController_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinSucessViewController_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinSucessViewController_Title"
        }

        return NSLocalizedString("hp_CashinSucessViewController_Title", bundle: bundle, comment: "")
      }

      /// en translation: Accumulated Cashback
      ///
      /// Locales: en, es
      static func hp_lbl_qr_payment_accumulated_cashback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_payment_accumulated_cashback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_payment_accumulated_cashback"
        }

        return NSLocalizedString("hp_lbl_qr_payment_accumulated_cashback", bundle: bundle, comment: "")
      }

      /// en translation: Acrross Kingston city hall
      ///
      /// Locales: en, es
      static func lbl_AddressBook_Example_Point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Example_Point", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Example_Point"
        }

        return NSLocalizedString("lbl_AddressBook_Example_Point", bundle: bundle, comment: "")
      }

      /// en translation: Action could not be completed, please try again
      ///
      /// Locales: en, es
      static func action_Can_Not_Complete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Action_Can_Not_Complete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Action_Can_Not_Complete"
        }

        return NSLocalizedString("Action_Can_Not_Complete", bundle: bundle, comment: "")
      }

      /// en translation: Active Order
      ///
      /// Locales: en, es, English
      static func orderActiveTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderActiveTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderActiveTitle"
        }

        return NSLocalizedString("OrderActiveTitle", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en, es, English
      static func agregar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Agregar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Agregar"
        }

        return NSLocalizedString("Agregar", bundle: bundle, comment: "")
      }

      /// en translation: Add a Card
      ///
      /// Locales: en, es
      static func hp_lbl_home_addcard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_home_addcard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_home_addcard"
        }

        return NSLocalizedString("hp_lbl_home_addcard", bundle: bundle, comment: "")
      }

      /// en translation: Add a comment (optional)
      ///
      /// Locales: en, es, English
      static func lbl_Add_Comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Add_Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Add_Comment"
        }

        return NSLocalizedString("lbl_Add_Comment", bundle: bundle, comment: "")
      }

      /// en translation: Add a comment (optional)
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeGoodRating_Add_Comments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeGoodRating_Add_Comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeGoodRating_Add_Comments"
        }

        return NSLocalizedString("lbl_FinalizeGoodRating_Add_Comments", bundle: bundle, comment: "")
      }

      /// en translation: Add a comment (optional)
      ///
      /// Locales: en, es, English
      static func txt_RatingComment_Postive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_RatingComment_Postive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_RatingComment_Postive"
        }

        return NSLocalizedString("txt_RatingComment_Postive", bundle: bundle, comment: "")
      }

      /// en translation: Add a comment about the service provided
      ///
      /// Locales: en, es, English
      static func shipmentAddRideComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ShipmentAddRideComment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ShipmentAddRideComment"
        }

        return NSLocalizedString("ShipmentAddRideComment", bundle: bundle, comment: "")
      }

      /// en translation: Add a note to this product.
      ///
      /// Locales: en, es, English
      static func btn_OptionsQtyCell_Add_Note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_OptionsQtyCell_Add_Note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_OptionsQtyCell_Add_Note"
        }

        return NSLocalizedString("btn_OptionsQtyCell_Add_Note", bundle: bundle, comment: "")
      }

      /// en translation: Add a stop
      ///
      /// Locales: en, es, English
      static func lbl_Alert_Add_Stop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Alert_Add_Stop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Alert_Add_Stop"
        }

        return NSLocalizedString("lbl_Alert_Add_Stop", bundle: bundle, comment: "")
      }

      /// en translation: Add address
      ///
      /// Locales: en, es, English
      static func lbl_AddressBook_Add_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Add_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Add_Address"
        }

        return NSLocalizedString("lbl_AddressBook_Add_Address", bundle: bundle, comment: "")
      }

      /// en translation: Add card
      ///
      /// Locales: en, es
      static func hp_CashinMoneyConfirmation_AddCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinMoneyConfirmation_AddCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinMoneyConfirmation_AddCard"
        }

        return NSLocalizedString("hp_CashinMoneyConfirmation_AddCard", bundle: bundle, comment: "")
      }

      /// en translation: Add card
      ///
      /// Locales: en, es, English
      static func lbl_Add_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Add_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Add_card"
        }

        return NSLocalizedString("lbl_Add_card", bundle: bundle, comment: "")
      }

      /// en translation: Add card!
      ///
      /// Locales: en, es, English
      static func add_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add_Card"
        }

        return NSLocalizedString("Add_Card", bundle: bundle, comment: "")
      }

      /// en translation: Add comment (optional)
      ///
      /// Locales: en, es, English
      static func txt_BottomBadRating_Add_Comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_BottomBadRating_Add_Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_BottomBadRating_Add_Comment"
        }

        return NSLocalizedString("txt_BottomBadRating_Add_Comment", bundle: bundle, comment: "")
      }

      /// en translation: Add direction instructions
      ///
      /// Locales: en, es, English
      static func shipmentAddSpecialInstructions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ShipmentAddSpecialInstructions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ShipmentAddSpecialInstructions"
        }

        return NSLocalizedString("ShipmentAddSpecialInstructions", bundle: bundle, comment: "")
      }

      /// en translation: Add more destinations, module under construction.
      ///
      /// Locales: en, es
      static func add_More_Destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add_More_Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add_More_Destination"
        }

        return NSLocalizedString("Add_More_Destination", bundle: bundle, comment: "")
      }

      /// en translation: Add note (without onion, extra sauce, etc.)
      ///
      /// Locales: en, es, English
      static func originalNote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("originalNote", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "originalNote"
        }

        return NSLocalizedString("originalNote", bundle: bundle, comment: "")
      }

      /// en translation: Add special instructions
      ///
      /// Locales: en, es, English
      static func orderAddSpecialInstructions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderAddSpecialInstructions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderAddSpecialInstructions"
        }

        return NSLocalizedString("OrderAddSpecialInstructions", bundle: bundle, comment: "")
      }

      /// en translation: Add stop
      ///
      /// Locales: en, es, English
      static func txt_Search_Add_Stop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_Search_Add_Stop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_Search_Add_Stop"
        }

        return NSLocalizedString("txt_Search_Add_Stop", bundle: bundle, comment: "")
      }

      /// en translation: Add una note (required)
      ///
      /// Locales: en, es
      static func hp_full_request_money_note_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_request_money_note_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_request_money_note_placeholder"
        }

        return NSLocalizedString("hp_full_request_money_note_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Add your phone number.
      ///
      /// Locales: en, es, English
      static func lbl_AddPhone_Enter_PhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddPhone_Enter_PhoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddPhone_Enter_PhoneNumber"
        }

        return NSLocalizedString("lbl_AddPhone_Enter_PhoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: Added order
      ///
      /// Locales: en, es, English
      static func lbl_cell_order_tracking_info_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_cell_order_tracking_info_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_cell_order_tracking_info_label"
        }

        return NSLocalizedString("lbl_cell_order_tracking_info_label", bundle: bundle, comment: "")
      }

      /// en translation: Additional information
      ///
      /// Locales: en, es, English
      static func lbl_Additional_Info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Additional_Info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Additional_Info"
        }

        return NSLocalizedString("lbl_Additional_Info", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, es
      static func lbl_AddressBook_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Address"
        }

        return NSLocalizedString("lbl_AddressBook_Address", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, es
      static func receipt_configuration_address_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_address_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_address_title"
        }

        return NSLocalizedString("receipt_configuration_address_title", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, es, English
      static func lbl_AddressBook_Address_Nav(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Address_Nav", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Address_Nav"
        }

        return NSLocalizedString("lbl_AddressBook_Address_Nav", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, es, English
      static func lbl_new_billing_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_new_billing_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_new_billing_address"
        }

        return NSLocalizedString("lbl_new_billing_address", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, es, English
      static func txt_new_billing_address_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_new_billing_address_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_new_billing_address_placeholder"
        }

        return NSLocalizedString("txt_new_billing_address_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Address point A
      ///
      /// Locales: en, es, English
      static func lbl_AddressInit_PointA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressInit_PointA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressInit_PointA"
        }

        return NSLocalizedString("lbl_AddressInit_PointA", bundle: bundle, comment: "")
      }

      /// en translation: Address point B
      ///
      /// Locales: en, es, English
      static func lbl_AddressInit_PointB(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressInit_PointB", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressInit_PointB"
        }

        return NSLocalizedString("lbl_AddressInit_PointB", bundle: bundle, comment: "")
      }

      /// en translation: Address point C
      ///
      /// Locales: en, es, English
      static func lbl_AddressInit_PointC(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressInit_PointC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressInit_PointC"
        }

        return NSLocalizedString("lbl_AddressInit_PointC", bundle: bundle, comment: "")
      }

      /// en translation: Agree
      ///
      /// Locales: en, es
      static func btn_done_minimun_ProcessOrder_modal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_done_minimun_ProcessOrder_modal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_done_minimun_ProcessOrder_modal"
        }

        return NSLocalizedString("btn_done_minimun_ProcessOrder_modal", bundle: bundle, comment: "")
      }

      /// en translation: Agree
      ///
      /// Locales: en, es, English
      static func btn_Onboarding_Agree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Onboarding_Agree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Onboarding_Agree"
        }

        return NSLocalizedString("btn_Onboarding_Agree", bundle: bundle, comment: "")
      }

      /// en translation: Alert my family.
      ///
      /// Locales: en, es, English
      static func lbl_EmergencyOn_Alert_Family(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EmergencyOn_Alert_Family", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EmergencyOn_Alert_Family"
        }

        return NSLocalizedString("lbl_EmergencyOn_Alert_Family", bundle: bundle, comment: "")
      }

      /// en translation: All fields are required
      ///
      /// Locales: en, es, English
      static func allFieldRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AllFieldRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AllFieldRequired"
        }

        return NSLocalizedString("AllFieldRequired", bundle: bundle, comment: "")
      }

      /// en translation: Allow
      ///
      /// Locales: en, es
      static func hp_lbl_account_allow_biometric(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_account_allow_biometric", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_account_allow_biometric"
        }

        return NSLocalizedString("hp_lbl_account_allow_biometric", bundle: bundle, comment: "")
      }

      /// en translation: Almost there!
      ///
      /// Locales: en, es
      static func lbl_Step3_About_Finish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step3_About_Finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step3_About_Finish"
        }

        return NSLocalizedString("lbl_Step3_About_Finish", bundle: bundle, comment: "")
      }

      /// en translation: Amiability
      ///
      /// Locales: en, es
      static func lbldriverGoodRatings1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverGoodRatings1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverGoodRatings1"
        }

        return NSLocalizedString("lbldriverGoodRatings1", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, es
      static func hp_CashinTransactionDetailViewController_Amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinTransactionDetailViewController_Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinTransactionDetailViewController_Amount"
        }

        return NSLocalizedString("hp_CashinTransactionDetailViewController_Amount", bundle: bundle, comment: "")
      }

      /// en translation: Amount to be charged
      ///
      /// Locales: en, es
      static func hp_CashInMoneyIncome_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashInMoneyIncome_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashInMoneyIncome_Title"
        }

        return NSLocalizedString("hp_CashInMoneyIncome_Title", bundle: bundle, comment: "")
      }

      /// en translation: Amount to be charged
      ///
      /// Locales: en, es
      static func hp_CashinMoneyConfirmation_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinMoneyConfirmation_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinMoneyConfirmation_Title"
        }

        return NSLocalizedString("hp_CashinMoneyConfirmation_Title", bundle: bundle, comment: "")
      }

      /// en translation: Amount to recharge
      ///
      /// Locales: en, es, English
      static func btn_TopUpMain_How_much_Balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_TopUpMain_How_much_Balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_TopUpMain_How_much_Balance"
        }

        return NSLocalizedString("btn_TopUpMain_How_much_Balance", bundle: bundle, comment: "")
      }

      /// en translation: An error occurred
      ///
      /// Locales: en, es
      static func lbl_Step2_Erro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Erro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Erro"
        }

        return NSLocalizedString("lbl_Step2_Erro", bundle: bundle, comment: "")
      }

      /// en translation: An error occurred
      ///
      /// Locales: en, es
      static func occur_Error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Occur_Error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Occur_Error"
        }

        return NSLocalizedString("Occur_Error", bundle: bundle, comment: "")
      }

      /// en translation: An error occurred while processing your errand
      ///
      /// Locales: en, es, English
      static func shipmentPreviewError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ShipmentPreviewError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ShipmentPreviewError"
        }

        return NSLocalizedString("ShipmentPreviewError", bundle: bundle, comment: "")
      }

      /// en translation: An unrecognized error occurred, please call customer service
      ///
      /// Locales: en, es, English
      static func ccPaymentGeneralMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCPaymentGeneralMsg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCPaymentGeneralMsg"
        }

        return NSLocalizedString("CCPaymentGeneralMsg", bundle: bundle, comment: "")
      }

      /// en translation: And I mean literally anything
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Cell_Tell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Cell_Tell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Cell_Tell"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Cell_Tell", bundle: bundle, comment: "")
      }

      /// en translation: Apparently, this email has already been used. Please enter another email
      ///
      /// Locales: en, es, English
      static func emailNoValidMessage2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EmailNoValidMessage2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "EmailNoValidMessage2"
        }

        return NSLocalizedString("EmailNoValidMessage2", bundle: bundle, comment: "")
      }

      /// en translation: Applicant commerce
      ///
      /// Locales: en, es
      static func hp_lbl_qr_payment_applicant_commerce(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_payment_applicant_commerce", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_payment_applicant_commerce"
        }

        return NSLocalizedString("hp_lbl_qr_payment_applicant_commerce", bundle: bundle, comment: "")
      }

      /// en translation: Approximate delivery date and time
      ///
      /// Locales: en, es
      static func lbl_sch_detail_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sch_detail_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sch_detail_date"
        }

        return NSLocalizedString("lbl_sch_detail_date", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure the information in your card is correct?
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmAlert_Card_Detail_Correct(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmAlert_Card_Detail_Correct", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmAlert_Card_Detail_Correct"
        }

        return NSLocalizedString("lbl_ConfirmAlert_Card_Detail_Correct", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you don't want to get a similar item in your purchase?
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmSimilar_Similar_Purchase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmSimilar_Similar_Purchase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmSimilar_Similar_Purchase"
        }

        return NSLocalizedString("lbl_ConfirmSimilar_Similar_Purchase", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to add a stop in your errands? This can affect the current cost.
      ///
      /// Locales: en, es, English
      static func lbl_Alert_Alert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Alert_Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Alert_Alert"
        }

        return NSLocalizedString("lbl_Alert_Alert", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to cancel the errand?
      ///
      /// Locales: en, es, English
      static func cancelShipmentMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelShipmentMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelShipmentMessage"
        }

        return NSLocalizedString("CancelShipmentMessage", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to cancel the order?
      ///
      /// Locales: en, es, English
      static func cancelOrderMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelOrderMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelOrderMessage"
        }

        return NSLocalizedString("CancelOrderMessage", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete the billing information?
      ///
      /// Locales: en, es, English
      static func deleteBillingMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DeleteBillingMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DeleteBillingMessage"
        }

        return NSLocalizedString("DeleteBillingMessage", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete this address?
      ///
      /// Locales: en, es, English
      static func deleteAddressMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DeleteAddressMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DeleteAddressMessage"
        }

        return NSLocalizedString("DeleteAddressMessage", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete this card?
      ///
      /// Locales: en, es, English
      static func deleteCardMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DeleteCardMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DeleteCardMessage"
        }

        return NSLocalizedString("DeleteCardMessage", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en, es, English
      static func closeSessionMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CloseSessionMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CloseSessionMessage"
        }

        return NSLocalizedString("CloseSessionMessage", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure your $1 number is correct?
      ///
      /// Locales: en, es, English
      static func confirmPhoneMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPhoneMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPhoneMessage"
        }

        return NSLocalizedString("confirmPhoneMessage", bundle: bundle, comment: "")
      }

      /// en translation: Ask for help
      ///
      /// Locales: en, es, English
      static func getHelpTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GetHelpTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GetHelpTitle"
        }

        return NSLocalizedString("GetHelpTitle", bundle: bundle, comment: "")
      }

      /// en translation: At Hugo we are here to help you!  Select one of the options we have available to assist you
      ///
      /// Locales: en, es, English
      static func helpBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helpBody", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helpBody"
        }

        return NSLocalizedString("helpBody", bundle: bundle, comment: "")
      }

      /// en translation: At Hugo we are here to help you! Select  one of the following options we can provide you with assistance.
      ///
      /// Locales: en, es
      static func alert_Bottam_help_you(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_Bottam_help_you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_Bottam_help_you"
        }

        return NSLocalizedString("alert_Bottam_help_you", bundle: bundle, comment: "")
      }

      /// en translation: At hugo we are willing to help you in the way that seems most convenient for you. Today we offer you a chat from which we can help you in a personalized way.
      ///
      /// Locales: en, es, English
      static func chat_Tutorial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chat_Tutorial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chat_Tutorial"
        }

        return NSLocalizedString("Chat_Tutorial", bundle: bundle, comment: "")
      }

      /// en translation: At the moment the card payment option is not available, we are working to solve it as soon as possible, you can choose to make your payment in cash or contact customer service at 2247-8100
      ///
      /// Locales: en, es, English
      static func ccPaymentTimeoutErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCPaymentTimeoutErrorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCPaymentTimeoutErrorMessage"
        }

        return NSLocalizedString("CCPaymentTimeoutErrorMessage", bundle: bundle, comment: "")
      }

      /// en translation: At the moment there are no vehicles of this category near you, select another category to continue.
      ///
      /// Locales: en, es, English
      static func vehicleNotAvailableDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VehicleNotAvailableDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "VehicleNotAvailableDetail"
        }

        return NSLocalizedString("VehicleNotAvailableDetail", bundle: bundle, comment: "")
      }

      /// en translation: At the moment we have not been able to assign any Customer Service Agent, we ask that you please try again later.
      ///
      /// Locales: en, es
      static func service_Agent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service_Agent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service_Agent"
        }

        return NSLocalizedString("Service_Agent", bundle: bundle, comment: "")
      }

      /// en translation: At the moment you can only have one order in process at a time
      ///
      /// Locales: en, es, English
      static func orderActive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderActive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderActive"
        }

        return NSLocalizedString("OrderActive", bundle: bundle, comment: "")
      }

      /// en translation: At the moment, we could not establish the position of your driver.
      ///
      /// Locales: en, es, English
      static func lbl_LocalNotification_Cant_Guarantee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LocalNotification_Cant_Guarantee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LocalNotification_Cant_Guarantee"
        }

        return NSLocalizedString("lbl_LocalNotification_Cant_Guarantee", bundle: bundle, comment: "")
      }

      /// en translation: At the time of processing your order to pick up at the branch, you will not be able to change the method of home delivery.
      ///
      /// Locales: en, es
      static func lbl_ProcessOrder_TO_Warning_SubTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProcessOrder_TO_Warning_SubTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProcessOrder_TO_Warning_SubTitle"
        }

        return NSLocalizedString("lbl_ProcessOrder_TO_Warning_SubTitle", bundle: bundle, comment: "")
      }

      /// en translation: At this time the store exclusively accepts orders with a scheduled delivery time and date
      ///
      /// Locales: en, es
      static func lbl_schedule_only_orders_with_program_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_schedule_only_orders_with_program_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_schedule_only_orders_with_program_date"
        }

        return NSLocalizedString("lbl_schedule_only_orders_with_program_date", bundle: bundle, comment: "")
      }

      /// en translation: Attached images
      ///
      /// Locales: en, es, English
      static func btn_ShipmentLocation_Add_Image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ShipmentLocation_Add_Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ShipmentLocation_Add_Image"
        }

        return NSLocalizedString("btn_ShipmentLocation_Add_Image", bundle: bundle, comment: "")
      }

      /// en translation: Attachment
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentAddress_Attachments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentAddress_Attachments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentAddress_Attachments"
        }

        return NSLocalizedString("lbl_ShipmentAddress_Attachments", bundle: bundle, comment: "")
      }

      /// en translation: Attention
      ///
      /// Locales: en, es
      static func lbldriverGoodRatings3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverGoodRatings3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverGoodRatings3"
        }

        return NSLocalizedString("lbldriverGoodRatings3", bundle: bundle, comment: "")
      }

      /// en translation: Attention
      ///
      /// Locales: en, es
      static func lblhugoBadRatings1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoBadRatings1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoBadRatings1"
        }

        return NSLocalizedString("lblhugoBadRatings1", bundle: bundle, comment: "")
      }

      /// en translation: Attention
      ///
      /// Locales: en, es
      static func lblhugoGoodRatings2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoGoodRatings2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoGoodRatings2"
        }

        return NSLocalizedString("lblhugoGoodRatings2", bundle: bundle, comment: "")
      }

      /// en translation: Attitude
      ///
      /// Locales: en, es
      static func lbldriverBadRatings1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverBadRatings1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverBadRatings1"
        }

        return NSLocalizedString("lbldriverBadRatings1", bundle: bundle, comment: "")
      }

      /// en translation: Authenticate yourself with your fingerprint
      ///
      /// Locales: en, es, English
      static func authReason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authReason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "authReason"
        }

        return NSLocalizedString("authReason", bundle: bundle, comment: "")
      }

      /// en translation: Authentication Error
      ///
      /// Locales: en, es, English
      static func authErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authErrorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "authErrorTitle"
        }

        return NSLocalizedString("authErrorTitle", bundle: bundle, comment: "")
      }

      /// en translation: Authentication is required to enter
      ///
      /// Locales: en, es
      static func hp_authentication_is_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_authentication_is_required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_authentication_is_required"
        }

        return NSLocalizedString("hp_authentication_is_required", bundle: bundle, comment: "")
      }

      /// en translation: Av. Masferrer, Col. Escalon, San Salvador, El Salvador
      ///
      /// Locales: en, es, English
      static func billing_cell_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("billing_cell_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "billing_cell_address"
        }

        return NSLocalizedString("billing_cell_address", bundle: bundle, comment: "")
      }

      /// en translation: Avenida Calle 153, Bogotá…
      ///
      /// Locales: en, es, English
      static func lbl_RideOrderTable_Address_Sub(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideOrderTable_Address_Sub", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideOrderTable_Address_Sub"
        }

        return NSLocalizedString("lbl_RideOrderTable_Address_Sub", bundle: bundle, comment: "")
      }

      /// en translation: BACK TO HOME
      ///
      /// Locales: en, es
      static func hp_CashinSucessViewController_BackToHome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinSucessViewController_BackToHome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinSucessViewController_BackToHome"
        }

        return NSLocalizedString("hp_CashinSucessViewController_BackToHome", bundle: bundle, comment: "")
      }

      /// en translation: BILLING DETAIL
      ///
      /// Locales: en, es
      static func hp_billing_detail_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_billing_detail_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_billing_detail_title"
        }

        return NSLocalizedString("hp_billing_detail_title", bundle: bundle, comment: "")
      }

      /// en translation: BIRTHDATE
      ///
      /// Locales: en, es, English
      static func lbl_EditUserProfile_Dob(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EditUserProfile_Dob", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EditUserProfile_Dob"
        }

        return NSLocalizedString("lbl_EditUserProfile_Dob", bundle: bundle, comment: "")
      }

      /// en translation: BRANCH CLOSER TO YOU
      ///
      /// Locales: en, es
      static func selectSucursalTitleNear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectSucursalTitleNear", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectSucursalTitleNear"
        }

        return NSLocalizedString("SelectSucursalTitleNear", bundle: bundle, comment: "")
      }

      /// en translation: Bad Product
      ///
      /// Locales: en, es
      static func lblpartnerBadRatings5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerBadRatings5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerBadRatings5"
        }

        return NSLocalizedString("lblpartnerBadRatings5", bundle: bundle, comment: "")
      }

      /// en translation: Base Currency
      ///
      /// Locales: en, es
      static func hp_base_currency_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_base_currency_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_base_currency_title"
        }

        return NSLocalizedString("hp_base_currency_title", bundle: bundle, comment: "")
      }

      /// en translation: Before continuing, verify the information on your card. Do you want to continue?
      ///
      /// Locales: en, es, English
      static func confirmSaveMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ConfirmSaveMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ConfirmSaveMessage"
        }

        return NSLocalizedString("ConfirmSaveMessage", bundle: bundle, comment: "")
      }

      /// en translation: Begin with a phone number.
      ///
      /// Locales: en, es, English
      static func lbl_RegisterPhone_StartWithPhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RegisterPhone_StartWithPhone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RegisterPhone_StartWithPhone"
        }

        return NSLocalizedString("lbl_RegisterPhone_StartWithPhone", bundle: bundle, comment: "")
      }

      /// en translation: Beginning of trip
      ///
      /// Locales: en, es, English
      static func txt_Search_StratTrip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_Search_StratTrip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_Search_StratTrip"
        }

        return NSLocalizedString("txt_Search_StratTrip", bundle: bundle, comment: "")
      }

      /// en translation: Behind
      ///
      /// Locales: en, es
      static func behind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("behind", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "behind"
        }

        return NSLocalizedString("behind", bundle: bundle, comment: "")
      }

      /// en translation: Beverages
      ///
      /// Locales: en, es, English
      static func lbl_OrderProcess_Drinks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderProcess_Drinks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderProcess_Drinks"
        }

        return NSLocalizedString("lbl_OrderProcess_Drinks", bundle: bundle, comment: "")
      }

      /// en translation: Beverages
      ///
      /// Locales: en, es, English
      static func lbl_ProductTable_Drinks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductTable_Drinks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductTable_Drinks"
        }

        return NSLocalizedString("lbl_ProductTable_Drinks", bundle: bundle, comment: "")
      }

      /// en translation: Billing
      ///
      /// Locales: en, es, English
      static func billing_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("billing_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "billing_title"
        }

        return NSLocalizedString("billing_title", bundle: bundle, comment: "")
      }

      /// en translation: Branch office
      ///
      /// Locales: en, es
      static func hp_branch_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_branch_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_branch_title"
        }

        return NSLocalizedString("hp_branch_title", bundle: bundle, comment: "")
      }

      /// en translation: Branch to pick up the order
      ///
      /// Locales: en, es
      static func addressTitleTakeOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddressTitleTakeOut", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AddressTitleTakeOut"
        }

        return NSLocalizedString("AddressTitleTakeOut", bundle: bundle, comment: "")
      }

      /// en translation: Branch to withdraw order
      ///
      /// Locales: en, es
      static func lbl_branch_to_pick(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_branch_to_pick", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_branch_to_pick"
        }

        return NSLocalizedString("lbl_branch_to_pick", bundle: bundle, comment: "")
      }

      /// en translation: Building, Office, Floor, Door, Commerce…
      ///
      /// Locales: en, es, English
      static func txt_WriteDescription_Building(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_WriteDescription_Building", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_WriteDescription_Building"
        }

        return NSLocalizedString("txt_WriteDescription_Building", bundle: bundle, comment: "")
      }

      /// en translation: By log in to hugoPay you are agreeing to hugo's  %@ and %@.
      ///
      /// Locales: en, es
      static func hp_lbl_onboarding_terms(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("hp_lbl_onboarding_terms", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_onboarding_terms"
        }

        let format = NSLocalizedString("hp_lbl_onboarding_terms", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: CALL TO
      ///
      /// Locales: en, es
      static func call_to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("call_to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "call_to"
        }

        return NSLocalizedString("call_to", bundle: bundle, comment: "")
      }

      /// en translation: CAMINITO PLAZA FUTURA
      ///
      /// Locales: en, es, English
      static func lbl_DateRangePicker_Caminito(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DateRangePicker_Caminito", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DateRangePicker_Caminito"
        }

        return NSLocalizedString("lbl_DateRangePicker_Caminito", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, es
      static func alert_OrderSummary_cancel_order_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_OrderSummary_cancel_order_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_OrderSummary_cancel_order_cancel"
        }

        return NSLocalizedString("alert_OrderSummary_cancel_order_cancel", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_remove_product_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_remove_product_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_remove_product_cancel"
        }

        return NSLocalizedString("alert_ProcessOrder_remove_product_cancel", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, es
      static func btn_sch_detail_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_sch_detail_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_sch_detail_cancel"
        }

        return NSLocalizedString("btn_sch_detail_cancel", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static func btn_AlertTransport_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_AlertTransport_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_AlertTransport_Cancel"
        }

        return NSLocalizedString("btn_AlertTransport_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static func btn_EmergencyOn_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_EmergencyOn_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_EmergencyOn_Cancel"
        }

        return NSLocalizedString("btn_EmergencyOn_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static func btn_PickingRide2_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_PickingRide2_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_PickingRide2_Cancel"
        }

        return NSLocalizedString("btn_PickingRide2_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static func btn_SearchingDriver_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_SearchingDriver_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_SearchingDriver_Cancel"
        }

        return NSLocalizedString("btn_SearchingDriver_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, es, English
      static func lbl_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Cancel"
        }

        return NSLocalizedString("lbl_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL MY ORDER
      ///
      /// Locales: en, es
      static func lbl_sch_detail_cancel_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sch_detail_cancel_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sch_detail_cancel_order"
        }

        return NSLocalizedString("lbl_sch_detail_cancel_order", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL ORDER
      ///
      /// Locales: en, es
      static func btn_OrderSummary_cancel_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_OrderSummary_cancel_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_OrderSummary_cancel_order"
        }

        return NSLocalizedString("btn_OrderSummary_cancel_order", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL TRIP
      ///
      /// Locales: en, es, English
      static func btn_ActionCell_Cancel_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ActionCell_Cancel_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ActionCell_Cancel_Trip"
        }

        return NSLocalizedString("btn_ActionCell_Cancel_Trip", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL TRIP
      ///
      /// Locales: en, es, English
      static func lbl_Cancel_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Cancel_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Cancel_Trip"
        }

        return NSLocalizedString("lbl_Cancel_Trip", bundle: bundle, comment: "")
      }

      /// en translation: CARDS
      ///
      /// Locales: en, es, English
      static func cards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cards"
        }

        return NSLocalizedString("Cards", bundle: bundle, comment: "")
      }

      /// en translation: CHANGE CARD
      ///
      /// Locales: en, es, English
      static func btn_ShipmentError_Change_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ShipmentError_Change_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ShipmentError_Change_Card"
        }

        return NSLocalizedString("btn_ShipmentError_Change_Card", bundle: bundle, comment: "")
      }

      /// en translation: CHANGE MY EMAIL
      ///
      /// Locales: en, es, English
      static func btn_ValidateEmail_Change_Email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidateEmail_Change_Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidateEmail_Change_Email"
        }

        return NSLocalizedString("btn_ValidateEmail_Change_Email", bundle: bundle, comment: "")
      }

      /// en translation: CHAT WITH US
      ///
      /// Locales: en, es, English
      static func chat_Us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chat_Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chat_Us"
        }

        return NSLocalizedString("Chat_Us", bundle: bundle, comment: "")
      }

      /// en translation: CHECK OUT
      ///
      /// Locales: en, es, English
      static func lbl_Checkout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Checkout"
        }

        return NSLocalizedString("lbl_Checkout", bundle: bundle, comment: "")
      }

      /// en translation: CHECK YOUR NUMBER
      ///
      /// Locales: en, es
      static func lbl_Step2_Check_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Check_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Check_Number"
        }

        return NSLocalizedString("lbl_Step2_Check_Number", bundle: bundle, comment: "")
      }

      /// en translation: CHECKOUT
      ///
      /// Locales: en, es, English
      static func lbl_CheckoutPayService_Nav(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CheckoutPayService_Nav", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CheckoutPayService_Nav"
        }

        return NSLocalizedString("lbl_CheckoutPayService_Nav", bundle: bundle, comment: "")
      }

      /// en translation: CLOSE
      ///
      /// Locales: en, es
      static func hp_full_send_money_failure_close_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_send_money_failure_close_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_send_money_failure_close_button_title"
        }

        return NSLocalizedString("hp_full_send_money_failure_close_button_title", bundle: bundle, comment: "")
      }

      /// en translation: CLOSE
      ///
      /// Locales: en, es
      static func hp_full_send_money_success_new_transaction_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_send_money_success_new_transaction_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_send_money_success_new_transaction_button_title"
        }

        return NSLocalizedString("hp_full_send_money_success_new_transaction_button_title", bundle: bundle, comment: "")
      }

      /// en translation: COLOUR
      ///
      /// Locales: en, es
      static func card_Colour_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card_Colour_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card_Colour_Title"
        }

        return NSLocalizedString("Card_Colour_Title", bundle: bundle, comment: "")
      }

      /// en translation: COMING SOON!
      ///
      /// Locales: en, es, English
      static func btn_CustomPage_Sample_SoonInHugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_CustomPage_Sample_SoonInHugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_CustomPage_Sample_SoonInHugo"
        }

        return NSLocalizedString("btn_CustomPage_Sample_SoonInHugo", bundle: bundle, comment: "")
      }

      /// en translation: COMPLETE NAME
      ///
      /// Locales: en, es, English
      static func lbl_AddUserInfo_FullName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddUserInfo_FullName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddUserInfo_FullName"
        }

        return NSLocalizedString("lbl_AddUserInfo_FullName", bundle: bundle, comment: "")
      }

      /// en translation: COMPLETE NAME
      ///
      /// Locales: en, es, English
      static func lbl_EditUserProfile_Full_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EditUserProfile_Full_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EditUserProfile_Full_Name"
        }

        return NSLocalizedString("lbl_EditUserProfile_Full_Name", bundle: bundle, comment: "")
      }

      /// en translation: COMPLETE PROFILE
      ///
      /// Locales: en, es, English
      static func completed_Profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Completed_Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Completed_Profile"
        }

        return NSLocalizedString("Completed_Profile", bundle: bundle, comment: "")
      }

      /// en translation: CONFIRM
      ///
      /// Locales: en, es
      static func hp_CashinMoneyConfirmation_ConfirmButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinMoneyConfirmation_ConfirmButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinMoneyConfirmation_ConfirmButton"
        }

        return NSLocalizedString("hp_CashinMoneyConfirmation_ConfirmButton", bundle: bundle, comment: "")
      }

      /// en translation: CONFIRM
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_confirm_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_confirm_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_confirm_button"
        }

        return NSLocalizedString("hp_full_reset_pin_confirm_button", bundle: bundle, comment: "")
      }

      /// en translation: CONFIRM
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_validate_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_validate_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_validate_button"
        }

        return NSLocalizedString("hp_full_reset_pin_validate_button", bundle: bundle, comment: "")
      }

      /// en translation: CONFIRM
      ///
      /// Locales: en, es
      static func hp_temporal_code_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_temporal_code_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_temporal_code_confirm"
        }

        return NSLocalizedString("hp_temporal_code_confirm", bundle: bundle, comment: "")
      }

      /// en translation: CONTACT AN AGENT
      ///
      /// Locales: en, es
      static func lbl_Step1_Agent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Agent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Agent"
        }

        return NSLocalizedString("lbl_Step1_Agent", bundle: bundle, comment: "")
      }

      /// en translation: CONTACT AN AGENT
      ///
      /// Locales: en, es
      static func lbl_Step2_Agent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Agent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Agent"
        }

        return NSLocalizedString("lbl_Step2_Agent", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE
      ///
      /// Locales: en, es
      static func alert_OrderSummary_cancel_order_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_OrderSummary_cancel_order_continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_OrderSummary_cancel_order_continue"
        }

        return NSLocalizedString("alert_OrderSummary_cancel_order_continue", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_remove_product_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_remove_product_continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_remove_product_continue"
        }

        return NSLocalizedString("alert_ProcessOrder_remove_product_continue", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE
      ///
      /// Locales: en, es
      static func lbl_Continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Continue"
        }

        return NSLocalizedString("lbl_Continue", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE
      ///
      /// Locales: en, es, English
      static func btn_AlertTransport_Continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_AlertTransport_Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_AlertTransport_Continue"
        }

        return NSLocalizedString("btn_AlertTransport_Continue", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE
      ///
      /// Locales: en, es, English
      static func btn_FinalizeRide_Continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_FinalizeRide_Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_FinalizeRide_Continue"
        }

        return NSLocalizedString("btn_FinalizeRide_Continue", bundle: bundle, comment: "")
      }

      /// en translation: CONTINUE
      ///
      /// Locales: en, es, English
      static func btn_RatingCell_Continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_RatingCell_Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_RatingCell_Continue"
        }

        return NSLocalizedString("btn_RatingCell_Continue", bundle: bundle, comment: "")
      }

      /// en translation: COURSE
      ///
      /// Locales: en, es, English
      static func lbl_RouteNav_Journey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RouteNav_Journey", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RouteNav_Journey"
        }

        return NSLocalizedString("lbl_RouteNav_Journey", bundle: bundle, comment: "")
      }

      /// en translation: CREATE
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhone_Create(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhone_Create", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhone_Create"
        }

        return NSLocalizedString("lbl_StartedPhone_Create", bundle: bundle, comment: "")
      }

      /// en translation: CREATE ACCOUNT
      ///
      /// Locales: en, es
      static func alert_chat_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_chat_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_chat_button_title"
        }

        return NSLocalizedString("alert_chat_button_title", bundle: bundle, comment: "")
      }

      /// en translation: CREATE ACCOUNT
      ///
      /// Locales: en, es
      static func lbl_NewLogin_Create_Account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_NewLogin_Create_Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_NewLogin_Create_Account"
        }

        return NSLocalizedString("lbl_NewLogin_Create_Account", bundle: bundle, comment: "")
      }

      /// en translation: CREDITS
      ///
      /// Locales: en, es, English
      static func lbl_StatusProfile_Credits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StatusProfile_Credits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StatusProfile_Credits"
        }

        return NSLocalizedString("lbl_StatusProfile_Credits", bundle: bundle, comment: "")
      }

      /// en translation: CVC
      ///
      /// Locales: en, es, English
      static func cvcCardInfoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CVCCardInfoTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CVCCardInfoTitle"
        }

        return NSLocalizedString("CVCCardInfoTitle", bundle: bundle, comment: "")
      }

      /// en translation: Call
      ///
      /// Locales: en, es, English
      static func btn_call_driver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_call_driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_call_driver"
        }

        return NSLocalizedString("btn_call_driver", bundle: bundle, comment: "")
      }

      /// en translation: Call driver
      ///
      /// Locales: en, es, English
      static func callTitlePicking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CallTitlePicking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CallTitlePicking"
        }

        return NSLocalizedString("CallTitlePicking", bundle: bundle, comment: "")
      }

      /// en translation: Call on the way
      ///
      /// Locales: en, es
      static func lbl_Step2_Call_On_Way(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Call_On_Way", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Call_On_Way"
        }

        return NSLocalizedString("lbl_Step2_Call_On_Way", bundle: bundle, comment: "")
      }

      /// en translation: Camera permissions
      ///
      /// Locales: en, es
      static func camera_Permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera_Permission", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera_Permission"
        }

        return NSLocalizedString("Camera_Permission", bundle: bundle, comment: "")
      }

      /// en translation: Camera permissions are not enabled, enter your device options to enable it
      ///
      /// Locales: en, es
      static func camera_Permission_Not_Avable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera_Permission_Not_Avable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera_Permission_Not_Avable"
        }

        return NSLocalizedString("Camera_Permission_Not_Avable", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, English
      static func lbl_RideSummary_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideSummary_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideSummary_Cancel"
        }

        return NSLocalizedString("lbl_RideSummary_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_cancel"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es, English
      static func btn_DateRangePicker_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_DateRangePicker_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_DateRangePicker_Cancel"
        }

        return NSLocalizedString("btn_DateRangePicker_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es, English
      static func cancelLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelLabel"
        }

        return NSLocalizedString("CancelLabel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es, English
      static func lbl_SearchAddressShipment_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchAddressShipment_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchAddressShipment_Cancel"
        }

        return NSLocalizedString("lbl_SearchAddressShipment_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel Order
      ///
      /// Locales: en, es
      static func alert_OrderSummary_cancel_order_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_OrderSummary_cancel_order_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_OrderSummary_cancel_order_title"
        }

        return NSLocalizedString("alert_OrderSummary_cancel_order_title", bundle: bundle, comment: "")
      }

      /// en translation: Cancel errand
      ///
      /// Locales: en, es, English
      static func cancelShipmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelShipmentTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelShipmentTitle"
        }

        return NSLocalizedString("CancelShipmentTitle", bundle: bundle, comment: "")
      }

      /// en translation: Cancel order
      ///
      /// Locales: en, es, English
      static func btn_CancelOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_CancelOrder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_CancelOrder"
        }

        return NSLocalizedString("btn_CancelOrder", bundle: bundle, comment: "")
      }

      /// en translation: Cancel order
      ///
      /// Locales: en, es, English
      static func btn_TotalTable_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_TotalTable_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_TotalTable_Cancel"
        }

        return NSLocalizedString("btn_TotalTable_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel order
      ///
      /// Locales: en, es, English
      static func lbl_ServiceSelection_Cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ServiceSelection_Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ServiceSelection_Cancel"
        }

        return NSLocalizedString("lbl_ServiceSelection_Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Card not available
      ///
      /// Locales: en, es, English
      static func carNotAvailableTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CarNotAvailableTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CarNotAvailableTitle"
        }

        return NSLocalizedString("CarNotAvailableTitle", bundle: bundle, comment: "")
      }

      /// en translation: Card not supported
      ///
      /// Locales: en, es, English
      static func card_Not_Support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card_Not_Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card_Not_Support"
        }

        return NSLocalizedString("Card_Not_Support", bundle: bundle, comment: "")
      }

      /// en translation: Card number
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmAlert_Card_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmAlert_Card_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmAlert_Card_Number"
        }

        return NSLocalizedString("lbl_ConfirmAlert_Card_Number", bundle: bundle, comment: "")
      }

      /// en translation: Card number must contain 16 digits
      ///
      /// Locales: en, es, English
      static func numCardLength(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NumCardLength", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NumCardLength"
        }

        return NSLocalizedString("NumCardLength", bundle: bundle, comment: "")
      }

      /// en translation: Card number required
      ///
      /// Locales: en, es, English
      static func numCardRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NumCardRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NumCardRequired"
        }

        return NSLocalizedString("NumCardRequired", bundle: bundle, comment: "")
      }

      /// en translation: Card personalization
      ///
      /// Locales: en, es
      static func card_Customization(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card_Customization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card_Customization"
        }

        return NSLocalizedString("Card_Customization", bundle: bundle, comment: "")
      }

      /// en translation: Card saved successfully
      ///
      /// Locales: en, es, English
      static func cardSavedSuccessTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CardSavedSuccessTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CardSavedSuccessTitle"
        }

        return NSLocalizedString("CardSavedSuccessTitle", bundle: bundle, comment: "")
      }

      /// en translation: Card type
      ///
      /// Locales: en, es, English
      static func cardTypeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CardTypeTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CardTypeTitle"
        }

        return NSLocalizedString("CardTypeTitle", bundle: bundle, comment: "")
      }

      /// en translation: Card type
      ///
      /// Locales: en, es, English
      static func ccTypeRequiredWarningTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCTypeRequiredWarningTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCTypeRequiredWarningTitle"
        }

        return NSLocalizedString("CCTypeRequiredWarningTitle", bundle: bundle, comment: "")
      }

      /// en translation: Casa #45, Puerta Trasera
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentAddress_House(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentAddress_House", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentAddress_House"
        }

        return NSLocalizedString("lbl_ShipmentAddress_House", bundle: bundle, comment: "")
      }

      /// en translation: Cash
      ///
      /// Locales: en, es, English
      static func lbl_Cash(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Cash", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Cash"
        }

        return NSLocalizedString("lbl_Cash", bundle: bundle, comment: "")
      }

      /// en translation: Cashback
      ///
      /// Locales: en, es
      static func hp_cashback_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_cashback_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_cashback_title"
        }

        return NSLocalizedString("hp_cashback_title", bundle: bundle, comment: "")
      }

      /// en translation: Cashback
      ///
      /// Locales: en, es
      static func user_cash(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_cash", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_cash"
        }

        return NSLocalizedString("user_cash", bundle: bundle, comment: "")
      }

      /// en translation: Category
      ///
      /// Locales: en, es
      static func lbl_Title_Type_Category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Title_Type_Category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Title_Type_Category"
        }

        return NSLocalizedString("lbl_Title_Type_Category", bundle: bundle, comment: "")
      }

      /// en translation: Ceviche - Seafood
      ///
      /// Locales: en, es, English
      static func lbl_PartnerFeedTable_Ceviche(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerFeedTable_Ceviche", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerFeedTable_Ceviche"
        }

        return NSLocalizedString("lbl_PartnerFeedTable_Ceviche", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, es, English
      static func change_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change_Password"
        }

        return NSLocalizedString("Change_Password", bundle: bundle, comment: "")
      }

      /// en translation: Change the phone number linked to my profile.
      ///
      /// Locales: en, es, English
      static func lbl_PreferencesSubtitle_Change_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PreferencesSubtitle_Change_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PreferencesSubtitle_Change_Number"
        }

        return NSLocalizedString("lbl_PreferencesSubtitle_Change_Number", bundle: bundle, comment: "")
      }

      /// en translation: Change your plans? No worries - you can cancel without a charge.
      ///
      /// Locales: en, es
      static func cancel_free_Charge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel_free_Charge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel_free_Charge"
        }

        return NSLocalizedString("Cancel_free_Charge", bundle: bundle, comment: "")
      }

      /// en translation: Charge for delivery
      ///
      /// Locales: en, es, English
      static func lbl_TotalTable_Delivery_Charge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TotalTable_Delivery_Charge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TotalTable_Delivery_Charge"
        }

        return NSLocalizedString("lbl_TotalTable_Delivery_Charge", bundle: bundle, comment: "")
      }

      /// en translation: Charge for service
      ///
      /// Locales: en, es, English
      static func lbl_TotalTable_Food_Service_Charge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TotalTable_Food_Service_Charge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TotalTable_Food_Service_Charge"
        }

        return NSLocalizedString("lbl_TotalTable_Food_Service_Charge", bundle: bundle, comment: "")
      }

      /// en translation: Charge to:
      ///
      /// Locales: en, es, English
      static func lbl_DriverTip_Charge_To(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DriverTip_Charge_To", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DriverTip_Charge_To"
        }

        return NSLocalizedString("lbl_DriverTip_Charge_To", bundle: bundle, comment: "")
      }

      /// en translation: Chat with an agent
      ///
      /// Locales: en, es, English
      static func chat_Agent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chat_Agent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chat_Agent"
        }

        return NSLocalizedString("Chat_Agent", bundle: bundle, comment: "")
      }

      /// en translation: Chat with us!
      ///
      /// Locales: en, es, English
      static func btn_Boarding_Chat_Us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Boarding_Chat_Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Boarding_Chat_Us"
        }

        return NSLocalizedString("btn_Boarding_Chat_Us", bundle: bundle, comment: "")
      }

      /// en translation: Check it out and try again
      ///
      /// Locales: en, es
      static func lbl_Step2_Check_Out_Try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Check_Out_Try", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Check_Out_Try"
        }

        return NSLocalizedString("lbl_Step2_Check_Out_Try", bundle: bundle, comment: "")
      }

      /// en translation: Check your mobile
      ///
      /// Locales: en, es, English
      static func verifiedMobileTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VerifiedMobileTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "VerifiedMobileTitle"
        }

        return NSLocalizedString("VerifiedMobileTitle", bundle: bundle, comment: "")
      }

      /// en translation: Choose one of the available territories in your   country to show you the shops
      ///
      /// Locales: en, es
      static func lbl_Territory_Choose_Country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Territory_Choose_Country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Territory_Choose_Country"
        }

        return NSLocalizedString("lbl_Territory_Choose_Country", bundle: bundle, comment: "")
      }

      /// en translation: Choose one of the countries where we count with service
      ///
      /// Locales: en, es
      static func lbl_Country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Country"
        }

        return NSLocalizedString("lbl_Country", bundle: bundle, comment: "")
      }

      /// en translation: Choose recovery method
      ///
      /// Locales: en, es
      static func hp_title_recovery_method(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_title_recovery_method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_title_recovery_method"
        }

        return NSLocalizedString("hp_title_recovery_method", bundle: bundle, comment: "")
      }

      /// en translation: Choose the medium where you would like to receive the code to validate your identity.
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_options_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_options_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_options_subtitle"
        }

        return NSLocalizedString("hp_full_reset_pin_options_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Choose the network
      ///
      /// Locales: en, es, English
      static func btn_TopUpMain_Choose_Operator(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_TopUpMain_Choose_Operator", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_TopUpMain_Choose_Operator"
        }

        return NSLocalizedString("btn_TopUpMain_Choose_Operator", bundle: bundle, comment: "")
      }

      /// en translation: Choose your arrival point!
      ///
      /// Locales: en, es, English
      static func lbl_Arrival_Point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Arrival_Point", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Arrival_Point"
        }

        return NSLocalizedString("lbl_Arrival_Point", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: en, es
      static func lbl_AddressBook_City(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_City", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_City"
        }

        return NSLocalizedString("lbl_AddressBook_City", bundle: bundle, comment: "")
      }

      /// en translation: Clean
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_CleanButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_CleanButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_CleanButton"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_CleanButton", bundle: bundle, comment: "")
      }

      /// en translation: Clean
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_clean(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_clean", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_clean"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_clean", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, es, English
      static func btn_LocalNotification_To_Close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_LocalNotification_To_Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_LocalNotification_To_Close"
        }

        return NSLocalizedString("btn_LocalNotification_To_Close", bundle: bundle, comment: "")
      }

      /// en translation: Closed
      ///
      /// Locales: en, es, English
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", bundle: bundle, comment: "")
      }

      /// en translation: Closed
      ///
      /// Locales: en, es, English
      static func lbl_PartnerTable_Close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerTable_Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerTable_Close"
        }

        return NSLocalizedString("lbl_PartnerTable_Close", bundle: bundle, comment: "")
      }

      /// en translation: Closed ☹️
      ///
      /// Locales: en, es, English
      static func closeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CloseTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CloseTitle"
        }

        return NSLocalizedString("CloseTitle", bundle: bundle, comment: "")
      }

      /// en translation: Code
      ///
      /// Locales: en, es, English
      static func code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Code"
        }

        return NSLocalizedString("Code", bundle: bundle, comment: "")
      }

      /// en translation: Code can take up to %d seconds to arrive
      ///
      /// Locales: en, es
      static func lbl_Step2_Code_Send_Arrive(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("lbl_Step2_Code_Send_Arrive", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Code_Send_Arrive"
        }

        let format = NSLocalizedString("lbl_Step2_Code_Send_Arrive", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Code not found
      ///
      /// Locales: en, es
      static func code_Not_Found(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Code_Not_Found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Code_Not_Found"
        }

        return NSLocalizedString("Code_Not_Found", bundle: bundle, comment: "")
      }

      /// en translation: Coffee Gourmet
      ///
      /// Locales: en, es, English
      static func lbl_PartnerProduct_Café_Gourmet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerProduct_Café_Gourmet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerProduct_Café_Gourmet"
        }

        return NSLocalizedString("lbl_PartnerProduct_Café_Gourmet", bundle: bundle, comment: "")
      }

      /// en translation: Cold Product
      ///
      /// Locales: en, es
      static func lblhugoBadRatings5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoBadRatings5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoBadRatings5"
        }

        return NSLocalizedString("lblhugoBadRatings5", bundle: bundle, comment: "")
      }

      /// en translation: Collect funds from:
      ///
      /// Locales: en, es
      static func hp_CashinMoneyConfirmation_MoneySource(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinMoneyConfirmation_MoneySource", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinMoneyConfirmation_MoneySource"
        }

        return NSLocalizedString("hp_CashinMoneyConfirmation_MoneySource", bundle: bundle, comment: "")
      }

      /// en translation: Colonia Maquilishuat, San Salvador
      ///
      /// Locales: en, es, English
      static func lbl_SearchNewAddress_Sub_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchNewAddress_Sub_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchNewAddress_Sub_Address"
        }

        return NSLocalizedString("lbl_SearchNewAddress_Sub_Address", bundle: bundle, comment: "")
      }

      /// en translation: Coming soon
      ///
      /// Locales: en, es, English
      static func soon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Soon"
        }

        return NSLocalizedString("Soon", bundle: bundle, comment: "")
      }

      /// en translation: Coming soon 😁
      ///
      /// Locales: en, es, English
      static func cominSoonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CominSoonTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CominSoonTitle"
        }

        return NSLocalizedString("CominSoonTitle", bundle: bundle, comment: "")
      }

      /// en translation: Comment (optional)
      ///
      /// Locales: en, es, English
      static func lbl_Comment_Optional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Comment_Optional", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Comment_Optional"
        }

        return NSLocalizedString("lbl_Comment_Optional", bundle: bundle, comment: "")
      }

      /// en translation: Comment (optional)
      ///
      /// Locales: en, es, English
      static func txt_RatingComment_Comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_RatingComment_Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_RatingComment_Comment"
        }

        return NSLocalizedString("txt_RatingComment_Comment", bundle: bundle, comment: "")
      }

      /// en translation: Commentary
      ///
      /// Locales: en, es
      static func lbl_FinalizeBadRating_Improve_Comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeBadRating_Improve_Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeBadRating_Improve_Comment"
        }

        return NSLocalizedString("lbl_FinalizeBadRating_Improve_Comment", bundle: bundle, comment: "")
      }

      /// en translation: Commerce
      ///
      /// Locales: en, es
      static func hp_commerce_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_commerce_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_commerce_title"
        }

        return NSLocalizedString("hp_commerce_title", bundle: bundle, comment: "")
      }

      /// en translation: Commerce
      ///
      /// Locales: en, es
      static func lbl_Title_Type_Commerce(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Title_Type_Commerce", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Title_Type_Commerce"
        }

        return NSLocalizedString("lbl_Title_Type_Commerce", bundle: bundle, comment: "")
      }

      /// en translation: Complete name.
      ///
      /// Locales: en, es, English
      static func txt_EditUserProfile_Full_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_EditUserProfile_Full_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_EditUserProfile_Full_Name"
        }

        return NSLocalizedString("txt_EditUserProfile_Full_Name", bundle: bundle, comment: "")
      }

      /// en translation: Complete your data.
      ///
      /// Locales: en, es, English
      static func lbl_ChooseAddressIcon_Fill_Details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ChooseAddressIcon_Fill_Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChooseAddressIcon_Fill_Details"
        }

        return NSLocalizedString("lbl_ChooseAddressIcon_Fill_Details", bundle: bundle, comment: "")
      }

      /// en translation: Conditions
      ///
      /// Locales: en, es
      static func hp_lbl_onboarding_conditions_word(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_onboarding_conditions_word", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_onboarding_conditions_word"
        }

        return NSLocalizedString("hp_lbl_onboarding_conditions_word", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, es
      static func btn_ConfirmCancelRide_Confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ConfirmCancelRide_Confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ConfirmCancelRide_Confirm"
        }

        return NSLocalizedString("btn_ConfirmCancelRide_Confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, es, English
      static func btn_ListView_Confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ListView_Confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ListView_Confirm"
        }

        return NSLocalizedString("btn_ListView_Confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, es, English
      static func confirmAddressOK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ConfirmAddressOK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ConfirmAddressOK"
        }

        return NSLocalizedString("ConfirmAddressOK", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, es, English
      static func lbl_CorrectNumber_Phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CorrectNumber_Phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CorrectNumber_Phone"
        }

        return NSLocalizedString("lbl_CorrectNumber_Phone", bundle: bundle, comment: "")
      }

      /// en translation: Confirm PIN.
      ///
      /// Locales: en, es
      static func hp_temporal_code_confirm_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_temporal_code_confirm_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_temporal_code_confirm_pin"
        }

        return NSLocalizedString("hp_temporal_code_confirm_pin", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Passcode
      ///
      /// Locales: en, es
      static func hp_lbl_account_confirmpin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_account_confirmpin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_account_confirmpin"
        }

        return NSLocalizedString("hp_lbl_account_confirmpin", bundle: bundle, comment: "")
      }

      /// en translation: Confirm information
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmAlert_Confirm_Data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmAlert_Confirm_Data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmAlert_Confirm_Data"
        }

        return NSLocalizedString("lbl_ConfirmAlert_Confirm_Data", bundle: bundle, comment: "")
      }

      /// en translation: Confirm where we will start!
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmationBottom_Confirm_Start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmationBottom_Confirm_Start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmationBottom_Confirm_Start"
        }

        return NSLocalizedString("lbl_ConfirmationBottom_Confirm_Start", bundle: bundle, comment: "")
      }

      /// en translation: Confirm your PIN
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_newpin_confirmation_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_newpin_confirmation_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_newpin_confirmation_subtitle"
        }

        return NSLocalizedString("hp_full_reset_pin_newpin_confirmation_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Confirm your address
      ///
      /// Locales: en, es, English
      static func confirmAddressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ConfirmAddressTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ConfirmAddressTitle"
        }

        return NSLocalizedString("ConfirmAddressTitle", bundle: bundle, comment: "")
      }

      /// en translation: Confirm your current location!
      ///
      /// Locales: en, English
      static func lbl_Search_GpsLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Search_GpsLocation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Search_GpsLocation"
        }

        return NSLocalizedString("lbl_Search_GpsLocation", bundle: bundle, comment: "")
      }

      /// en translation: Confirm your location!
      ///
      /// Locales: en, es, English
      static func lbl_Confirm_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Confirm_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Confirm_Location"
        }

        return NSLocalizedString("lbl_Confirm_Location", bundle: bundle, comment: "")
      }

      /// en translation: Confirm your location!
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmationBottom_Confirm_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmationBottom_Confirm_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmationBottom_Confirm_Location"
        }

        return NSLocalizedString("lbl_ConfirmationBottom_Confirm_Location", bundle: bundle, comment: "")
      }

      /// en translation: Confirm your order again!
      ///
      /// Locales: en, es
      static func sucursalChangeAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SucursalChangeAlertTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SucursalChangeAlertTitle"
        }

        return NSLocalizedString("SucursalChangeAlertTitle", bundle: bundle, comment: "")
      }

      /// en translation: Confirmar número
      ///
      /// Locales: en, es, English
      static func confirmPhoneTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPhoneTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPhoneTitle"
        }

        return NSLocalizedString("confirmPhoneTitle", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation
      ///
      /// Locales: en, es
      static func lblTitleConfirmCancelOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblTitleConfirmCancelOrder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblTitleConfirmCancelOrder"
        }

        return NSLocalizedString("lblTitleConfirmCancelOrder", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static func callSubTitleOnWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CallSubTitleOnWay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CallSubTitleOnWay"
        }

        return NSLocalizedString("CallSubTitleOnWay", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static func callSubTitlePicking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CallSubTitlePicking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CallSubTitlePicking"
        }

        return NSLocalizedString("CallSubTitlePicking", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static func cancelRideSubTitleOnWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelRideSubTitleOnWay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelRideSubTitleOnWay"
        }

        return NSLocalizedString("CancelRideSubTitleOnWay", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static func cancelRideSubTitlePicking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelRideSubTitlePicking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelRideSubTitlePicking"
        }

        return NSLocalizedString("CancelRideSubTitlePicking", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation
      ///
      /// Locales: en, es, English
      static func confirmSaveTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ConfirmSaveTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ConfirmSaveTitle"
        }

        return NSLocalizedString("ConfirmSaveTitle", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations you have new prizes!
      ///
      /// Locales: en, es, English
      static func youHaveNewPrizesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YouHaveNewPrizesTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YouHaveNewPrizesTitle"
        }

        return NSLocalizedString("YouHaveNewPrizesTitle", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, es, English
      static func btn_OrderRedeem_Continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_OrderRedeem_Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_OrderRedeem_Continue"
        }

        return NSLocalizedString("btn_OrderRedeem_Continue", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, es, English
      static func confirmLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ConfirmLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ConfirmLabel"
        }

        return NSLocalizedString("ConfirmLabel", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, es, English
      static func stayOnApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("StayOnApp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "StayOnApp"
        }

        return NSLocalizedString("StayOnApp", bundle: bundle, comment: "")
      }

      /// en translation: Cost of service
      ///
      /// Locales: en, es
      static func lbl_costMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_costMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_costMessage"
        }

        return NSLocalizedString("lbl_costMessage", bundle: bundle, comment: "")
      }

      /// en translation: Cost per shipment
      ///
      /// Locales: en, es, English
      static func lbl_Sort_Cost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Sort_Cost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Sort_Cost"
        }

        return NSLocalizedString("lbl_Sort_Cost", bundle: bundle, comment: "")
      }

      /// en translation: Could not save billing information
      ///
      /// Locales: en, es, English
      static func cloud_Not_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cloud_Not_save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cloud_Not_save"
        }

        return NSLocalizedString("Cloud_Not_save", bundle: bundle, comment: "")
      }

      /// en translation: Count on me   for anything you need.
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Cell_CountMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Cell_CountMe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Cell_CountMe"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Cell_CountMe", bundle: bundle, comment: "")
      }

      /// en translation: Create Account
      ///
      /// Locales: en, es
      static func create_Account_Small(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create_Account_Small", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create_Account_Small"
        }

        return NSLocalizedString("Create_Account_Small", bundle: bundle, comment: "")
      }

      /// en translation: Create Account
      ///
      /// Locales: en, es
      static func hp_lbl_onboarding_create_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_onboarding_create_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_onboarding_create_account"
        }

        return NSLocalizedString("hp_lbl_onboarding_create_account", bundle: bundle, comment: "")
      }

      /// en translation: Create a 4 digit Passcode.
      ///
      /// Locales: en, es
      static func hp_lbl_account_createpin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_account_createpin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_account_createpin"
        }

        return NSLocalizedString("hp_lbl_account_createpin", bundle: bundle, comment: "")
      }

      /// en translation: Create your account.
      ///
      /// Locales: en, es, English
      static func lbl_RegisterPhone_Create_Account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RegisterPhone_Create_Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RegisterPhone_Create_Account"
        }

        return NSLocalizedString("lbl_RegisterPhone_Create_Account", bundle: bundle, comment: "")
      }

      /// en translation: Create your password.
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_Password_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_Password_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_Password_Text"
        }

        return NSLocalizedString("lbl_CreateFBPassword_Password_Text", bundle: bundle, comment: "")
      }

      /// en translation: Credit card
      ///
      /// Locales: en, es, English
      static func ccLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCLabel"
        }

        return NSLocalizedString("CCLabel", bundle: bundle, comment: "")
      }

      /// en translation: Credit cards
      ///
      /// Locales: en, es, English
      static func lbl_creditcard_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_creditcard_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_creditcard_title"
        }

        return NSLocalizedString("lbl_creditcard_title", bundle: bundle, comment: "")
      }

      /// en translation: Credits hugo
      ///
      /// Locales: en, es
      static func lbl_Credits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Credits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Credits"
        }

        return NSLocalizedString("lbl_Credits", bundle: bundle, comment: "")
      }

      /// en translation: Credits usable within hugoapp in any of our services.
      ///
      /// Locales: en, es
      static func lbl_Credits_Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Credits_Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Credits_Subtitle"
        }

        return NSLocalizedString("lbl_Credits_Subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Cumbre Palo Alto
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentAddress_Summit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentAddress_Summit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentAddress_Summit"
        }

        return NSLocalizedString("lbl_ShipmentAddress_Summit", bundle: bundle, comment: "")
      }

      /// en translation: Current invoice
      ///
      /// Locales: en, es, English
      static func lbl_Current_Invoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Current_Invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Current_Invoice"
        }

        return NSLocalizedString("lbl_Current_Invoice", bundle: bundle, comment: "")
      }

      /// en translation: Current location
      ///
      /// Locales: en, es, English
      static func lbl_RouteNav_Current_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RouteNav_Current_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RouteNav_Current_Location"
        }

        return NSLocalizedString("lbl_RouteNav_Current_Location", bundle: bundle, comment: "")
      }

      /// en translation: Current location
      ///
      /// Locales: en, es, English
      static func lbl_UserLocation_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UserLocation_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UserLocation_Location"
        }

        return NSLocalizedString("lbl_UserLocation_Location", bundle: bundle, comment: "")
      }

      /// en translation: Currently we only support VISA and MASTERCARD
      ///
      /// Locales: en, es, English
      static func ccTypeRequiredWarningMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCTypeRequiredWarningMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCTypeRequiredWarningMessage"
        }

        return NSLocalizedString("CCTypeRequiredWarningMessage", bundle: bundle, comment: "")
      }

      /// en translation: Cédula
      ///
      /// Locales: en, es
      static func receipt_configuration_document_title_yummy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_document_title_yummy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_document_title_yummy"
        }

        return NSLocalizedString("receipt_configuration_document_title_yummy", bundle: bundle, comment: "")
      }

      /// en translation: DATE AND TIME (APPROX.)
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentCheckout_Date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentCheckout_Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentCheckout_Date"
        }

        return NSLocalizedString("lbl_ShipmentCheckout_Date", bundle: bundle, comment: "")
      }

      /// en translation: DATE AND TIME OF DELIVERY (APPROX.)
      ///
      /// Locales: en, es, English
      static func lbl_Date_Time_Delivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Date_Time_Delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Date_Time_Delivery"
        }

        return NSLocalizedString("lbl_Date_Time_Delivery", bundle: bundle, comment: "")
      }

      /// en translation: DELETE
      ///
      /// Locales: en, es
      static func receipt_list_delete_action_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_list_delete_action_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_list_delete_action_title"
        }

        return NSLocalizedString("receipt_list_delete_action_title", bundle: bundle, comment: "")
      }

      /// en translation: DELIVERY FEE
      ///
      /// Locales: en, es, English
      static func lbl_PartnerProduct_Minimum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerProduct_Minimum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerProduct_Minimum"
        }

        return NSLocalizedString("lbl_PartnerProduct_Minimum", bundle: bundle, comment: "")
      }

      /// en translation: DELIVERY INDICATIONS
      ///
      /// Locales: en, es, English
      static func lbl_Shipping_Indication(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Shipping_Indication", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Shipping_Indication"
        }

        return NSLocalizedString("lbl_Shipping_Indication", bundle: bundle, comment: "")
      }

      /// en translation: DELIVERY INDICATIONS
      ///
      /// Locales: en, es, English
      static func lbl_Shipping_Indications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Shipping_Indications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Shipping_Indications"
        }

        return NSLocalizedString("lbl_Shipping_Indications", bundle: bundle, comment: "")
      }

      /// en translation: DELIVERY METHOD
      ///
      /// Locales: en, es
      static func lbl_ProcessOrder_Delivery_Type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProcessOrder_Delivery_Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProcessOrder_Delivery_Type"
        }

        return NSLocalizedString("lbl_ProcessOrder_Delivery_Type", bundle: bundle, comment: "")
      }

      /// en translation: DEPARTURE
      ///
      /// Locales: en, es, English
      static func lbl_Match(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Match"
        }

        return NSLocalizedString("lbl_Match", bundle: bundle, comment: "")
      }

      /// en translation: DEPARTURE
      ///
      /// Locales: en, es, English
      static func lbl_RouteOutstanding_Match(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RouteOutstanding_Match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RouteOutstanding_Match"
        }

        return NSLocalizedString("lbl_RouteOutstanding_Match", bundle: bundle, comment: "")
      }

      /// en translation: DESTINY
      ///
      /// Locales: en, es, English
      static func lbl_Destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Destination"
        }

        return NSLocalizedString("lbl_Destination", bundle: bundle, comment: "")
      }

      /// en translation: DETAIL
      ///
      /// Locales: en, es
      static func details_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Details_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Details_Text"
        }

        return NSLocalizedString("Details_Text", bundle: bundle, comment: "")
      }

      /// en translation: DETAIL
      ///
      /// Locales: en, es
      static func hp_CashinTransactionDetailViewController_Detail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinTransactionDetailViewController_Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinTransactionDetailViewController_Detail"
        }

        return NSLocalizedString("hp_CashinTransactionDetailViewController_Detail", bundle: bundle, comment: "")
      }

      /// en translation: DETAIL
      ///
      /// Locales: en, es
      static func hp_transaction_detail_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_transaction_detail_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_transaction_detail_title"
        }

        return NSLocalizedString("hp_transaction_detail_title", bundle: bundle, comment: "")
      }

      /// en translation: DETAIL OF TRANSACTION
      ///
      /// Locales: en, es
      static func hp_transaction_detail_navigation_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_transaction_detail_navigation_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_transaction_detail_navigation_title"
        }

        return NSLocalizedString("hp_transaction_detail_navigation_title", bundle: bundle, comment: "")
      }

      /// en translation: DISTANCE
      ///
      /// Locales: en, es, English
      static func lbl_AddressInit_Distance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressInit_Distance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressInit_Distance"
        }

        return NSLocalizedString("lbl_AddressInit_Distance", bundle: bundle, comment: "")
      }

      /// en translation: DO NOT REWARD THIS TIME
      ///
      /// Locales: en, es, English
      static func btn_FinalizeGoodRating_Not_Reward(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_FinalizeGoodRating_Not_Reward", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_FinalizeGoodRating_Not_Reward"
        }

        return NSLocalizedString("btn_FinalizeGoodRating_Not_Reward", bundle: bundle, comment: "")
      }

      /// en translation: DOMINGO 22 DE ENERO / 7PM
      ///
      /// Locales: en, es, English
      static func lbl_DateRangePicker_Months(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DateRangePicker_Months", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DateRangePicker_Months"
        }

        return NSLocalizedString("lbl_DateRangePicker_Months", bundle: bundle, comment: "")
      }

      /// en translation: DONE!
      ///
      /// Locales: en, es, English
      static func btn_RangeSlider_Done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_RangeSlider_Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_RangeSlider_Done"
        }

        return NSLocalizedString("btn_RangeSlider_Done", bundle: bundle, comment: "")
      }

      /// en translation: Daily Expense
      ///
      /// Locales: en, es
      static func hp_lbl_expense_dailystring(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_expense_dailystring", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_expense_dailystring"
        }

        return NSLocalizedString("hp_lbl_expense_dailystring", bundle: bundle, comment: "")
      }

      /// en translation: Data required
      ///
      /// Locales: en, es, English
      static func requiredFields(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RequiredFields", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RequiredFields"
        }

        return NSLocalizedString("RequiredFields", bundle: bundle, comment: "")
      }

      /// en translation: Date & time
      ///
      /// Locales: en, es
      static func hp_CashinTransactionDetailViewController_Datetime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinTransactionDetailViewController_Datetime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinTransactionDetailViewController_Datetime"
        }

        return NSLocalizedString("hp_CashinTransactionDetailViewController_Datetime", bundle: bundle, comment: "")
      }

      /// en translation: Date and Time
      ///
      /// Locales: en, es
      static func hp_datetime_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_datetime_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_datetime_title"
        }

        return NSLocalizedString("hp_datetime_title", bundle: bundle, comment: "")
      }

      /// en translation: Date of birth
      ///
      /// Locales: en, es, English
      static func lbl_BasicInfo_dob(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_BasicInfo_dob", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_BasicInfo_dob"
        }

        return NSLocalizedString("lbl_BasicInfo_dob", bundle: bundle, comment: "")
      }

      /// en translation: Date transaction
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_date"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_date", bundle: bundle, comment: "")
      }

      /// en translation: Debit to card
      ///
      /// Locales: en, es
      static func hp_debit_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_debit_card_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_debit_card_title"
        }

        return NSLocalizedString("hp_debit_card_title", bundle: bundle, comment: "")
      }

      /// en translation: Debited card
      ///
      /// Locales: en, es
      static func hp_CashinTransactionDetailViewController_MoneySource(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinTransactionDetailViewController_MoneySource", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinTransactionDetailViewController_MoneySource"
        }

        return NSLocalizedString("hp_CashinTransactionDetailViewController_MoneySource", bundle: bundle, comment: "")
      }

      /// en translation: Define delivery date and time
      ///
      /// Locales: en, es
      static func lbl_sch_selectdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sch_selectdate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sch_selectdate"
        }

        return NSLocalizedString("lbl_sch_selectdate", bundle: bundle, comment: "")
      }

      /// en translation: Delayed payments
      ///
      /// Locales: en, es, English
      static func lbl_Late_Payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Late_Payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Late_Payments"
        }

        return NSLocalizedString("lbl_Late_Payments", bundle: bundle, comment: "")
      }

      /// en translation: Delete Card
      ///
      /// Locales: en, es
      static func lbl_DeleteCardTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DeleteCardTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DeleteCardTitle"
        }

        return NSLocalizedString("lbl_DeleteCardTitle", bundle: bundle, comment: "")
      }

      /// en translation: Delete Card
      ///
      /// Locales: en, es, English
      static func deleteCardTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DeleteCardTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DeleteCardTitle"
        }

        return NSLocalizedString("DeleteCardTitle", bundle: bundle, comment: "")
      }

      /// en translation: Delete address
      ///
      /// Locales: en, es, English
      static func deleteAddressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DeleteAddressTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DeleteAddressTitle"
        }

        return NSLocalizedString("DeleteAddressTitle", bundle: bundle, comment: "")
      }

      /// en translation: Delete information
      ///
      /// Locales: en, es, English
      static func deleteBillingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DeleteBillingTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DeleteBillingTitle"
        }

        return NSLocalizedString("DeleteBillingTitle", bundle: bundle, comment: "")
      }

      /// en translation: Delivery
      ///
      /// Locales: en, es
      static func partner_header_delivery_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("partner_header_delivery_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "partner_header_delivery_title"
        }

        return NSLocalizedString("partner_header_delivery_title", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Address
      ///
      /// Locales: en, es, English
      static func addressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddressTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AddressTitle"
        }

        return NSLocalizedString("AddressTitle", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Address
      ///
      /// Locales: en, es, English
      static func locationChangedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationChangedTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationChangedTitle"
        }

        return NSLocalizedString("LocationChangedTitle", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Time
      ///
      /// Locales: en, es
      static func lbldriverBadRatings5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverBadRatings5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverBadRatings5"
        }

        return NSLocalizedString("lbldriverBadRatings5", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Time
      ///
      /// Locales: en, es
      static func lblhugoBadRatings6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoBadRatings6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoBadRatings6"
        }

        return NSLocalizedString("lblhugoBadRatings6", bundle: bundle, comment: "")
      }

      /// en translation: Delivery address
      ///
      /// Locales: en, es
      static func lbl_sch_detail_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sch_detail_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sch_detail_address"
        }

        return NSLocalizedString("lbl_sch_detail_address", bundle: bundle, comment: "")
      }

      /// en translation: Delivery date and time
      ///
      /// Locales: en, es
      static func lbl_sch_schedule_sublabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sch_schedule_sublabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sch_schedule_sublabel"
        }

        return NSLocalizedString("lbl_sch_schedule_sublabel", bundle: bundle, comment: "")
      }

      /// en translation: Delivery fee __deliveryCostLabel__
      ///
      /// Locales: en, es
      static func lblDeliveryCost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblDeliveryCost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblDeliveryCost"
        }

        return NSLocalizedString("lblDeliveryCost", bundle: bundle, comment: "")
      }

      /// en translation: Delivery instructions (e.g. ring the bell)
      ///
      /// Locales: en, es, English
      static func lbl_ProcessOrder_Instruction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProcessOrder_Instruction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProcessOrder_Instruction"
        }

        return NSLocalizedString("lbl_ProcessOrder_Instruction", bundle: bundle, comment: "")
      }

      /// en translation: Delivery method:
      ///
      /// Locales: en, es
      static func lbl_Sort_Delivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Sort_Delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Sort_Delivery"
        }

        return NSLocalizedString("lbl_Sort_Delivery", bundle: bundle, comment: "")
      }

      /// en translation: Delivery place (C)
      ///
      /// Locales: en, es, English
      static func lbl_PaymentLocation_Place_Delivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PaymentLocation_Place_Delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PaymentLocation_Place_Delivery"
        }

        return NSLocalizedString("lbl_PaymentLocation_Place_Delivery", bundle: bundle, comment: "")
      }

      /// en translation: Delivery time
      ///
      /// Locales: en, es, English
      static func lbl_Sort_DeliverTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Sort_DeliverTime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Sort_DeliverTime"
        }

        return NSLocalizedString("lbl_Sort_DeliverTime", bundle: bundle, comment: "")
      }

      /// en translation: Demand your invoice
      ///
      /// Locales: en, es
      static func lbl_ProcessOrder_Demand_Invoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProcessOrder_Demand_Invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProcessOrder_Demand_Invoice"
        }

        return NSLocalizedString("lbl_ProcessOrder_Demand_Invoice", bundle: bundle, comment: "")
      }

      /// en translation: Demand your invoice
      ///
      /// Locales: en, es
      static func lbl_Shipment_Invoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Shipment_Invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Shipment_Invoice"
        }

        return NSLocalizedString("lbl_Shipment_Invoice", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en, es, English
      static func lbl_ChooseAddressIcon_Descripation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ChooseAddressIcon_Descripation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChooseAddressIcon_Descripation"
        }

        return NSLocalizedString("lbl_ChooseAddressIcon_Descripation", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentAddress_Description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentAddress_Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentAddress_Description"
        }

        return NSLocalizedString("lbl_ShipmentAddress_Description", bundle: bundle, comment: "")
      }

      /// en translation: Destination out of coverage
      ///
      /// Locales: en, es, English
      static func hotZoneTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HotZoneTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HotZoneTitle"
        }

        return NSLocalizedString("HotZoneTitle", bundle: bundle, comment: "")
      }

      /// en translation: Destiny 10
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeRideNew_Destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRideNew_Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRideNew_Destination"
        }

        return NSLocalizedString("lbl_FinalizeRideNew_Destination", bundle: bundle, comment: "")
      }

      /// en translation: Destiny place
      ///
      /// Locales: en, es, English
      static func lbl_SearchAddressShipment_Destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchAddressShipment_Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchAddressShipment_Destination"
        }

        return NSLocalizedString("lbl_SearchAddressShipment_Destination", bundle: bundle, comment: "")
      }

      /// en translation: Detail ($0.50)
      ///
      /// Locales: en, es, English
      static func lbl_OrderSummary_Product_Details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Product_Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Product_Details"
        }

        return NSLocalizedString("lbl_OrderSummary_Product_Details", bundle: bundle, comment: "")
      }

      /// en translation: Detalle ($0.50)
      ///
      /// Locales: en, es, English
      static func lbl_ProductDetail_Des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductDetail_Des", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductDetail_Des"
        }

        return NSLocalizedString("lbl_ProductDetail_Des", bundle: bundle, comment: "")
      }

      /// en translation: Detalle de tu envío
      ///
      /// Locales: en, es, English
      static func lbl_Details_Of_Shipment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Details_Of_Shipment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Details_Of_Shipment"
        }

        return NSLocalizedString("lbl_Details_Of_Shipment", bundle: bundle, comment: "")
      }

      /// en translation: Did you forget your password?
      ///
      /// Locales: en, es
      static func btn_ChanelRecover_Forgot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ChanelRecover_Forgot", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ChanelRecover_Forgot"
        }

        return NSLocalizedString("btn_ChanelRecover_Forgot", bundle: bundle, comment: "")
      }

      /// en translation: Discard order!
      ///
      /// Locales: en, es
      static func lbl_Process_Order_Discard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Process_Order_Discard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Process_Order_Discard"
        }

        return NSLocalizedString("lbl_Process_Order_Discard", bundle: bundle, comment: "")
      }

      /// en translation: Do you have any positive comment for
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeGoodRating_Postive_Comments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeGoodRating_Postive_Comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeGoodRating_Postive_Comments"
        }

        return NSLocalizedString("lbl_FinalizeGoodRating_Postive_Comments", bundle: bundle, comment: "")
      }

      /// en translation: Do you have any positive comment for
      ///
      /// Locales: en, es, English
      static func lbl_RatingComment_Postive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingComment_Postive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingComment_Postive"
        }

        return NSLocalizedString("lbl_RatingComment_Postive", bundle: bundle, comment: "")
      }

      /// en translation: Do you need an invoice?
      ///
      /// Locales: en, es, English
      static func lbl_Need_Invoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Need_Invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Need_Invoice"
        }

        return NSLocalizedString("lbl_Need_Invoice", bundle: bundle, comment: "")
      }

      /// en translation: Do you need an invoice?
      ///
      /// Locales: en, es, English
      static func lbl_ProcessOrder_Need_Invoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProcessOrder_Need_Invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProcessOrder_Need_Invoice"
        }

        return NSLocalizedString("lbl_ProcessOrder_Need_Invoice", bundle: bundle, comment: "")
      }

      /// en translation: Do you need change for?
      ///
      /// Locales: en, es, English
      static func needChangeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NeedChangeMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NeedChangeMessage"
        }

        return NSLocalizedString("NeedChangeMessage", bundle: bundle, comment: "")
      }

      /// en translation: Do you need change?
      ///
      /// Locales: en, es
      static func lbl_need_change_ProcessOrder_modal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_need_change_ProcessOrder_modal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_need_change_ProcessOrder_modal"
        }

        return NSLocalizedString("lbl_need_change_ProcessOrder_modal", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to add a new address?
      ///
      /// Locales: en, es, English
      static func locationChangedAddQuestion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationChangedAddQuestion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationChangedAddQuestion"
        }

        return NSLocalizedString("LocationChangedAddQuestion", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to cancel your order?
      ///
      /// Locales: en, es
      static func alert_OrderSummary_cancel_order_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_OrderSummary_cancel_order_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_OrderSummary_cancel_order_message"
        }

        return NSLocalizedString("alert_OrderSummary_cancel_order_message", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to continue?
      ///
      /// Locales: en, es
      static func lblQuestionConfirmCancelOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblQuestionConfirmCancelOrder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblQuestionConfirmCancelOrder"
        }

        return NSLocalizedString("lblQuestionConfirmCancelOrder", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to remove this product from your order?
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_eemove_product_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_eemove_product_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_eemove_product_subtitle"
        }

        return NSLocalizedString("alert_ProcessOrder_eemove_product_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to select an address?
      ///
      /// Locales: en, es, English
      static func locationChangedSelectQuestion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationChangedSelectQuestion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationChangedSelectQuestion"
        }

        return NSLocalizedString("LocationChangedSelectQuestion", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to use the points of your card in this order?
      ///
      /// Locales: en, es, English
      static func lbl_RedeemSwitch_Card_Point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RedeemSwitch_Card_Point", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RedeemSwitch_Card_Point"
        }

        return NSLocalizedString("lbl_RedeemSwitch_Card_Point", bundle: bundle, comment: "")
      }

      /// en translation: Do you wish to continue?
      ///
      /// Locales: en, es, English
      static func lbl_VerifyCreateAddres_Alert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_VerifyCreateAddres_Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_VerifyCreateAddres_Alert"
        }

        return NSLocalizedString("lbl_VerifyCreateAddres_Alert", bundle: bundle, comment: "")
      }

      /// en translation: Don't use any prize
      ///
      /// Locales: en, es, English
      static func lbl_Promos_Dont_Use_AnyPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Promos_Dont_Use_AnyPrice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Promos_Dont_Use_AnyPrice"
        }

        return NSLocalizedString("lbl_Promos_Dont_Use_AnyPrice", bundle: bundle, comment: "")
      }

      /// en translation: Don't worry! Choose the medium where you would like to receive the code to validate your identity.
      ///
      /// Locales: en, es
      static func btn_ChanelRecover_Validate_Identifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ChanelRecover_Validate_Identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ChanelRecover_Validate_Identifier"
        }

        return NSLocalizedString("btn_ChanelRecover_Validate_Identifier", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es
      static func btn_done_ProcessOrder_modal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_done_ProcessOrder_modal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_done_ProcessOrder_modal"
        }

        return NSLocalizedString("btn_done_ProcessOrder_modal", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_done"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_done", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es, English
      static func btn_DateRangePicker_Finalize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_DateRangePicker_Finalize", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_DateRangePicker_Finalize"
        }

        return NSLocalizedString("btn_DateRangePicker_Finalize", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es, English
      static func btn_RatingView_Order_Status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_RatingView_Order_Status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_RatingView_Order_Status"
        }

        return NSLocalizedString("btn_RatingView_Order_Status", bundle: bundle, comment: "")
      }

      /// en translation: Dynamic rate applies
      ///
      /// Locales: en, es, English
      static func lbl_RangeSlider_Dynamic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RangeSlider_Dynamic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RangeSlider_Dynamic"
        }

        return NSLocalizedString("lbl_RangeSlider_Dynamic", bundle: bundle, comment: "")
      }

      /// en translation: E.G. He will knock on the door and ask for Juan…
      ///
      /// Locales: en, es, English
      static func lbl_Knock_Door(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Knock_Door", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Knock_Door"
        }

        return NSLocalizedString("lbl_Knock_Door", bundle: bundle, comment: "")
      }

      /// en translation: EDIT
      ///
      /// Locales: en, es
      static func receipt_list_edit_action_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_list_edit_action_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_list_edit_action_title"
        }

        return NSLocalizedString("receipt_list_edit_action_title", bundle: bundle, comment: "")
      }

      /// en translation: EDIT
      ///
      /// Locales: en, es, English
      static func lbl_AddPhone_Edit_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddPhone_Edit_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddPhone_Edit_Title"
        }

        return NSLocalizedString("lbl_AddPhone_Edit_Title", bundle: bundle, comment: "")
      }

      /// en translation: EDIT ROUTE
      ///
      /// Locales: en, es
      static func search_Title_Edit_Route(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search_Title_Edit_Route", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search_Title_Edit_Route"
        }

        return NSLocalizedString("Search_Title_Edit_Route", bundle: bundle, comment: "")
      }

      /// en translation: EJ. hugoapp@domain.com
      ///
      /// Locales: en, es, English
      static func txt_EmailInfo_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_EmailInfo_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_EmailInfo_email"
        }

        return NSLocalizedString("txt_EmailInfo_email", bundle: bundle, comment: "")
      }

      /// en translation: EMAIL
      ///
      /// Locales: en, es, English
      static func lbl_AddUserInfo_Email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddUserInfo_Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddUserInfo_Email"
        }

        return NSLocalizedString("lbl_AddUserInfo_Email", bundle: bundle, comment: "")
      }

      /// en translation: EMAIL
      ///
      /// Locales: en, es, English
      static func lbl_EditUserProfile_Email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EditUserProfile_Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EditUserProfile_Email"
        }

        return NSLocalizedString("lbl_EditUserProfile_Email", bundle: bundle, comment: "")
      }

      /// en translation: EMERGENCIES
      ///
      /// Locales: en, es, English
      static func lbl_EmergencyOn_Emergencias(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EmergencyOn_Emergencias", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EmergencyOn_Emergencias"
        }

        return NSLocalizedString("lbl_EmergencyOn_Emergencias", bundle: bundle, comment: "")
      }

      /// en translation: END
      ///
      /// Locales: en, es, English
      static func lbl_End(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_End", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_End"
        }

        return NSLocalizedString("lbl_End", bundle: bundle, comment: "")
      }

      /// en translation: ENTER ANOTHER NUMBER
      ///
      /// Locales: en, es
      static func btn_Enter_Another(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Enter_Another", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Enter_Another"
        }

        return NSLocalizedString("btn_Enter_Another", bundle: bundle, comment: "")
      }

      /// en translation: ENTER ANOTHER NUMBER.
      ///
      /// Locales: en, es, English
      static func btn_TopUpMain_Anothet_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_TopUpMain_Anothet_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_TopUpMain_Anothet_Number"
        }

        return NSLocalizedString("btn_TopUpMain_Anothet_Number", bundle: bundle, comment: "")
      }

      /// en translation: ENTER HUGO
      ///
      /// Locales: en, es
      static func lbl_SignUpFinalize_Enter_Hugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SignUpFinalize_Enter_Hugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SignUpFinalize_Enter_Hugo"
        }

        return NSLocalizedString("lbl_SignUpFinalize_Enter_Hugo", bundle: bundle, comment: "")
      }

      /// en translation: ENTER YOUR DATA
      ///
      /// Locales: en, es
      static func lbl_Step3_Enter_Data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step3_Enter_Data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step3_Enter_Data"
        }

        return NSLocalizedString("lbl_Step3_Enter_Data", bundle: bundle, comment: "")
      }

      /// en translation: ENTER YOUR NUMBER
      ///
      /// Locales: en, es
      static func lbl_Step1_Enter_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Enter_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Enter_Number"
        }

        return NSLocalizedString("lbl_Step1_Enter_Number", bundle: bundle, comment: "")
      }

      /// en translation: ENTER YUMMY
      ///
      /// Locales: en, es
      static func lbl_SignUpFinalize_Enter_Yummy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SignUpFinalize_Enter_Yummy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SignUpFinalize_Enter_Yummy"
        }

        return NSLocalizedString("lbl_SignUpFinalize_Enter_Yummy", bundle: bundle, comment: "")
      }

      /// en translation: ERRAND
      ///
      /// Locales: en
      static func pastOrders_TypeErrands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PastOrders_TypeErrands", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PastOrders_TypeErrands"
        }

        return NSLocalizedString("PastOrders_TypeErrands", bundle: bundle, comment: "")
      }

      /// en translation: ERRANDS
      ///
      /// Locales: en, es, English
      static func lbl_Mandaditos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Mandaditos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Mandaditos"
        }

        return NSLocalizedString("lbl_Mandaditos", bundle: bundle, comment: "")
      }

      /// en translation: ESTIMATED COST
      ///
      /// Locales: en, es, English
      static func lbl_AddressInit_Esitimated_Cost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressInit_Esitimated_Cost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressInit_Esitimated_Cost"
        }

        return NSLocalizedString("lbl_AddressInit_Esitimated_Cost", bundle: bundle, comment: "")
      }

      /// en translation: ESTIMATED DELIVERY TIME
      ///
      /// Locales: en, es, English
      static func lbl_order_estimate_time_for_delivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_order_estimate_time_for_delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_order_estimate_time_for_delivery"
        }

        return NSLocalizedString("lbl_order_estimate_time_for_delivery", bundle: bundle, comment: "")
      }

      /// en translation: ETA: 12:45 PM
      ///
      /// Locales: en, es, English
      static func lbl_RideOrderTable_Time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideOrderTable_Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideOrderTable_Time"
        }

        return NSLocalizedString("lbl_RideOrderTable_Time", bundle: bundle, comment: "")
      }

      /// en translation: EV- 93482342934
      ///
      /// Locales: en, es, English
      static func lbl_EntertainmentOrder_Ev(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EntertainmentOrder_Ev", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EntertainmentOrder_Ev"
        }

        return NSLocalizedString("lbl_EntertainmentOrder_Ev", bundle: bundle, comment: "")
      }

      /// en translation: Early Delivery
      ///
      /// Locales: en, es
      static func lbldriverGoodRatings5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverGoodRatings5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverGoodRatings5"
        }

        return NSLocalizedString("lbldriverGoodRatings5", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, es, English
      static func actionEditLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ActionEditLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ActionEditLabel"
        }

        return NSLocalizedString("ActionEditLabel", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, es, English
      static func btn_TopUpCheckout_Edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_TopUpCheckout_Edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_TopUpCheckout_Edit"
        }

        return NSLocalizedString("btn_TopUpCheckout_Edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit Card
      ///
      /// Locales: en, es
      static func edit_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit_Card"
        }

        return NSLocalizedString("Edit_Card", bundle: bundle, comment: "")
      }

      /// en translation: Eduardo López
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Name"
        }

        return NSLocalizedString("lbl_CreatePassword_Name", bundle: bundle, comment: "")
      }

      /// en translation: Eduardo López
      ///
      /// Locales: en, es
      static func lbl_LoginPassword_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LoginPassword_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LoginPassword_name"
        }

        return NSLocalizedString("lbl_LoginPassword_name", bundle: bundle, comment: "")
      }

      /// en translation: Efficiency
      ///
      /// Locales: en, es
      static func lblhugoGoodRatings5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoGoodRatings5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoGoodRatings5"
        }

        return NSLocalizedString("lblhugoGoodRatings5", bundle: bundle, comment: "")
      }

      /// en translation: Efficiency
      ///
      /// Locales: en, es
      static func lblpartnerGoodRatings6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerGoodRatings6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerGoodRatings6"
        }

        return NSLocalizedString("lblpartnerGoodRatings6", bundle: bundle, comment: "")
      }

      /// en translation: Ej. Juan Martinez
      ///
      /// Locales: en, es, English
      static func txt_AddUserInfo_FullName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_AddUserInfo_FullName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_AddUserInfo_FullName"
        }

        return NSLocalizedString("txt_AddUserInfo_FullName", bundle: bundle, comment: "")
      }

      /// en translation: Ej. Juan Martinez
      ///
      /// Locales: en, es, English
      static func txt_EmailInfo_username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_EmailInfo_username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_EmailInfo_username"
        }

        return NSLocalizedString("txt_EmailInfo_username", bundle: bundle, comment: "")
      }

      /// en translation: Ejem. juan.lopez@moradito.com
      ///
      /// Locales: en, es, English
      static func txt_AddUserInfo_Email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_AddUserInfo_Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_AddUserInfo_Email"
        }

        return NSLocalizedString("txt_AddUserInfo_Email", bundle: bundle, comment: "")
      }

      /// en translation: El Salvador
      ///
      /// Locales: en, es, English
      static func lbl_Country_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Country_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Country_Name"
        }

        return NSLocalizedString("lbl_Country_Name", bundle: bundle, comment: "")
      }

      /// en translation: El Salvador
      ///
      /// Locales: en, es, English
      static func lbl_TerritoryCountry_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TerritoryCountry_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TerritoryCountry_Name"
        }

        return NSLocalizedString("lbl_TerritoryCountry_Name", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es
      static func lbl_Step3_Email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step3_Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step3_Email"
        }

        return NSLocalizedString("lbl_Step3_Email", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es
      static func txt_new_billing_email_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_new_billing_email_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_new_billing_email_placeholder"
        }

        return NSLocalizedString("txt_new_billing_email_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es, English
      static func lbl_ValidateEmail_Email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateEmail_Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateEmail_Email"
        }

        return NSLocalizedString("lbl_ValidateEmail_Email", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es, English
      static func txt_CoverAlert_Mail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_CoverAlert_Mail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_CoverAlert_Mail"
        }

        return NSLocalizedString("txt_CoverAlert_Mail", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es, English
      static func txt_EditUserProfile_Email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_EditUserProfile_Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_EditUserProfile_Email"
        }

        return NSLocalizedString("txt_EditUserProfile_Email", bundle: bundle, comment: "")
      }

      /// en translation: Emergency call
      ///
      /// Locales: en, es, English
      static func callTitleOnWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CallTitleOnWay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CallTitleOnWay"
        }

        return NSLocalizedString("CallTitleOnWay", bundle: bundle, comment: "")
      }

      /// en translation: Empty results
      ///
      /// Locales: en, es, English
      static func lbl_Empty_Results(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Empty_Results", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Empty_Results"
        }

        return NSLocalizedString("lbl_Empty_Results", bundle: bundle, comment: "")
      }

      /// en translation: End
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionDateEnd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionDateEnd", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionDateEnd"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionDateEnd", bundle: bundle, comment: "")
      }

      /// en translation: End of trip!
      ///
      /// Locales: en, es, English
      static func lbl_HeaderFinalizeRide_EndTrip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_HeaderFinalizeRide_EndTrip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_HeaderFinalizeRide_EndTrip"
        }

        return NSLocalizedString("lbl_HeaderFinalizeRide_EndTrip", bundle: bundle, comment: "")
      }

      /// en translation: End trip
      ///
      /// Locales: en, es
      static func lbl_ConfirmCancelRide_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmCancelRide_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmCancelRide_Title"
        }

        return NSLocalizedString("lbl_ConfirmCancelRide_Title", bundle: bundle, comment: "")
      }

      /// en translation: Enter a 4-digit PIN
      ///
      /// Locales: en, es
      static func hp_temporal_code_enter_security_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_temporal_code_enter_security_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_temporal_code_enter_security_pin"
        }

        return NSLocalizedString("hp_temporal_code_enter_security_pin", bundle: bundle, comment: "")
      }

      /// en translation: Enter a valid number to recharge
      ///
      /// Locales: en, es
      static func enter_Valid_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter_Valid_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter_Valid_Number"
        }

        return NSLocalizedString("Enter_Valid_Number", bundle: bundle, comment: "")
      }

      /// en translation: Enter address
      ///
      /// Locales: en, es
      static func receipt_configuration_address_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_address_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_address_placeholder"
        }

        return NSLocalizedString("receipt_configuration_address_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Enter data
      ///
      /// Locales: en, es
      static func receipt_configuration_create_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_create_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_create_subtitle"
        }

        return NSLocalizedString("receipt_configuration_create_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Enter password
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Password"
        }

        return NSLocalizedString("lbl_CreatePassword_Password", bundle: bundle, comment: "")
      }

      /// en translation: Enter password again
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Again_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Again_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Again_Password"
        }

        return NSLocalizedString("lbl_CreatePassword_Again_Password", bundle: bundle, comment: "")
      }

      /// en translation: Enter telephone number.
      ///
      /// Locales: en, es, English
      static func txt_RequestPhone_EnterPhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_RequestPhone_EnterPhone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_RequestPhone_EnterPhone"
        }

        return NSLocalizedString("txt_RequestPhone_EnterPhone", bundle: bundle, comment: "")
      }

      /// en translation: Enter the CVC code
      ///
      /// Locales: en, es
      static func cvcTitleAutorization_Enter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CVCTitleAutorization_Enter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CVCTitleAutorization_Enter"
        }

        return NSLocalizedString("CVCTitleAutorization_Enter", bundle: bundle, comment: "")
      }

      /// en translation: Enter the amount
      ///
      /// Locales: en, es
      static func lbl_enter_amount_ProcessOrder_modal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_enter_amount_ProcessOrder_modal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_enter_amount_ProcessOrder_modal"
        }

        return NSLocalizedString("lbl_enter_amount_ProcessOrder_modal", bundle: bundle, comment: "")
      }

      /// en translation: Enter the code sent to
      ///
      /// Locales: en, es
      static func lbl_Step2_Send_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Send_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Send_Code"
        }

        return NSLocalizedString("lbl_Step2_Send_Code", bundle: bundle, comment: "")
      }

      /// en translation: Enter the number to recharge.
      ///
      /// Locales: en, es, English
      static func lbl_TopUpAdd_Enter_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TopUpAdd_Enter_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TopUpAdd_Enter_Number"
        }

        return NSLocalizedString("lbl_TopUpAdd_Enter_Number", bundle: bundle, comment: "")
      }

      /// en translation: Enter the recovery code sent to
      ///
      /// Locales: en, es
      static func lbl_Step2_Recover_Code_Send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Recover_Code_Send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Recover_Code_Send"
        }

        return NSLocalizedString("lbl_Step2_Recover_Code_Send", bundle: bundle, comment: "")
      }

      /// en translation: Enter the type of identification
      ///
      /// Locales: en, es, English
      static func lbl_Identification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Identification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Identification"
        }

        return NSLocalizedString("lbl_Identification", bundle: bundle, comment: "")
      }

      /// en translation: Enter the welcome code to order your first vehicle
      ///
      /// Locales: en, es, English
      static func lbl_welcome_code_for_veichle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_welcome_code_for_veichle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_welcome_code_for_veichle"
        }

        return NSLocalizedString("lbl_welcome_code_for_veichle", bundle: bundle, comment: "")
      }

      /// en translation: Enter the welcoming code to ask for your first vehicle.
      ///
      /// Locales: en, es, English
      static func lbl_InvitationCode_Code_First_Vehicle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_InvitationCode_Code_First_Vehicle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_InvitationCode_Code_First_Vehicle"
        }

        return NSLocalizedString("lbl_InvitationCode_Code_First_Vehicle", bundle: bundle, comment: "")
      }

      /// en translation: Enter your
      ///
      /// Locales: en, es, English
      static func txt_new_billing_Enter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_new_billing_Enter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_new_billing_Enter"
        }

        return NSLocalizedString("txt_new_billing_Enter", bundle: bundle, comment: "")
      }

      /// en translation: Enter your PIN again
      ///
      /// Locales: en, es
      static func hp_temporal_code_set_new_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_temporal_code_set_new_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_temporal_code_set_new_pin"
        }

        return NSLocalizedString("hp_temporal_code_set_new_pin", bundle: bundle, comment: "")
      }

      /// en translation: Enter your Passcode
      ///
      /// Locales: en, es
      static func hp_lbl_account_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_account_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_account_login"
        }

        return NSLocalizedString("hp_lbl_account_login", bundle: bundle, comment: "")
      }

      /// en translation: Enter your billing information
      ///
      /// Locales: en, es
      static func lbl_billing_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_billing_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_billing_title"
        }

        return NSLocalizedString("lbl_billing_title", bundle: bundle, comment: "")
      }

      /// en translation: Enter your number
      ///
      /// Locales: en, es
      static func lbl_NewLogin_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_NewLogin_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_NewLogin_Number"
        }

        return NSLocalizedString("lbl_NewLogin_Number", bundle: bundle, comment: "")
      }

      /// en translation: Enter your number
      ///
      /// Locales: en, es
      static func lbl_Step1_Enter_number_Small(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Enter_number_Small", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Enter_number_Small"
        }

        return NSLocalizedString("lbl_Step1_Enter_number_Small", bundle: bundle, comment: "")
      }

      /// en translation: Enter your password
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_A_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_A_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_A_Password"
        }

        return NSLocalizedString("lbl_CreatePassword_A_Password", bundle: bundle, comment: "")
      }

      /// en translation: Enter your password
      ///
      /// Locales: en, es
      static func lbl_LoginPassword_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LoginPassword_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LoginPassword_Password"
        }

        return NSLocalizedString("lbl_LoginPassword_Password", bundle: bundle, comment: "")
      }

      /// en translation: Enter your phone number
      ///
      /// Locales: en, es
      static func enter_Phone_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_Phone_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_Phone_Number"
        }

        return NSLocalizedString("enter_Phone_Number", bundle: bundle, comment: "")
      }

      /// en translation: Enter your phone number
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhone_Enter_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhone_Enter_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhone_Enter_Number"
        }

        return NSLocalizedString("lbl_StartedPhone_Enter_Number", bundle: bundle, comment: "")
      }

      /// en translation: Enter your phone number, asassociated to the account
      ///
      /// Locales: en, es
      static func lbl_NewLogin_Assocaite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_NewLogin_Assocaite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_NewLogin_Assocaite"
        }

        return NSLocalizedString("lbl_NewLogin_Assocaite", bundle: bundle, comment: "")
      }

      /// en translation: Enter your phone number, associated with the account
      ///
      /// Locales: en, es
      static func lbl_NewLogin_EnterPhone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_NewLogin_EnterPhone_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_NewLogin_EnterPhone_number"
        }

        return NSLocalizedString("lbl_NewLogin_EnterPhone_number", bundle: bundle, comment: "")
      }

      /// en translation: Enter your promo code
      ///
      /// Locales: en, es, English
      static func lbl_Enter_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Enter_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Enter_Code"
        }

        return NSLocalizedString("lbl_Enter_Code", bundle: bundle, comment: "")
      }

      /// en translation: Enter your promo code.
      ///
      /// Locales: en, es, English
      static func lbl_PromotionalCode_Enter_Promo_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PromotionalCode_Enter_Promo_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PromotionalCode_Enter_Promo_Code"
        }

        return NSLocalizedString("lbl_PromotionalCode_Enter_Promo_Code", bundle: bundle, comment: "")
      }

      /// en translation: Enter your temporary code
      ///
      /// Locales: en, es
      static func hp_temporal_code_enter_temporal_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_temporal_code_enter_temporal_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_temporal_code_enter_temporal_code"
        }

        return NSLocalizedString("hp_temporal_code_enter_temporal_code", bundle: bundle, comment: "")
      }

      /// en translation: Enter your tokeN
      ///
      /// Locales: en, es, English
      static func lbl_Enter_Tokan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Enter_Tokan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Enter_Tokan"
        }

        return NSLocalizedString("lbl_Enter_Tokan", bundle: bundle, comment: "")
      }

      /// en translation: Entrepreneurial activities
      ///
      /// Locales: en, es, English
      static func lbl_OptionsInfoWithImage_Activites(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OptionsInfoWithImage_Activites", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OptionsInfoWithImage_Activites"
        }

        return NSLocalizedString("lbl_OptionsInfoWithImage_Activites", bundle: bundle, comment: "")
      }

      /// en translation: Entrepreneurial activities
      ///
      /// Locales: en, es, English
      static func lbl_OptionsInfo_Activites(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OptionsInfo_Activites", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OptionsInfo_Activites"
        }

        return NSLocalizedString("lbl_OptionsInfo_Activites", bundle: bundle, comment: "")
      }

      /// en translation: Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities
      ///
      /// Locales: en, es, English
      static func lbl_PartnerProduct_Activities(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerProduct_Activities", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerProduct_Activities"
        }

        return NSLocalizedString("lbl_PartnerProduct_Activities", bundle: bundle, comment: "")
      }

      /// en translation: Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities Entrepreneurial activities
      ///
      /// Locales: en, es, English
      static func lbl_ProductNormal_Activities(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductNormal_Activities", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductNormal_Activities"
        }

        return NSLocalizedString("lbl_ProductNormal_Activities", bundle: bundle, comment: "")
      }

      /// en translation: Errands
      ///
      /// Locales: en, es, English
      static func btn_WriteDescription_Mandadito(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_WriteDescription_Mandadito", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_WriteDescription_Mandadito"
        }

        return NSLocalizedString("btn_WriteDescription_Mandadito", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, es, English
      static func wrongSetRangeAddressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongSetRangeAddressTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongSetRangeAddressTitle"
        }

        return NSLocalizedString("WrongSetRangeAddressTitle", bundle: bundle, comment: "")
      }

      /// en translation: Error code
      ///
      /// Locales: en, es
      static func error_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error_Code"
        }

        return NSLocalizedString("Error_Code", bundle: bundle, comment: "")
      }

      /// en translation: Estate of order: HO-9999999999
      ///
      /// Locales: en, es, English
      static func lbl_Tracking_Order_Status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Tracking_Order_Status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Tracking_Order_Status"
        }

        return NSLocalizedString("lbl_Tracking_Order_Status", bundle: bundle, comment: "")
      }

      /// en translation: Example: Juan Carlos Aldana
      ///
      /// Locales: en, es
      static func example_Card_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Example_Card_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Example_Card_Name"
        }

        return NSLocalizedString("Example_Card_Name", bundle: bundle, comment: "")
      }

      /// en translation: Example: My orange credit card.
      ///
      /// Locales: en, es
      static func example_Card_Identier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Example_Card_Identier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Example_Card_Identier"
        }

        return NSLocalizedString("Example_Card_Identier", bundle: bundle, comment: "")
      }

      /// en translation: Excellent!
      ///
      /// Locales: en, es, English
      static func feedbackExcelentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FeedbackExcelentTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FeedbackExcelentTitle"
        }

        return NSLocalizedString("FeedbackExcelentTitle", bundle: bundle, comment: "")
      }

      /// en translation: Exp.
      ///
      /// Locales: en, es
      static func card_Exp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card_Exp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card_Exp"
        }

        return NSLocalizedString("Card_Exp", bundle: bundle, comment: "")
      }

      /// en translation: Expense Control
      ///
      /// Locales: en, es
      static func hp_lbl_expense_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_expense_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_expense_title"
        }

        return NSLocalizedString("hp_lbl_expense_title", bundle: bundle, comment: "")
      }

      /// en translation: Expenses
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionTypeExpense(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionTypeExpense", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionTypeExpense"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionTypeExpense", bundle: bundle, comment: "")
      }

      /// en translation: Expiration
      ///
      /// Locales: en, es
      static func txt_Exp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_Exp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_Exp"
        }

        return NSLocalizedString("txt_Exp", bundle: bundle, comment: "")
      }

      /// en translation: Expiration date
      ///
      /// Locales: en, es, English
      static func expCardInfoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ExpCardInfoTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ExpCardInfoTitle"
        }

        return NSLocalizedString("ExpCardInfoTitle", bundle: bundle, comment: "")
      }

      /// en translation: Expiration date
      ///
      /// Locales: en, es, English
      static func lbl_CardInfo_Expiration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CardInfo_Expiration", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CardInfo_Expiration"
        }

        return NSLocalizedString("lbl_CardInfo_Expiration", bundle: bundle, comment: "")
      }

      /// en translation: Expiration date
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmAlert_ExpireDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmAlert_ExpireDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmAlert_ExpireDate"
        }

        return NSLocalizedString("lbl_ConfirmAlert_ExpireDate", bundle: bundle, comment: "")
      }

      /// en translation: Expiration date
      ///
      /// Locales: en, es, English
      static func txt_creditcard_exirydate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_creditcard_exirydate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_creditcard_exirydate"
        }

        return NSLocalizedString("txt_creditcard_exirydate", bundle: bundle, comment: "")
      }

      /// en translation: Expiration month required
      ///
      /// Locales: en, es, English
      static func monthRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MonthRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MonthRequired"
        }

        return NSLocalizedString("MonthRequired", bundle: bundle, comment: "")
      }

      /// en translation: Explore as a guest
      ///
      /// Locales: en, es
      static func lbl_Welcome_Explora(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Welcome_Explora", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Welcome_Explora"
        }

        return NSLocalizedString("lbl_Welcome_Explora", bundle: bundle, comment: "")
      }

      /// en translation: FACEBOOK
      ///
      /// Locales: en, es, English
      static func btn_StartedPhone_Facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_StartedPhone_Facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_StartedPhone_Facebook"
        }

        return NSLocalizedString("btn_StartedPhone_Facebook", bundle: bundle, comment: "")
      }

      /// en translation: FILTER
      ///
      /// Locales: en, es, English
      static func sort_By(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sort_By", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sort_By"
        }

        return NSLocalizedString("Sort_By", bundle: bundle, comment: "")
      }

      /// en translation: FIND OUT WHERE TO REDEEM YOUR CASHBACK REWARDS
      ///
      /// Locales: en, es
      static func hp_cashback_commerce_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_cashback_commerce_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_cashback_commerce_info"
        }

        return NSLocalizedString("hp_cashback_commerce_info", bundle: bundle, comment: "")
      }

      /// en translation: FINISH
      ///
      /// Locales: en, es, English
      static func btn_TipCell_Finalizer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_TipCell_Finalizer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_TipCell_Finalizer"
        }

        return NSLocalizedString("btn_TipCell_Finalizer", bundle: bundle, comment: "")
      }

      /// en translation: FINISH TRIP
      ///
      /// Locales: en, es, English
      static func lbl_End_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_End_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_End_Trip"
        }

        return NSLocalizedString("lbl_End_Trip", bundle: bundle, comment: "")
      }

      /// en translation: FREE
      ///
      /// Locales: en, es, English
      static func free(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Free", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Free"
        }

        return NSLocalizedString("Free", bundle: bundle, comment: "")
      }

      /// en translation: FREE delivery
      ///
      /// Locales: en, es, English
      static func lbl_Promos_Free_Shipping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Promos_Free_Shipping", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Promos_Free_Shipping"
        }

        return NSLocalizedString("lbl_Promos_Free_Shipping", bundle: bundle, comment: "")
      }

      /// en translation: FREE_DELIVER_INSTALL
      ///
      /// Locales: en, es, English
      static func freeCouponCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FreeCouponCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FreeCouponCode"
        }

        return NSLocalizedString("FreeCouponCode", bundle: bundle, comment: "")
      }

      /// en translation: Failed to process
      ///
      /// Locales: en, es
      static func failed_Process(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Failed_Process", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Failed_Process"
        }

        return NSLocalizedString("Failed_Process", bundle: bundle, comment: "")
      }

      /// en translation: Far away
      ///
      /// Locales: en, es
      static func lbl_AlertTransport_FarAway(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AlertTransport_FarAway", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AlertTransport_FarAway"
        }

        return NSLocalizedString("lbl_AlertTransport_FarAway", bundle: bundle, comment: "")
      }

      /// en translation: Favorite
      ///
      /// Locales: en, es
      static func partner_header_favorite_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("partner_header_favorite_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "partner_header_favorite_title"
        }

        return NSLocalizedString("partner_header_favorite_title", bundle: bundle, comment: "")
      }

      /// en translation: Favorites
      ///
      /// Locales: en, es
      static func lbl_Main_favorites_section_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_favorites_section_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_favorites_section_title"
        }

        return NSLocalizedString("lbl_Main_favorites_section_title", bundle: bundle, comment: "")
      }

      /// en translation: Female
      ///
      /// Locales: en, es, English
      static func lbl_BasicInfo_female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_BasicInfo_female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_BasicInfo_female"
        }

        return NSLocalizedString("lbl_BasicInfo_female", bundle: bundle, comment: "")
      }

      /// en translation: Fernando
      ///
      /// Locales: en, es, English
      static func lbl_OnTheWayRide2_Fernado(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OnTheWayRide2_Fernado", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OnTheWayRide2_Fernado"
        }

        return NSLocalizedString("lbl_OnTheWayRide2_Fernado", bundle: bundle, comment: "")
      }

      /// en translation: Fernando
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide2_Fernando(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide2_Fernando", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide2_Fernando"
        }

        return NSLocalizedString("lbl_PickingRide2_Fernando", bundle: bundle, comment: "")
      }

      /// en translation: Filter
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_FilterTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_FilterTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_FilterTitle"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_FilterTitle", bundle: bundle, comment: "")
      }

      /// en translation: Filter
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_title"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_title", bundle: bundle, comment: "")
      }

      /// en translation: Finance
      ///
      /// Locales: en, es, English
      static func lbl_PayServiceCollection_Financial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PayServiceCollection_Financial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PayServiceCollection_Financial"
        }

        return NSLocalizedString("lbl_PayServiceCollection_Financial", bundle: bundle, comment: "")
      }

      /// en translation: Financial Tracker
      ///
      /// Locales: en, es
      static func hp_expense_control_nav_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_expense_control_nav_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_expense_control_nav_title"
        }

        return NSLocalizedString("hp_expense_control_nav_title", bundle: bundle, comment: "")
      }

      /// en translation: Find me in the map
      ///
      /// Locales: en, es, English
      static func lbl_Locate_Map(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Locate_Map", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Locate_Map"
        }

        return NSLocalizedString("lbl_Locate_Map", bundle: bundle, comment: "")
      }

      /// en translation: Find stop
      ///
      /// Locales: en, es
      static func find_Stop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find_Stop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find_Stop"
        }

        return NSLocalizedString("Find_Stop", bundle: bundle, comment: "")
      }

      /// en translation: Finished delivery!
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeRide_Shipping_Completed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_Shipping_Completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_Shipping_Completed"
        }

        return NSLocalizedString("lbl_FinalizeRide_Shipping_Completed", bundle: bundle, comment: "")
      }

      /// en translation: Firebase
      ///
      /// Locales: en, es, English
      static func notificationService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notificationService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notificationService"
        }

        return NSLocalizedString("notificationService", bundle: bundle, comment: "")
      }

      /// en translation: Fish ceviche in pink sauce
      ///
      /// Locales: en, es, English
      static func lbl_OptionsInfoWithImage_Pink_Sauce(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OptionsInfoWithImage_Pink_Sauce", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OptionsInfoWithImage_Pink_Sauce"
        }

        return NSLocalizedString("lbl_OptionsInfoWithImage_Pink_Sauce", bundle: bundle, comment: "")
      }

      /// en translation: Fish ceviche in pink sauce
      ///
      /// Locales: en, es, English
      static func lbl_OptionsInfo_Pink_Sauce(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OptionsInfo_Pink_Sauce", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OptionsInfo_Pink_Sauce"
        }

        return NSLocalizedString("lbl_OptionsInfo_Pink_Sauce", bundle: bundle, comment: "")
      }

      /// en translation: Food
      ///
      /// Locales: en, es, English
      static func lbl_ServiceSelection_Food(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ServiceSelection_Food", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ServiceSelection_Food"
        }

        return NSLocalizedString("lbl_ServiceSelection_Food", bundle: bundle, comment: "")
      }

      /// en translation: Food
      ///
      /// Locales: en, es, English
      static func lbl_Service_Food(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Service_Food", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Service_Food"
        }

        return NSLocalizedString("lbl_Service_Food", bundle: bundle, comment: "")
      }

      /// en translation: Food, drinks, groceries,   errands, transportation,   bill payments and much more.
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Cell_Food(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Cell_Food", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Cell_Food"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Cell_Food", bundle: bundle, comment: "")
      }

      /// en translation: For added security, your password should contain:
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Added_Security(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Added_Security", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Added_Security"
        }

        return NSLocalizedString("lbl_CreatePassword_Added_Security", bundle: bundle, comment: "")
      }

      /// en translation: For more information visit the prize section
      ///
      /// Locales: en, es
      static func lbl_ProcessOrder_MoreInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProcessOrder_MoreInfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProcessOrder_MoreInfo"
        }

        return NSLocalizedString("lbl_ProcessOrder_MoreInfo", bundle: bundle, comment: "")
      }

      /// en translation: For reasons beyond our control, sometimes it is possible not to receive a code, let me help you, request a call and I will create an account for you in seconds
      ///
      /// Locales: en, es, English
      static func getHelpMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GetHelpMsg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GetHelpMsg"
        }

        return NSLocalizedString("GetHelpMsg", bundle: bundle, comment: "")
      }

      /// en translation: For% @ you do not yet have an address saved. To complete your shipment, please select an address or add a new address
      ///
      /// Locales: en, es
      static func please_Select_New_Address(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Please_Select_New_Address", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please_Select_New_Address"
        }

        let format = NSLocalizedString("Please_Select_New_Address", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Forget your password?
      ///
      /// Locales: en, es
      static func lbl_LoginPassword_Forgot_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LoginPassword_Forgot_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LoginPassword_Forgot_Password"
        }

        return NSLocalizedString("lbl_LoginPassword_Forgot_Password", bundle: bundle, comment: "")
      }

      /// en translation: Free cancellation
      ///
      /// Locales: en, es
      static func cancel_without_Cost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel_without_Cost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel_without_Cost"
        }

        return NSLocalizedString("Cancel_without_Cost", bundle: bundle, comment: "")
      }

      /// en translation: Frequent questions
      ///
      /// Locales: en, es, English
      static func frequent_questions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Frequent_questions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Frequent_questions"
        }

        return NSLocalizedString("Frequent_questions", bundle: bundle, comment: "")
      }

      /// en translation: From
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_from(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_from", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_from"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_from", bundle: bundle, comment: "")
      }

      /// en translation: Full Name
      ///
      /// Locales: en, es, English
      static func lbl_EmailInfo_username_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EmailInfo_username_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EmailInfo_username_title"
        }

        return NSLocalizedString("lbl_EmailInfo_username_title", bundle: bundle, comment: "")
      }

      /// en translation: Full name
      ///
      /// Locales: en, es
      static func receipt_configutarion_name_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configutarion_name_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configutarion_name_title"
        }

        return NSLocalizedString("receipt_configutarion_name_title", bundle: bundle, comment: "")
      }

      /// en translation: GET CODE BY CALL
      ///
      /// Locales: en, es
      static func lbl_Step2_Get_Call_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Get_Call_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Get_Call_Code"
        }

        return NSLocalizedString("lbl_Step2_Get_Call_Code", bundle: bundle, comment: "")
      }

      /// en translation: GET THE CODE THROUGH PHONE CALL.
      ///
      /// Locales: en, es, English
      static func btn_ValidatePhone_Get_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidatePhone_Get_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidatePhone_Get_Code"
        }

        return NSLocalizedString("btn_ValidatePhone_Get_Code", bundle: bundle, comment: "")
      }

      /// en translation: GET THE CODE THROUGH PHONE CALL.
      ///
      /// Locales: en, es, English
      static func btn_ValidateRecoverCode_Get_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidateRecoverCode_Get_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidateRecoverCode_Get_Code"
        }

        return NSLocalizedString("btn_ValidateRecoverCode_Get_Code", bundle: bundle, comment: "")
      }

      /// en translation: GHFYT-UODHFYG-154BGS
      ///
      /// Locales: en, es, English
      static func lbl_DateRangePicker_Id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DateRangePicker_Id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DateRangePicker_Id"
        }

        return NSLocalizedString("lbl_DateRangePicker_Id", bundle: bundle, comment: "")
      }

      /// en translation: Gender
      ///
      /// Locales: en, es, English
      static func lbl_BasicInfo_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_BasicInfo_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_BasicInfo_title"
        }

        return NSLocalizedString("lbl_BasicInfo_title", bundle: bundle, comment: "")
      }

      /// en translation: Get started with hugoPay!
      ///
      /// Locales: en, es
      static func hp_full_TransactionHPFullViewController_EmptySubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionHPFullViewController_EmptySubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionHPFullViewController_EmptySubtitle"
        }

        return NSLocalizedString("hp_full_TransactionHPFullViewController_EmptySubtitle", bundle: bundle, comment: "")
      }

      /// en translation: Giovanni
      ///
      /// Locales: en, English
      static func lbl_RideSummaryA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideSummaryA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideSummaryA"
        }

        return NSLocalizedString("lbl_RideSummaryA", bundle: bundle, comment: "")
      }

      /// en translation: Go to settings
      ///
      /// Locales: en, es, English
      static func goToSettingsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GoToSettingsMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GoToSettingsMessage"
        }

        return NSLocalizedString("GoToSettingsMessage", bundle: bundle, comment: "")
      }

      /// en translation: Great!
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeGoodRating_Great(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeGoodRating_Great", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeGoodRating_Great"
        }

        return NSLocalizedString("lbl_FinalizeGoodRating_Great", bundle: bundle, comment: "")
      }

      /// en translation: Guillermo
      ///
      /// Locales: en, es, English
      static func lbl_OnTheWayRide_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OnTheWayRide_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OnTheWayRide_Name"
        }

        return NSLocalizedString("lbl_OnTheWayRide_Name", bundle: bundle, comment: "")
      }

      /// en translation: Guillermo
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide_Name"
        }

        return NSLocalizedString("lbl_PickingRide_Name", bundle: bundle, comment: "")
      }

      /// en translation: HISTORY
      ///
      /// Locales: en, es, English
      static func btn_order_history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_order_history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_order_history"
        }

        return NSLocalizedString("btn_order_history", bundle: bundle, comment: "")
      }

      /// en translation: HO-12345462
      ///
      /// Locales: en, es, English
      static func lbl_TokanRowTable_Ho(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TokanRowTable_Ho", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TokanRowTable_Ho"
        }

        return NSLocalizedString("lbl_TokanRowTable_Ho", bundle: bundle, comment: "")
      }

      /// en translation: HUGO PAYMENT CODE
      ///
      /// Locales: en, es
      static func hugo_Payment_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hugo_Payment_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hugo_Payment_Code"
        }

        return NSLocalizedString("Hugo_Payment_Code", bundle: bundle, comment: "")
      }

      /// en translation: Have a good trip
      ///
      /// Locales: en, es
      static func good_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Good_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Good_Trip"
        }

        return NSLocalizedString("Good_Trip", bundle: bundle, comment: "")
      }

      /// en translation: Haven't you received your code? Request Help
      ///
      /// Locales: en, es
      static func lbl_Step2_Have_Not_recive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Have_Not_recive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Have_Not_recive"
        }

        return NSLocalizedString("lbl_Step2_Have_Not_recive", bundle: bundle, comment: "")
      }

      /// en translation: Hello!
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Hello(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Hello", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Hello"
        }

        return NSLocalizedString("lbl_CreatePassword_Hello", bundle: bundle, comment: "")
      }

      /// en translation: Hello! I'm Hugo,   the SuperApp!
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Cell_Hello(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Cell_Hello", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Cell_Hello"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Cell_Hello", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: en, es, English
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help"
        }

        return NSLocalizedString("Help", bundle: bundle, comment: "")
      }

      /// en translation: Help with my order
      ///
      /// Locales: en, es, English
      static func btn_help_with_my_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_help_with_my_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_help_with_my_order"
        }

        return NSLocalizedString("btn_help_with_my_order", bundle: bundle, comment: "")
      }

      /// en translation: Here we will notify you of all the movements of your account!
      ///
      /// Locales: en, es
      static func hp_get_started_with_hugopay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_get_started_with_hugopay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_get_started_with_hugopay"
        }

        return NSLocalizedString("hp_get_started_with_hugopay", bundle: bundle, comment: "")
      }

      /// en translation: Here you could ask for help about any kind of problems in app. Create your account to use this service.
      ///
      /// Locales: en, es
      static func alert_chat_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_chat_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_chat_message"
        }

        return NSLocalizedString("alert_chat_message", bundle: bundle, comment: "")
      }

      /// en translation: Hi
      ///
      /// Locales: en, es, English
      static func lbl_AddPhone_UserName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddPhone_UserName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddPhone_UserName"
        }

        return NSLocalizedString("lbl_AddPhone_UserName", bundle: bundle, comment: "")
      }

      /// en translation: Hi!
      ///
      /// Locales: en, es, English
      static func lbl_Hello(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Hello", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Hello"
        }

        return NSLocalizedString("lbl_Hello", bundle: bundle, comment: "")
      }

      /// en translation: Hola Ricardo!
      ///
      /// Locales: en, es, English
      static func lbl_InfoUser_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_InfoUser_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_InfoUser_Name"
        }

        return NSLocalizedString("lbl_InfoUser_Name", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, English
      static func lbl_RideMap_Home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideMap_Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideMap_Home"
        }

        return NSLocalizedString("lbl_RideMap_Home", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es, English
      static func lbl_PersonalAddress_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PersonalAddress_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PersonalAddress_Title"
        }

        return NSLocalizedString("lbl_PersonalAddress_Title", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide2_Home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide2_Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide2_Home"
        }

        return NSLocalizedString("lbl_PickingRide2_Home", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es, English
      static func lbl_RideSummaryArriving(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideSummaryArriving", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideSummaryArriving"
        }

        return NSLocalizedString("lbl_RideSummaryArriving", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es, English
      static func lbl_RouteItem_Home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RouteItem_Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RouteItem_Home"
        }

        return NSLocalizedString("lbl_RouteItem_Home", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es, English
      static func lbl_SearchAddress_Home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchAddress_Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchAddress_Home"
        }

        return NSLocalizedString("lbl_SearchAddress_Home", bundle: bundle, comment: "")
      }

      /// en translation: Home, La Libertad, El Salvador
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentLocation_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentLocation_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentLocation_Address"
        }

        return NSLocalizedString("lbl_ShipmentLocation_Address", bundle: bundle, comment: "")
      }

      /// en translation: Home. Residencial los Olivos, #6, Santa Tecla. La Libertad, El Salvador, Centro America
      ///
      /// Locales: en, es, English
      static func lbl_RouteOutstanding_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RouteOutstanding_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RouteOutstanding_Address"
        }

        return NSLocalizedString("lbl_RouteOutstanding_Address", bundle: bundle, comment: "")
      }

      /// en translation: House
      ///
      /// Locales: en, es
      static func lbl_AddressBook_Home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Home"
        }

        return NSLocalizedString("lbl_AddressBook_Home", bundle: bundle, comment: "")
      }

      /// en translation: House or apartment number
      ///
      /// Locales: en, es
      static func lbl_AddressBook_House_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_House_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_House_Number"
        }

        return NSLocalizedString("lbl_AddressBook_House_Number", bundle: bundle, comment: "")
      }

      /// en translation: How can we improve?
      ///
      /// Locales: en, es, English
      static func feedbackHowToImproveTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FeedbackHowToImproveTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FeedbackHowToImproveTitle"
        }

        return NSLocalizedString("FeedbackHowToImproveTitle", bundle: bundle, comment: "")
      }

      /// en translation: How does it work?
      ///
      /// Locales: en, es
      static func shopping_Work(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Shopping_Work", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Shopping_Work"
        }

        return NSLocalizedString("Shopping_Work", bundle: bundle, comment: "")
      }

      /// en translation: How is our delivery service?
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeRide_About_Service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_About_Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_About_Service"
        }

        return NSLocalizedString("lbl_FinalizeRide_About_Service", bundle: bundle, comment: "")
      }

      /// en translation: How to get?
      ///
      /// Locales: en, es
      static func btn_how_to_get(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_how_to_get", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_how_to_get"
        }

        return NSLocalizedString("btn_how_to_get", bundle: bundle, comment: "")
      }

      /// en translation: How was your experience?
      ///
      /// Locales: en, es, English
      static func lbl_RatingView_Experience(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingView_Experience", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingView_Experience"
        }

        return NSLocalizedString("lbl_RatingView_Experience", bundle: bundle, comment: "")
      }

      /// en translation: How was your trip?
      ///
      /// Locales: en, es, English
      static func lbl_RatingCell_Your_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingCell_Your_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingCell_Your_Trip"
        }

        return NSLocalizedString("lbl_RatingCell_Your_Trip", bundle: bundle, comment: "")
      }

      /// en translation: Hugo
      ///
      /// Locales: en, es, English
      static func lbl_SearchAddressShipment_Hugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchAddressShipment_Hugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchAddressShipment_Hugo"
        }

        return NSLocalizedString("lbl_SearchAddressShipment_Hugo", bundle: bundle, comment: "")
      }

      /// en translation: Hugo
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhoneAlternative_Hading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhoneAlternative_Hading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhoneAlternative_Hading"
        }

        return NSLocalizedString("lbl_StartedPhoneAlternative_Hading", bundle: bundle, comment: "")
      }

      /// en translation: Hugo ID:
      ///
      /// Locales: en, es, English
      static func lbl_Hugo_ID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Hugo_ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Hugo_ID"
        }

        return NSLocalizedString("lbl_Hugo_ID", bundle: bundle, comment: "")
      }

      /// en translation: Hugo ID: M3324455
      ///
      /// Locales: en, es, English
      static func lbl_driver_plate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_driver_plate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_driver_plate"
        }

        return NSLocalizedString("lbl_driver_plate", bundle: bundle, comment: "")
      }

      /// en translation: Hugo help, I
      ///
      /// Locales: en, es, English
      static func lbl_HelpZendesk_Helps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_HelpZendesk_Helps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_HelpZendesk_Helps"
        }

        return NSLocalizedString("lbl_HelpZendesk_Helps", bundle: bundle, comment: "")
      }

      /// en translation: Hugo is collecting your order, there isn't tracking information still. You can tap the icon above to see the history of your order.
      ///
      /// Locales: en, es, English
      static func lbl_picking_activ_order_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_picking_activ_order_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_picking_activ_order_info"
        }

        return NSLocalizedString("lbl_picking_activ_order_info", bundle: bundle, comment: "")
      }

      /// en translation: Hugo is expanding as fast as possible. At the moment we do not cover this shipping area, but we are working to solve it
      ///
      /// Locales: en, es, English
      static func noCoverMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoCoverMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoCoverMessage"
        }

        return NSLocalizedString("NoCoverMessage", bundle: bundle, comment: "")
      }

      /// en translation: Hugo support
      ///
      /// Locales: en, es
      static func alert_chat_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_chat_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_chat_title"
        }

        return NSLocalizedString("alert_chat_title", bundle: bundle, comment: "")
      }

      /// en translation: Hugo uses the internet to work. Please check that you have access and that the app is not restricted in the use of data
      ///
      /// Locales: en, es, English
      static func noInternetAccessMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoInternetAccessMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoInternetAccessMessage"
        }

        return NSLocalizedString("NoInternetAccessMessage", bundle: bundle, comment: "")
      }

      /// en translation: I AGREE
      ///
      /// Locales: en, es
      static func lbl_AgeReuired_Driver_Request_Ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AgeReuired_Driver_Request_Ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AgeReuired_Driver_Request_Ok"
        }

        return NSLocalizedString("lbl_AgeReuired_Driver_Request_Ok", bundle: bundle, comment: "")
      }

      /// en translation: I FORGOT MY PASSWORD.
      ///
      /// Locales: en, es, English
      static func btn_LoginWithPassword_Forgot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_LoginWithPassword_Forgot", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_LoginWithPassword_Forgot"
        }

        return NSLocalizedString("btn_LoginWithPassword_Forgot", bundle: bundle, comment: "")
      }

      /// en translation: I NEED HELP.
      ///
      /// Locales: en, es, English
      static func btn_ValidatePhone_Need_Help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidatePhone_Need_Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidatePhone_Need_Help"
        }

        return NSLocalizedString("btn_ValidatePhone_Need_Help", bundle: bundle, comment: "")
      }

      /// en translation: I NEED HELP.
      ///
      /// Locales: en, es, English
      static func btn_ValidateRecoverCode_Help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidateRecoverCode_Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidateRecoverCode_Help"
        }

        return NSLocalizedString("btn_ValidateRecoverCode_Help", bundle: bundle, comment: "")
      }

      /// en translation: I WANT TO CHECK MY POINTS
      ///
      /// Locales: en, es, English
      static func consult_Point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Consult_Point", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Consult_Point"
        }

        return NSLocalizedString("Consult_Point", bundle: bundle, comment: "")
      }

      /// en translation: I WILL GIVE THE CASH IN:
      ///
      /// Locales: en, es, English
      static func lbl_Driver_Cash_In(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Driver_Cash_In", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Driver_Cash_In"
        }

        return NSLocalizedString("lbl_Driver_Cash_In", bundle: bundle, comment: "")
      }

      /// en translation: I accept the terms and conditions.
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhone_Condition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhone_Condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhone_Condition"
        }

        return NSLocalizedString("lbl_StartedPhone_Condition", bundle: bundle, comment: "")
      }

      /// en translation: I can receive a similar item if the one I select is sold out.
      ///
      /// Locales: en, es, English
      static func lbl_OrderSummary_Out_Of_Stock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Out_Of_Stock", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Out_Of_Stock"
        }

        return NSLocalizedString("lbl_OrderSummary_Out_Of_Stock", bundle: bundle, comment: "")
      }

      /// en translation: I do all for you!
      ///
      /// Locales: en, es
      static func lbl_WelcomeEverything_You(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WelcomeEverything_You", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WelcomeEverything_You"
        }

        return NSLocalizedString("lbl_WelcomeEverything_You", bundle: bundle, comment: "")
      }

      /// en translation: I don't need change
      ///
      /// Locales: en, es, English
      static func noChangeAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoChangeAction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoChangeAction"
        }

        return NSLocalizedString("NoChangeAction", bundle: bundle, comment: "")
      }

      /// en translation: I have read and accept the terms and conditions to use this service.
      ///
      /// Locales: en, es, English
      static func lbl_ThirdPartyImage_Accept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ThirdPartyImage_Accept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ThirdPartyImage_Accept"
        }

        return NSLocalizedString("lbl_ThirdPartyImage_Accept", bundle: bundle, comment: "")
      }

      /// en translation: I have read and accept the terms and conditions.
      ///
      /// Locales: en, es, English
      static func lbl_RegisterPhone_ReadCondtion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RegisterPhone_ReadCondtion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RegisterPhone_ReadCondtion"
        }

        return NSLocalizedString("lbl_RegisterPhone_ReadCondtion", bundle: bundle, comment: "")
      }

      /// en translation: I have read and accept the terms and conditions.
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhoneAlternative_Conditions_Msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhoneAlternative_Conditions_Msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhoneAlternative_Conditions_Msg"
        }

        return NSLocalizedString("lbl_StartedPhoneAlternative_Conditions_Msg", bundle: bundle, comment: "")
      }

      /// en translation: I have read and agree to the 
      ///
      /// Locales: en, es
      static func lbl_Step1_Term_Condition_Message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Term_Condition_Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Term_Condition_Message"
        }

        return NSLocalizedString("lbl_Step1_Term_Condition_Message", bundle: bundle, comment: "")
      }

      /// en translation: I need help
      ///
      /// Locales: en, es, English
      static func helpYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helpYes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helpYes"
        }

        return NSLocalizedString("helpYes", bundle: bundle, comment: "")
      }

      /// en translation: IMAGES - LIST OF PURCHASE
      ///
      /// Locales: en, es, English
      static func lbl_Image_Purchase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Image_Purchase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Image_Purchase"
        }

        return NSLocalizedString("lbl_Image_Purchase", bundle: bundle, comment: "")
      }

      /// en translation: IMPORTANT
      ///
      /// Locales: en, es
      static func importance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importance"
        }

        return NSLocalizedString("importance", bundle: bundle, comment: "")
      }

      /// en translation: INSERT
      ///
      /// Locales: en, es
      static func lbl_LoginPassword_Insert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LoginPassword_Insert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LoginPassword_Insert"
        }

        return NSLocalizedString("lbl_LoginPassword_Insert", bundle: bundle, comment: "")
      }

      /// en translation: INSERT
      ///
      /// Locales: en, es, English
      static func btn_LoginWithPassword_Change(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_LoginWithPassword_Change", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_LoginWithPassword_Change"
        }

        return NSLocalizedString("btn_LoginWithPassword_Change", bundle: bundle, comment: "")
      }

      /// en translation: INVOICE
      ///
      /// Locales: en, es
      static func receipt_navBar_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_navBar_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_navBar_title"
        }

        return NSLocalizedString("receipt_navBar_title", bundle: bundle, comment: "")
      }

      /// en translation: INVOICE DETAIL
      ///
      /// Locales: en, es, English
      static func lbl_Billing_Details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Billing_Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Billing_Details"
        }

        return NSLocalizedString("lbl_Billing_Details", bundle: bundle, comment: "")
      }

      /// en translation: IT IS UNDERSTOOD!
      ///
      /// Locales: en, es
      static func underStood(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UnderStood", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UnderStood"
        }

        return NSLocalizedString("UnderStood", bundle: bundle, comment: "")
      }

      /// en translation: Identifying name
      ///
      /// Locales: en, es
      static func card_Id_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card_Id_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card_Id_Name"
        }

        return NSLocalizedString("Card_Id_Name", bundle: bundle, comment: "")
      }

      /// en translation: If you discard your order, your entire purchase order will be deleted.  Do you want to continue?
      ///
      /// Locales: en, es
      static func lbl_Process_Order_Discard_Desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Process_Order_Discard_Desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Process_Order_Discard_Desc"
        }

        return NSLocalizedString("lbl_Process_Order_Discard_Desc", bundle: bundle, comment: "")
      }

      /// en translation: If you don't find some article in your list, we will remove this item and you'll receive its value in the balance of your profile.
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmSimilar_Similar_Purchase_Desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmSimilar_Similar_Purchase_Desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmSimilar_Similar_Purchase_Desc"
        }

        return NSLocalizedString("lbl_ConfirmSimilar_Similar_Purchase_Desc", bundle: bundle, comment: "")
      }

      /// en translation: If you need help or you have any doubt about your invoice payment, we will communicate directly with the organization we provide the service with
      ///
      /// Locales: en, es, English
      static func lbl_Help_Service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Help_Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Help_Service"
        }

        return NSLocalizedString("lbl_Help_Service", bundle: bundle, comment: "")
      }

      /// en translation: If you need help or you have any doubt about your recharge, we will communicate directly with the organization we provide the service with
      ///
      /// Locales: en, es, English
      static func lbl_Help_Recharge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Help_Recharge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Help_Recharge"
        }

        return NSLocalizedString("lbl_Help_Recharge", bundle: bundle, comment: "")
      }

      /// en translation: If you want to cancel your order, we need to know how you would like to receive your money back.
      ///
      /// Locales: en, es
      static func lbl_Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Subtitle"
        }

        return NSLocalizedString("lbl_Subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Important announcement
      ///
      /// Locales: en, es, English
      static func productAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ProductAlertTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ProductAlertTitle"
        }

        return NSLocalizedString("ProductAlertTitle", bundle: bundle, comment: "")
      }

      /// en translation: Important reminder
      ///
      /// Locales: en, es, English
      static func ccShowCSSTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCShowCSSTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCShowCSSTitle"
        }

        return NSLocalizedString("CCShowCSSTitle", bundle: bundle, comment: "")
      }

      /// en translation: Important reminder!
      ///
      /// Locales: en, es, English
      static func lbl_AgeReuired_Take_Account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AgeReuired_Take_Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AgeReuired_Take_Account"
        }

        return NSLocalizedString("lbl_AgeReuired_Take_Account", bundle: bundle, comment: "")
      }

      /// en translation: Impressa Repuestos
      ///
      /// Locales: en, es, English
      static func lbl_TokenHeaderTable_Impressa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TokenHeaderTable_Impressa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TokenHeaderTable_Impressa"
        }

        return NSLocalizedString("lbl_TokenHeaderTable_Impressa", bundle: bundle, comment: "")
      }

      /// en translation: In Hugo, we want to help you in the best way to you. The chat option is today available for you where we will help you in a personal way.
      ///
      /// Locales: en, es, English
      static func lbl_Boarding_personalized(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Boarding_personalized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Boarding_personalized"
        }

        return NSLocalizedString("lbl_Boarding_personalized", bundle: bundle, comment: "")
      }

      /// en translation: In Hugo, we're implementing new security measures, we'd like you to add a password that will protect your data in our platform.
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_Legend_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_Legend_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_Legend_Heading"
        }

        return NSLocalizedString("lbl_CreateFBPassword_Legend_Heading", bundle: bundle, comment: "")
      }

      /// en translation: In a moment you will receive a call with your code.
      ///
      /// Locales: en, es, English
      static func phoneCallSmsSucess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phoneCallSmsSucess", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phoneCallSmsSucess"
        }

        return NSLocalizedString("phoneCallSmsSucess", bundle: bundle, comment: "")
      }

      /// en translation: In the event you need refund, please check out our refund policy.
      ///
      /// Locales: en, es, English
      static func lbl_RefundDesclaimer_Remimber_refund(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RefundDesclaimer_Remimber_refund", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RefundDesclaimer_Remimber_refund"
        }

        return NSLocalizedString("lbl_RefundDesclaimer_Remimber_refund", bundle: bundle, comment: "")
      }

      /// en translation: In this screen you will be able to access the transport option, to be able to access and enjoy this option, create your account or log in.
      ///
      /// Locales: en, es
      static func transporte_option(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transporte_option", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transporte_option"
        }

        return NSLocalizedString("transporte_option", bundle: bundle, comment: "")
      }

      /// en translation: In your current location this service is not available
      ///
      /// Locales: en, es
      static func current_location_Service_Not(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("current_location_Service_Not", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "current_location_Service_Not"
        }

        return NSLocalizedString("current_location_Service_Not", bundle: bundle, comment: "")
      }

      /// en translation: In your current location this service is not available
      ///
      /// Locales: en, es
      static func not_Available_service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not_Available_service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not_Available_service"
        }

        return NSLocalizedString("Not_Available_service", bundle: bundle, comment: "")
      }

      /// en translation: Income
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionTypeIncome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionTypeIncome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionTypeIncome"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionTypeIncome", bundle: bundle, comment: "")
      }

      /// en translation: Incomplete Order
      ///
      /// Locales: en, es
      static func lblpartnerBadRatings6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerBadRatings6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerBadRatings6"
        }

        return NSLocalizedString("lblpartnerBadRatings6", bundle: bundle, comment: "")
      }

      /// en translation: Information
      ///
      /// Locales: en, es
      static func information_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Information_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Information_text"
        }

        return NSLocalizedString("Information_text", bundle: bundle, comment: "")
      }

      /// en translation: Inmediate delivery
      ///
      /// Locales: en, es
      static func lbl_Sort_Demand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Sort_Demand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Sort_Demand"
        }

        return NSLocalizedString("lbl_Sort_Demand", bundle: bundle, comment: "")
      }

      /// en translation: Input a 4 digit PIN
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_newpin_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_newpin_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_newpin_subtitle"
        }

        return NSLocalizedString("hp_full_reset_pin_newpin_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Input your PIN one more time
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_newpin_confirmation_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_newpin_confirmation_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_newpin_confirmation_title"
        }

        return NSLocalizedString("hp_full_reset_pin_newpin_confirmation_title", bundle: bundle, comment: "")
      }

      /// en translation: Insert Date
      ///
      /// Locales: en, es, English
      static func txt_BasicInfo_dob_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_BasicInfo_dob_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_BasicInfo_dob_placeholder"
        }

        return NSLocalizedString("txt_BasicInfo_dob_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Insert the code we have sent to your cellphone number.
      ///
      /// Locales: en, es, English
      static func lbl_ValidatePhone_Sent_Code_Msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidatePhone_Sent_Code_Msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidatePhone_Sent_Code_Msg"
        }

        return NSLocalizedString("lbl_ValidatePhone_Sent_Code_Msg", bundle: bundle, comment: "")
      }

      /// en translation: Insert the date.
      ///
      /// Locales: en, es, English
      static func txt_EditUserProfile_Enter_Date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_EditUserProfile_Enter_Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_EditUserProfile_Enter_Date"
        }

        return NSLocalizedString("txt_EditUserProfile_Enter_Date", bundle: bundle, comment: "")
      }

      /// en translation: Insert the recovery code that we have sent to your
      ///
      /// Locales: en, es, English
      static func lbl_ValidateRecoverCode_Sent_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateRecoverCode_Sent_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateRecoverCode_Sent_Code"
        }

        return NSLocalizedString("lbl_ValidateRecoverCode_Sent_Code", bundle: bundle, comment: "")
      }

      /// en translation: Insert the recovery code.
      ///
      /// Locales: en, es, English
      static func lbl_ValidateRecoverCode_Recover_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateRecoverCode_Recover_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateRecoverCode_Recover_Code"
        }

        return NSLocalizedString("lbl_ValidateRecoverCode_Recover_Code", bundle: bundle, comment: "")
      }

      /// en translation: Insert your access code.
      ///
      /// Locales: en, es, English
      static func lbl_OrderRedeem_Access_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderRedeem_Access_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderRedeem_Access_Code"
        }

        return NSLocalizedString("lbl_OrderRedeem_Access_Code", bundle: bundle, comment: "")
      }

      /// en translation: Insert your code.
      ///
      /// Locales: en, es, English
      static func lbl_ValidatePhone_Enter_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidatePhone_Enter_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidatePhone_Enter_Code"
        }

        return NSLocalizedString("lbl_ValidatePhone_Enter_Code", bundle: bundle, comment: "")
      }

      /// en translation: Insert your password.
      ///
      /// Locales: en, es, English
      static func lbl_LoginWithPassword_Password_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LoginWithPassword_Password_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LoginWithPassword_Password_Text"
        }

        return NSLocalizedString("lbl_LoginWithPassword_Password_Text", bundle: bundle, comment: "")
      }

      /// en translation: Insert your tax document.
      ///
      /// Locales: en, es, English
      static func txt_new_billing_txt_number_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_new_billing_txt_number_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_new_billing_txt_number_placeholder"
        }

        return NSLocalizedString("txt_new_billing_txt_number_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Insert your token (phone number).
      ///
      /// Locales: en, es, English
      static func lbl_enter_phone_number_token(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_enter_phone_number_token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_enter_phone_number_token"
        }

        return NSLocalizedString("lbl_enter_phone_number_token", bundle: bundle, comment: "")
      }

      /// en translation: Inside your errand, you can find a list of purchases, we will make the payment when carrying them out.
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentLocation_Inside_Errand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentLocation_Inside_Errand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentLocation_Inside_Errand"
        }

        return NSLocalizedString("lbl_ShipmentLocation_Inside_Errand", bundle: bundle, comment: "")
      }

      /// en translation: Instructions
      ///
      /// Locales: en, es, English
      static func lbl_UpdatePassword_Instructions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UpdatePassword_Instructions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UpdatePassword_Instructions"
        }

        return NSLocalizedString("lbl_UpdatePassword_Instructions", bundle: bundle, comment: "")
      }

      /// en translation: Instructions:
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_Introductio_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_Introductio_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_Introductio_Text"
        }

        return NSLocalizedString("lbl_CreateFBPassword_Introductio_Text", bundle: bundle, comment: "")
      }

      /// en translation: Insufficient product!
      ///
      /// Locales: en, es
      static func lbl_stock_unavailable_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_stock_unavailable_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_stock_unavailable_title"
        }

        return NSLocalizedString("lbl_stock_unavailable_title", bundle: bundle, comment: "")
      }

      /// en translation: Insurance carrier
      ///
      /// Locales: en, es, English
      static func lbl_ProvidersPayServices_Insurance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProvidersPayServices_Insurance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProvidersPayServices_Insurance"
        }

        return NSLocalizedString("lbl_ProvidersPayServices_Insurance", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Phone
      ///
      /// Locales: en, es
      static func hp_full_invalid_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_invalid_phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_invalid_phone"
        }

        return NSLocalizedString("hp_full_invalid_phone", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Phone
      ///
      /// Locales: en, es
      static func invalid_Phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_Phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalid_Phone"
        }

        return NSLocalizedString("invalid_Phone", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Token
      ///
      /// Locales: en, es, English
      static func tokenErrorDigitsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokenErrorDigitsTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokenErrorDigitsTitle"
        }

        return NSLocalizedString("tokenErrorDigitsTitle", bundle: bundle, comment: "")
      }

      /// en translation: Invalid address
      ///
      /// Locales: en, es, English
      static func wrongTerritoryAddressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongTerritoryAddressTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongTerritoryAddressTitle"
        }

        return NSLocalizedString("WrongTerritoryAddressTitle", bundle: bundle, comment: "")
      }

      /// en translation: Invalid amount
      ///
      /// Locales: en, es
      static func hp_CashinMoneyConfirmation_invalidAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinMoneyConfirmation_invalidAmount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinMoneyConfirmation_invalidAmount"
        }

        return NSLocalizedString("hp_CashinMoneyConfirmation_invalidAmount", bundle: bundle, comment: "")
      }

      /// en translation: Invalid amount
      ///
      /// Locales: en, es
      static func hp_full_invalid_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_invalid_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_invalid_amount"
        }

        return NSLocalizedString("hp_full_invalid_amount", bundle: bundle, comment: "")
      }

      /// en translation: Invalid code
      ///
      /// Locales: en, es, English
      static func invalid_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid_Code"
        }

        return NSLocalizedString("Invalid_Code", bundle: bundle, comment: "")
      }

      /// en translation: Invalid coupon
      ///
      /// Locales: en, es, English
      static func noValidCouponTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoValidCouponTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoValidCouponTitle"
        }

        return NSLocalizedString("NoValidCouponTitle", bundle: bundle, comment: "")
      }

      /// en translation: Invalid email
      ///
      /// Locales: en, es
      static func hp_full_invalid_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_invalid_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_invalid_email"
        }

        return NSLocalizedString("hp_full_invalid_email", bundle: bundle, comment: "")
      }

      /// en translation: Invalid email
      ///
      /// Locales: en, es, English
      static func emailNoValidTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EmailNoValidTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "EmailNoValidTitle"
        }

        return NSLocalizedString("EmailNoValidTitle", bundle: bundle, comment: "")
      }

      /// en translation: Invalid number
      ///
      /// Locales: en, es
      static func invalid_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid_Number"
        }

        return NSLocalizedString("Invalid_Number", bundle: bundle, comment: "")
      }

      /// en translation: Invalid option
      ///
      /// Locales: en, es
      static func invalid_option(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid_option", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid_option"
        }

        return NSLocalizedString("Invalid_option", bundle: bundle, comment: "")
      }

      /// en translation: Invalid phone number
      ///
      /// Locales: en, es
      static func invalid_Phone_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid_Phone_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid_Phone_Number"
        }

        return NSLocalizedString("Invalid_Phone_Number", bundle: bundle, comment: "")
      }

      /// en translation: Invalid value
      ///
      /// Locales: en, es, English
      static func minimumAmountTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MinimumAmountTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MinimumAmountTitle"
        }

        return NSLocalizedString("MinimumAmountTitle", bundle: bundle, comment: "")
      }

      /// en translation: Invoice
      ///
      /// Locales: en, es, English
      static func lbl_Invoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Invoice"
        }

        return NSLocalizedString("lbl_Invoice", bundle: bundle, comment: "")
      }

      /// en translation: Invoice Information
      ///
      /// Locales: en, es
      static func receipt_configuration_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_title"
        }

        return NSLocalizedString("receipt_configuration_title", bundle: bundle, comment: "")
      }

      /// en translation: Invoice holder
      ///
      /// Locales: en, es, English
      static func lbl_PayServiceDetailHistory_Invoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PayServiceDetailHistory_Invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PayServiceDetailHistory_Invoice"
        }

        return NSLocalizedString("lbl_PayServiceDetailHistory_Invoice", bundle: bundle, comment: "")
      }

      /// en translation: Invoice holder X:
      ///
      /// Locales: en, es, English
      static func lbl_BillPayService_Invoice_Holder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_BillPayService_Invoice_Holder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_BillPayService_Invoice_Holder"
        }

        return NSLocalizedString("lbl_BillPayService_Invoice_Holder", bundle: bundle, comment: "")
      }

      /// en translation: It appears you may have blocked your account
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_locked_account_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_locked_account_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_locked_account_title"
        }

        return NSLocalizedString("hp_full_reset_pin_locked_account_title", bundle: bundle, comment: "")
      }

      /// en translation: It is impossible to locate Hugo, trying…
      ///
      /// Locales: en, es, English
      static func lbl_unable_to_locate_hugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_unable_to_locate_hugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_unable_to_locate_hugo"
        }

        return NSLocalizedString("lbl_unable_to_locate_hugo", bundle: bundle, comment: "")
      }

      /// en translation: It is the last step!
      ///
      /// Locales: en, es, English
      static func last_Step(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("last_Step", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "last_Step"
        }

        return NSLocalizedString("last_Step", bundle: bundle, comment: "")
      }

      /// en translation: It is time to change your password
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Change_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Change_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Change_Password"
        }

        return NSLocalizedString("lbl_CreatePassword_Change_Password", bundle: bundle, comment: "")
      }

      /// en translation: It is time to enter your new password
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_New_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_New_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_New_Password"
        }

        return NSLocalizedString("lbl_CreatePassword_New_Password", bundle: bundle, comment: "")
      }

      /// en translation: It may take up to 30 seconds for your temporary code to arrive
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_time_disclaimer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_time_disclaimer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_time_disclaimer"
        }

        return NSLocalizedString("hp_full_reset_pin_time_disclaimer", bundle: bundle, comment: "")
      }

      /// en translation: It was not possible to cancel the order, try again
      ///
      /// Locales: en, es
      static func cancel_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel_Order"
        }

        return NSLocalizedString("Cancel_Order", bundle: bundle, comment: "")
      }

      /// en translation: It was not possible to complete the action
      ///
      /// Locales: en, es
      static func completed_Action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Completed_Action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Completed_Action"
        }

        return NSLocalizedString("Completed_Action", bundle: bundle, comment: "")
      }

      /// en translation: It was not possible to get your location, you can check your iPhone settings or select a territory
      ///
      /// Locales: en, es, English
      static func noLocationPossibleMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoLocationPossibleMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoLocationPossibleMessage"
        }

        return NSLocalizedString("NoLocationPossibleMessage", bundle: bundle, comment: "")
      }

      /// en translation: It was not possible to use the code entered, try again
      ///
      /// Locales: en, es
      static func code_Enter_Try_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Code_Enter_Try_again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Code_Enter_Try_again"
        }

        return NSLocalizedString("Code_Enter_Try_again", bundle: bundle, comment: "")
      }

      /// en translation: It will take some seconds.
      ///
      /// Locales: en, es, English
      static func lbl_AddUserInfo_Take_Seconds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddUserInfo_Take_Seconds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddUserInfo_Take_Seconds"
        }

        return NSLocalizedString("lbl_AddUserInfo_Take_Seconds", bundle: bundle, comment: "")
      }

      /// en translation: It's time to assign a password
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Assign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Assign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Assign"
        }

        return NSLocalizedString("lbl_CreatePassword_Assign", bundle: bundle, comment: "")
      }

      /// en translation: JANUARY
      ///
      /// Locales: en, es, English
      static func lbl_EntertainmentOrder_January(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EntertainmentOrder_January", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EntertainmentOrder_January"
        }

        return NSLocalizedString("lbl_EntertainmentOrder_January", bundle: bundle, comment: "")
      }

      /// en translation: Jeep Cheroke
      ///
      /// Locales: en, es, English
      static func lbl_OnTheWayRide_Jeep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OnTheWayRide_Jeep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OnTheWayRide_Jeep"
        }

        return NSLocalizedString("lbl_OnTheWayRide_Jeep", bundle: bundle, comment: "")
      }

      /// en translation: Jeep Cheroke
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide_Jeep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide_Jeep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide_Jeep"
        }

        return NSLocalizedString("lbl_PickingRide_Jeep", bundle: bundle, comment: "")
      }

      /// en translation: Jeep Cherokee
      ///
      /// Locales: en, English
      static func lbl_RideSummaryJeep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideSummaryJeep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideSummaryJeep"
        }

        return NSLocalizedString("lbl_RideSummaryJeep", bundle: bundle, comment: "")
      }

      /// en translation: Jeep Cherokee
      ///
      /// Locales: en, es, English
      static func lbl_OnTheWayRide2_Jeep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OnTheWayRide2_Jeep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OnTheWayRide2_Jeep"
        }

        return NSLocalizedString("lbl_OnTheWayRide2_Jeep", bundle: bundle, comment: "")
      }

      /// en translation: Jeep Cherokee
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide2_Jeep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide2_Jeep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide2_Jeep"
        }

        return NSLocalizedString("lbl_PickingRide2_Jeep", bundle: bundle, comment: "")
      }

      /// en translation: Jeep Cherokee 2016 / Placa: M-3324455
      ///
      /// Locales: en, es, English
      static func lbl_DriverDetail_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DriverDetail_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DriverDetail_Address"
        }

        return NSLocalizedString("lbl_DriverDetail_Address", bundle: bundle, comment: "")
      }

      /// en translation: Jhon Doe
      ///
      /// Locales: en, es, English
      static func billing_cell_lblname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("billing_cell_lblname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "billing_cell_lblname"
        }

        return NSLocalizedString("billing_cell_lblname", bundle: bundle, comment: "")
      }

      /// en translation: Job
      ///
      /// Locales: en, es
      static func lbl_AddressBook_Office(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Office", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Office"
        }

        return NSLocalizedString("lbl_AddressBook_Office", bundle: bundle, comment: "")
      }

      /// en translation: Join the financial revolution!
      ///
      /// Locales: en, es
      static func user_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_login"
        }

        return NSLocalizedString("user_login", bundle: bundle, comment: "")
      }

      /// en translation: Journey started
      ///
      /// Locales: en, es
      static func start_Jounary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start_Jounary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start_Jounary"
        }

        return NSLocalizedString("Start_Jounary", bundle: bundle, comment: "")
      }

      /// en translation: Juan Ernesto López
      ///
      /// Locales: en, es
      static func receipt_configuration_name_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_name_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_name_placeholder"
        }

        return NSLocalizedString("receipt_configuration_name_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Keep going
      ///
      /// Locales: en, es, English
      static func lbl_Keep_Going(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Keep_Going", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Keep_Going"
        }

        return NSLocalizedString("lbl_Keep_Going", bundle: bundle, comment: "")
      }

      /// en translation: Keep in mind!
      ///
      /// Locales: en, es
      static func lbl_ProcessOrder_TO_Warning_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProcessOrder_TO_Warning_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProcessOrder_TO_Warning_Title"
        }

        return NSLocalizedString("lbl_ProcessOrder_TO_Warning_Title", bundle: bundle, comment: "")
      }

      /// en translation: Keep searching
      ///
      /// Locales: en, es
      static func lbl_Keep_Searching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Keep_Searching", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Keep_Searching"
        }

        return NSLocalizedString("lbl_Keep_Searching", bundle: bundle, comment: "")
      }

      /// en translation: Kirkland Signature Compactor Bag With DrawstringKirkland Signature Compactor Bag With Drawstring
      ///
      /// Locales: en, es, English
      static func lbl_ProductCollection_Signature(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductCollection_Signature", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductCollection_Signature"
        }

        return NSLocalizedString("lbl_ProductCollection_Signature", bundle: bundle, comment: "")
      }

      /// en translation: Know about our refund policy.
      ///
      /// Locales: en, es, English
      static func lbl_RefundDesclaimer_Refund_Policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RefundDesclaimer_Refund_Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RefundDesclaimer_Refund_Policy"
        }

        return NSLocalizedString("lbl_RefundDesclaimer_Refund_Policy", bundle: bundle, comment: "")
      }

      /// en translation: Koi Sushi
      ///
      /// Locales: en, es, English
      static func lbl_PartnerTable_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerTable_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerTable_Name"
        }

        return NSLocalizedString("lbl_PartnerTable_Name", bundle: bundle, comment: "")
      }

      /// en translation: LOCATE ME MANUALLY
      ///
      /// Locales: en, es
      static func locate_Me_County(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Locate_Me_County", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Locate_Me_County"
        }

        return NSLocalizedString("Locate_Me_County", bundle: bundle, comment: "")
      }

      /// en translation: LOG IN
      ///
      /// Locales: en, es
      static func btn_WelcomeLog_In(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_WelcomeLog_In", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_WelcomeLog_In"
        }

        return NSLocalizedString("btn_WelcomeLog_In", bundle: bundle, comment: "")
      }

      /// en translation: LOG IN
      ///
      /// Locales: en, es
      static func lbl_NewLogin_Login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_NewLogin_Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_NewLogin_Login"
        }

        return NSLocalizedString("lbl_NewLogin_Login", bundle: bundle, comment: "")
      }

      /// en translation: LOG IN
      ///
      /// Locales: en, es
      static func lbl_Step1_Login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Login"
        }

        return NSLocalizedString("lbl_Step1_Login", bundle: bundle, comment: "")
      }

      /// en translation: LOG IN
      ///
      /// Locales: en, es
      static func lbl_Step2_Login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Login"
        }

        return NSLocalizedString("lbl_Step2_Login", bundle: bundle, comment: "")
      }

      /// en translation: LWe are sorry the inconvenience, a help request has been generated and one of our agents will communicate with you to give a solution.
      ///
      /// Locales: en, es, English
      static func lbl_CustomCall_Agents_Contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CustomCall_Agents_Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CustomCall_Agents_Contact"
        }

        return NSLocalizedString("lbl_CustomCall_Agents_Contact", bundle: bundle, comment: "")
      }

      /// en translation: La Libertad, El Salvador
      ///
      /// Locales: en, es, English
      static func lbl_PersonalAddress_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PersonalAddress_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PersonalAddress_Address"
        }

        return NSLocalizedString("lbl_PersonalAddress_Address", bundle: bundle, comment: "")
      }

      /// en translation: La Libertad, El Salvador
      ///
      /// Locales: en, es, English
      static func lbl_SearchAddress_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchAddress_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchAddress_Address"
        }

        return NSLocalizedString("lbl_SearchAddress_Address", bundle: bundle, comment: "")
      }

      /// en translation: Last message
      ///
      /// Locales: en, es, English
      static func lbl_HelpZendesk_Last_Msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_HelpZendesk_Last_Msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_HelpZendesk_Last_Msg"
        }

        return NSLocalizedString("lbl_HelpZendesk_Last_Msg", bundle: bundle, comment: "")
      }

      /// en translation: Last name
      ///
      /// Locales: en, es
      static func lbl_Step3_Surname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step3_Surname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step3_Surname"
        }

        return NSLocalizedString("lbl_Step3_Surname", bundle: bundle, comment: "")
      }

      /// en translation: Let us have access to your location to recommend the businesses close to you.
      ///
      /// Locales: en, es, English
      static func lbl_Onboarding_Allow_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Onboarding_Allow_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Onboarding_Allow_Location"
        }

        return NSLocalizedString("lbl_Onboarding_Allow_Location", bundle: bundle, comment: "")
      }

      /// en translation: Let's add security!
      ///
      /// Locales: en, es
      static func createPassword_Add_Security(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CreatePassword_Add_Security", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CreatePassword_Add_Security"
        }

        return NSLocalizedString("CreatePassword_Add_Security", bundle: bundle, comment: "")
      }

      /// en translation: Let's recharge.
      ///
      /// Locales: en, es, English
      static func lbl_TopUpMain_Recharge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TopUpMain_Recharge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TopUpMain_Recharge"
        }

        return NSLocalizedString("lbl_TopUpMain_Recharge", bundle: bundle, comment: "")
      }

      /// en translation: Let's recover it
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_locked_account_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_locked_account_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_locked_account_subtitle"
        }

        return NSLocalizedString("hp_full_reset_pin_locked_account_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Let's start with Hugo!
      ///
      /// Locales: en, es, English
      static func lbl_EmailInfo_Main_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EmailInfo_Main_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EmailInfo_Main_Heading"
        }

        return NSLocalizedString("lbl_EmailInfo_Main_Heading", bundle: bundle, comment: "")
      }

      /// en translation: Let's update your password.
      ///
      /// Locales: en, es, English
      static func lbl_UpdatePassword_Help_SubTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UpdatePassword_Help_SubTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UpdatePassword_Help_SubTitle"
        }

        return NSLocalizedString("lbl_UpdatePassword_Help_SubTitle", bundle: bundle, comment: "")
      }

      /// en translation: Limit Exceeded
      ///
      /// Locales: en, es, English
      static func dailyLimitExceededTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DailyLimitExceededTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DailyLimitExceededTitle"
        }

        return NSLocalizedString("DailyLimitExceededTitle", bundle: bundle, comment: "")
      }

      /// en translation: Limit Exceeded
      ///
      /// Locales: en, es, English
      static func limitExceededTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LimitExceededTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LimitExceededTitle"
        }

        return NSLocalizedString("LimitExceededTitle", bundle: bundle, comment: "")
      }

      /// en translation: Limited product
      ///
      /// Locales: en, es, English
      static func partnerLimitTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PartnerLimitTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PartnerLimitTitle"
        }

        return NSLocalizedString("PartnerLimitTitle", bundle: bundle, comment: "")
      }

      /// en translation: List of products
      ///
      /// Locales: en, es, English
      static func lbl_ListView_Product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ListView_Product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ListView_Product"
        }

        return NSLocalizedString("lbl_ListView_Product", bundle: bundle, comment: "")
      }

      /// en translation: List of purchases
      ///
      /// Locales: en, es, English
      static func btn_WriteDescription_Buy_List(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_WriteDescription_Buy_List", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_WriteDescription_Buy_List"
        }

        return NSLocalizedString("btn_WriteDescription_Buy_List", bundle: bundle, comment: "")
      }

      /// en translation: Loading ...
      ///
      /// Locales: en, es
      static func loading_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loading_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loading_Text"
        }

        return NSLocalizedString("loading_Text", bundle: bundle, comment: "")
      }

      /// en translation: Locate me in the map.
      ///
      /// Locales: en, es, English
      static func lbl_MyLocationNewAddress_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_MyLocationNewAddress_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_MyLocationNewAddress_Title"
        }

        return NSLocalizedString("lbl_MyLocationNewAddress_Title", bundle: bundle, comment: "")
      }

      /// en translation: Locate on the map
      ///
      /// Locales: en, es
      static func lbl_AddressBook_Localise(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Localise", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Localise"
        }

        return NSLocalizedString("lbl_AddressBook_Localise", bundle: bundle, comment: "")
      }

      /// en translation: Log In
      ///
      /// Locales: en, es
      static func hp_lbl_onboarding_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_onboarding_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_onboarding_login"
        }

        return NSLocalizedString("hp_lbl_onboarding_login", bundle: bundle, comment: "")
      }

      /// en translation: Log in to your account.
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhoneAlternative_Login_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhoneAlternative_Login_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhoneAlternative_Login_Text"
        }

        return NSLocalizedString("lbl_StartedPhoneAlternative_Login_Text", bundle: bundle, comment: "")
      }

      /// en translation: Login with
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhone_LoginWith(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhone_LoginWith", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhone_LoginWith"
        }

        return NSLocalizedString("lbl_StartedPhone_LoginWith", bundle: bundle, comment: "")
      }

      /// en translation: Looking for transportation…
      ///
      /// Locales: en, English
      static func lbl_RideSummaryLooking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideSummaryLooking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideSummaryLooking"
        }

        return NSLocalizedString("lbl_RideSummaryLooking", bundle: bundle, comment: "")
      }

      /// en translation: Lost
      ///
      /// Locales: en, es
      static func lbldriverBadRatings2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverBadRatings2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverBadRatings2"
        }

        return NSLocalizedString("lbldriverBadRatings2", bundle: bundle, comment: "")
      }

      /// en translation: Loyalty Program
      ///
      /// Locales: en, es, English
      static func program(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Program", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Program"
        }

        return NSLocalizedString("Program", bundle: bundle, comment: "")
      }

      /// en translation: M-3324455
      ///
      /// Locales: en, es, English
      static func lbl_OnTheWayRide_M(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OnTheWayRide_M", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OnTheWayRide_M"
        }

        return NSLocalizedString("lbl_OnTheWayRide_M", bundle: bundle, comment: "")
      }

      /// en translation: M-3324455
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide_Number"
        }

        return NSLocalizedString("lbl_PickingRide_Number", bundle: bundle, comment: "")
      }

      /// en translation: MAKE ANOTHER DELIVERY.
      ///
      /// Locales: en, es, English
      static func btn_OrderFinished_Make_Another_Shipping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_OrderFinished_Make_Another_Shipping", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_OrderFinished_Make_Another_Shipping"
        }

        return NSLocalizedString("btn_OrderFinished_Make_Another_Shipping", bundle: bundle, comment: "")
      }

      /// en translation: MAKE ANOTHER PAYMENT
      ///
      /// Locales: en, es
      static func make_payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("make_payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "make_payments"
        }

        return NSLocalizedString("make_payments", bundle: bundle, comment: "")
      }

      /// en translation: MAKE ANOTHER RECHARGE
      ///
      /// Locales: en, es, English
      static func lbl_Another_Refill(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Another_Refill", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Another_Refill"
        }

        return NSLocalizedString("lbl_Another_Refill", bundle: bundle, comment: "")
      }

      /// en translation: MAKE RECHARGE
      ///
      /// Locales: en, es
      static func make_rechare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Make_rechare", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Make_rechare"
        }

        return NSLocalizedString("Make_rechare", bundle: bundle, comment: "")
      }

      /// en translation: MODIFY IMAGE
      ///
      /// Locales: en, es
      static func lbl_SearchAddressShipment_modify_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchAddressShipment_modify_image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchAddressShipment_modify_image"
        }

        return NSLocalizedString("lbl_SearchAddressShipment_modify_image", bundle: bundle, comment: "")
      }

      /// en translation: MY ADDRESSES
      ///
      /// Locales: en, es
      static func my_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MY_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MY_address"
        }

        return NSLocalizedString("MY_address", bundle: bundle, comment: "")
      }

      /// en translation: Made in
      ///
      /// Locales: en, es
      static func lbl_Country_Made(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Country_Made", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Country_Made"
        }

        return NSLocalizedString("lbl_Country_Made", bundle: bundle, comment: "")
      }

      /// en translation: Mail is required
      ///
      /// Locales: en, es, English
      static func emailNoValidMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EmailNoValidMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "EmailNoValidMessage"
        }

        return NSLocalizedString("EmailNoValidMessage", bundle: bundle, comment: "")
      }

      /// en translation: Make an order
      ///
      /// Locales: en, es, English
      static func ordersList_Make(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrdersList_Make", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrdersList_Make"
        }

        return NSLocalizedString("OrdersList_Make", bundle: bundle, comment: "")
      }

      /// en translation: Make an order
      ///
      /// Locales: en, es, English
      static func pastOrders_Make(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PastOrders_Make", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PastOrders_Make"
        }

        return NSLocalizedString("PastOrders_Make", bundle: bundle, comment: "")
      }

      /// en translation: Make your first purchase with hugoPay
      ///
      /// Locales: en, es
      static func hp_lbl_home_emptystate_payall(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_home_emptystate_payall", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_home_emptystate_payall"
        }

        return NSLocalizedString("hp_lbl_home_emptystate_payall", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en, es, English
      static func lbl_BasicInfo_male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_BasicInfo_male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_BasicInfo_male"
        }

        return NSLocalizedString("lbl_BasicInfo_male", bundle: bundle, comment: "")
      }

      /// en translation: Max
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionAmountMax(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionAmountMax", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionAmountMax"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionAmountMax", bundle: bundle, comment: "")
      }

      /// en translation: Maximum
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_maximum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_maximum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_maximum"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_maximum", bundle: bundle, comment: "")
      }

      /// en translation: Min
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionAmountMin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionAmountMin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionAmountMin"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionAmountMin", bundle: bundle, comment: "")
      }

      /// en translation: Minimum
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_minimum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_minimum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_minimum"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_minimum", bundle: bundle, comment: "")
      }

      /// en translation: Minimum Amount 
      ///
      /// Locales: en, es
      static func hp_CashInMoneyIncome_MinimumAmountValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashInMoneyIncome_MinimumAmountValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashInMoneyIncome_MinimumAmountValidation"
        }

        return NSLocalizedString("hp_CashInMoneyIncome_MinimumAmountValidation", bundle: bundle, comment: "")
      }

      /// en translation: Minimum purchase required
      ///
      /// Locales: en, es, English
      static func minOrderRequiredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MinOrderRequiredTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MinOrderRequiredTitle"
        }

        return NSLocalizedString("MinOrderRequiredTitle", bundle: bundle, comment: "")
      }

      /// en translation: Missing data
      ///
      /// Locales: en, es
      static func missing_Data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("missing_Data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "missing_Data"
        }

        return NSLocalizedString("missing_Data", bundle: bundle, comment: "")
      }

      /// en translation: Modify pin
      ///
      /// Locales: en, es, English
      static func lbl_Modify_Pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Modify_Pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Modify_Pin"
        }

        return NSLocalizedString("lbl_Modify_Pin", bundle: bundle, comment: "")
      }

      /// en translation: Monday, February 25th
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentETA_Monday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentETA_Monday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentETA_Monday"
        }

        return NSLocalizedString("lbl_ShipmentETA_Monday", bundle: bundle, comment: "")
      }

      /// en translation: Month must contain 2 digits
      ///
      /// Locales: en, es, English
      static func monthLength(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MonthLength", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MonthLength"
        }

        return NSLocalizedString("MonthLength", bundle: bundle, comment: "")
      }

      /// en translation: More Info
      ///
      /// Locales: en, es
      static func hp_lbl_onboarding_moreinfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_onboarding_moreinfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_onboarding_moreinfo"
        }

        return NSLocalizedString("hp_lbl_onboarding_moreinfo", bundle: bundle, comment: "")
      }

      /// en translation: More information
      ///
      /// Locales: en, es, English
      static func lbl_PromosMoreInfo_MoreInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PromosMoreInfo_MoreInfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PromosMoreInfo_MoreInfo"
        }

        return NSLocalizedString("lbl_PromosMoreInfo_MoreInfo", bundle: bundle, comment: "")
      }

      /// en translation: Move in style
      ///
      /// Locales: en, es
      static func move_Style(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Move_Style", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Move_Style"
        }

        return NSLocalizedString("Move_Style", bundle: bundle, comment: "")
      }

      /// en translation: Move the pin to the destiny place.
      ///
      /// Locales: en, es, English
      static func lbl_PlaceMarker_Destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PlaceMarker_Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PlaceMarker_Destination"
        }

        return NSLocalizedString("lbl_PlaceMarker_Destination", bundle: bundle, comment: "")
      }

      /// en translation: Move the pin to the exact place where we will pick you up.
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmationBottom_Pick_Up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmationBottom_Pick_Up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmationBottom_Pick_Up"
        }

        return NSLocalizedString("lbl_ConfirmationBottom_Pick_Up", bundle: bundle, comment: "")
      }

      /// en translation: Move the pin to the location you need
      ///
      /// Locales: en, es, English
      static func lbl_Location_Pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Location_Pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Location_Pin"
        }

        return NSLocalizedString("lbl_Location_Pin", bundle: bundle, comment: "")
      }

      /// en translation: Move the pin to your destiny place
      ///
      /// Locales: en, es, English
      static func lbl_Move_Pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Move_Pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Move_Pin"
        }

        return NSLocalizedString("lbl_Move_Pin", bundle: bundle, comment: "")
      }

      /// en translation: Move the pin to your destiny place
      ///
      /// Locales: en, es, English
      static func lbl_Move_To_Pin_Destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Move_To_Pin_Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Move_To_Pin_Destination"
        }

        return NSLocalizedString("lbl_Move_To_Pin_Destination", bundle: bundle, comment: "")
      }

      /// en translation: Move your profile photo in the map to locate you better.
      ///
      /// Locales: en, English
      static func lbl_Search_GpsLocation_Profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Search_GpsLocation_Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Search_GpsLocation_Profile"
        }

        return NSLocalizedString("lbl_Search_GpsLocation_Profile", bundle: bundle, comment: "")
      }

      /// en translation: My %@
      ///
      /// Locales: en, es
      static func hp_lbl_home_mytransactions(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("hp_lbl_home_mytransactions", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_home_mytransactions"
        }

        let format = NSLocalizedString("hp_lbl_home_mytransactions", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: My Tickets
      ///
      /// Locales: en, es, English
      static func lbl_Help_Tickets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Help_Tickets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Help_Tickets"
        }

        return NSLocalizedString("lbl_Help_Tickets", bundle: bundle, comment: "")
      }

      /// en translation: My transactions
      ///
      /// Locales: en, es
      static func hp_expense_control_my_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_expense_control_my_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_expense_control_my_transactions"
        }

        return NSLocalizedString("hp_expense_control_my_transactions", bundle: bundle, comment: "")
      }

      /// en translation: My transactions
      ///
      /// Locales: en, es
      static func hp_my_transactions_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_my_transactions_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_my_transactions_title"
        }

        return NSLocalizedString("hp_my_transactions_title", bundle: bundle, comment: "")
      }

      /// en translation: NEXT
      ///
      /// Locales: en
      static func btn_LoginWithPassword_Continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_LoginWithPassword_Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_LoginWithPassword_Continue"
        }

        return NSLocalizedString("btn_LoginWithPassword_Continue", bundle: bundle, comment: "")
      }

      /// en translation: NEXT
      ///
      /// Locales: en, es
      static func hp_CashInMoneyIncome_NextButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashInMoneyIncome_NextButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashInMoneyIncome_NextButton"
        }

        return NSLocalizedString("hp_CashInMoneyIncome_NextButton", bundle: bundle, comment: "")
      }

      /// en translation: NEXT
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_next_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_next_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_next_button"
        }

        return NSLocalizedString("hp_full_reset_pin_next_button", bundle: bundle, comment: "")
      }

      /// en translation: NEXT
      ///
      /// Locales: en, es
      static func hp_temporal_code_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_temporal_code_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_temporal_code_next"
        }

        return NSLocalizedString("hp_temporal_code_next", bundle: bundle, comment: "")
      }

      /// en translation: NEXT
      ///
      /// Locales: en, es
      static func lbl_Step1_Following(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Following", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Following"
        }

        return NSLocalizedString("lbl_Step1_Following", bundle: bundle, comment: "")
      }

      /// en translation: NO
      ///
      /// Locales: en, es
      static func btn_AlertTransport_To_No(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_AlertTransport_To_No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_AlertTransport_To_No"
        }

        return NSLocalizedString("btn_AlertTransport_To_No", bundle: bundle, comment: "")
      }

      /// en translation: NONE OF THESE
      ///
      /// Locales: en, es, English
      static func lbl_None_Of_These(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_None_Of_These", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_None_Of_These"
        }

        return NSLocalizedString("lbl_None_Of_These", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, es
      static func lbl_Step3_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step3_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step3_Name"
        }

        return NSLocalizedString("lbl_Step3_Name", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, es, English
      static func lbl_new_billing_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_new_billing_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_new_billing_name"
        }

        return NSLocalizedString("lbl_new_billing_name", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, es, English
      static func txt_CoverAlert_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_CoverAlert_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_CoverAlert_Name"
        }

        return NSLocalizedString("txt_CoverAlert_Name", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, es, English
      static func txt_new_billing_name_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_new_billing_name_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_new_billing_name_placeholder"
        }

        return NSLocalizedString("txt_new_billing_name_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Name is required
      ///
      /// Locales: en, es, English
      static func userNameRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserNameRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserNameRequired"
        }

        return NSLocalizedString("UserNameRequired", bundle: bundle, comment: "")
      }

      /// en translation: Name of the Card
      ///
      /// Locales: en, es, English
      static func name_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name_Card"
        }

        return NSLocalizedString("Name_Card", bundle: bundle, comment: "")
      }

      /// en translation: Name on card required
      ///
      /// Locales: en, es, English
      static func cardNameRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CardNameRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CardNameRequired"
        }

        return NSLocalizedString("CardNameRequired", bundle: bundle, comment: "")
      }

      /// en translation: Name on the card
      ///
      /// Locales: en, es, English
      static func txt_creditcard_name_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_creditcard_name_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_creditcard_name_placeholder"
        }

        return NSLocalizedString("txt_creditcard_name_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Need help?
      ///
      /// Locales: en, es
      static func lbl_Step1_Need_Help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Need_Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Need_Help"
        }

        return NSLocalizedString("lbl_Step1_Need_Help", bundle: bundle, comment: "")
      }

      /// en translation: Need help?
      ///
      /// Locales: en, es, English
      static func helpTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HelpTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HelpTitle"
        }

        return NSLocalizedString("HelpTitle", bundle: bundle, comment: "")
      }

      /// en translation: New
      ///
      /// Locales: en, es, English
      static func lbl_PartnerFeedTable_New(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerFeedTable_New", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerFeedTable_New"
        }

        return NSLocalizedString("lbl_PartnerFeedTable_New", bundle: bundle, comment: "")
      }

      /// en translation: New
      ///
      /// Locales: en, es, English
      static func lbl_PartnerTable_New(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerTable_New", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerTable_New"
        }

        return NSLocalizedString("lbl_PartnerTable_New", bundle: bundle, comment: "")
      }

      /// en translation: New Card
      ///
      /// Locales: en, es
      static func new_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New_Card"
        }

        return NSLocalizedString("New_Card", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, es, English
      static func lbl_UpdatePassword_New_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UpdatePassword_New_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UpdatePassword_New_Password"
        }

        return NSLocalizedString("lbl_UpdatePassword_New_Password", bundle: bundle, comment: "")
      }

      /// en translation: New invoice
      ///
      /// Locales: en, es, English
      static func lbl_new_billing_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_new_billing_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_new_billing_title"
        }

        return NSLocalizedString("lbl_new_billing_title", bundle: bundle, comment: "")
      }

      /// en translation: New transport message
      ///
      /// Locales: en, es, English
      static func lbl_LocalNotification_New_Transport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LocalNotification_New_Transport", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LocalNotification_New_Transport"
        }

        return NSLocalizedString("lbl_LocalNotification_New_Transport", bundle: bundle, comment: "")
      }

      /// en translation: New version available
      ///
      /// Locales: en, es, English
      static func betaNewVersionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BetaNewVersionTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BetaNewVersionTitle"
        }

        return NSLocalizedString("BetaNewVersionTitle", bundle: bundle, comment: "")
      }

      /// en translation: New version available
      ///
      /// Locales: en, es, English
      static func newVersionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NewVersionTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NewVersionTitle"
        }

        return NSLocalizedString("NewVersionTitle", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, es
      static func hp_lbl_account_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_account_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_account_next"
        }

        return NSLocalizedString("hp_lbl_account_next", bundle: bundle, comment: "")
      }

      /// en translation: Next step:
      ///
      /// Locales: en, es
      static func lbl_InfoUser_Next_Step(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_InfoUser_Next_Step", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_InfoUser_Next_Step"
        }

        return NSLocalizedString("lbl_InfoUser_Next_Step", bundle: bundle, comment: "")
      }

      /// en translation: Next step: additional information
      ///
      /// Locales: en, es, English
      static func lbl_InfoUser_SubTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_InfoUser_SubTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_InfoUser_SubTitle"
        }

        return NSLocalizedString("lbl_InfoUser_SubTitle", bundle: bundle, comment: "")
      }

      /// en translation: Next you can select a reward:
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeGoodRating_Select_Reward(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeGoodRating_Select_Reward", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeGoodRating_Select_Reward"
        }

        return NSLocalizedString("lbl_FinalizeGoodRating_Select_Reward", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, es, English
      static func nO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NO", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NO"
        }

        return NSLocalizedString("NO", bundle: bundle, comment: "")
      }

      /// en translation: No Change
      ///
      /// Locales: en, es
      static func lbldriverBadRatings3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverBadRatings3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverBadRatings3"
        }

        return NSLocalizedString("lbldriverBadRatings3", bundle: bundle, comment: "")
      }

      /// en translation: No Internet access
      ///
      /// Locales: en, es, English
      static func noInternetAccessTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoInternetAccessTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoInternetAccessTitle"
        }

        return NSLocalizedString("NoInternetAccessTitle", bundle: bundle, comment: "")
      }

      /// en translation: No notifications
      ///
      /// Locales: en, es
      static func hp_empty_transactions_lbl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_empty_transactions_lbl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_empty_transactions_lbl"
        }

        return NSLocalizedString("hp_empty_transactions_lbl", bundle: bundle, comment: "")
      }

      /// en translation: No results found.
      ///
      /// Locales: en, es, English
      static func lbl_ProductView_No_Result_Found(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductView_No_Result_Found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductView_No_Result_Found"
        }

        return NSLocalizedString("lbl_ProductView_No_Result_Found", bundle: bundle, comment: "")
      }

      /// en translation: No thanks
      ///
      /// Locales: en, es, English
      static func helpNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helpNo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helpNo"
        }

        return NSLocalizedString("helpNo", bundle: bundle, comment: "")
      }

      /// en translation: No transactions
      ///
      /// Locales: en, es
      static func hp_full_TransactionHPFullViewController_EmptyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionHPFullViewController_EmptyText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionHPFullViewController_EmptyText"
        }

        return NSLocalizedString("hp_full_TransactionHPFullViewController_EmptyText", bundle: bundle, comment: "")
      }

      /// en translation: No transactions yet.
      ///
      /// Locales: en, es
      static func hp_lbl_home_emptystate_trx(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_home_emptystate_trx", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_home_emptystate_trx"
        }

        return NSLocalizedString("hp_lbl_home_emptystate_trx", bundle: bundle, comment: "")
      }

      /// en translation: No transactions yet.
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_list_emptytitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_list_emptytitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_list_emptytitle"
        }

        return NSLocalizedString("hp_lbl_transaction_list_emptytitle", bundle: bundle, comment: "")
      }

      /// en translation: Not available
      ///
      /// Locales: en, es, English
      static func lbl_Not_Avaiable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Not_Avaiable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Not_Avaiable"
        }

        return NSLocalizedString("lbl_Not_Avaiable", bundle: bundle, comment: "")
      }

      /// en translation: Not available
      ///
      /// Locales: en, es, English
      static func noAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoAvailable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoAvailable"
        }

        return NSLocalizedString("NoAvailable", bundle: bundle, comment: "")
      }

      /// en translation: Not available due to saturation
      ///
      /// Locales: en, es, English
      static func saturated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Saturated", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Saturated"
        }

        return NSLocalizedString("Saturated", bundle: bundle, comment: "")
      }

      /// en translation: Not now
      ///
      /// Locales: en, es, English
      static func btn_Onboarding_Not_Now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Onboarding_Not_Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Onboarding_Not_Now"
        }

        return NSLocalizedString("btn_Onboarding_Not_Now", bundle: bundle, comment: "")
      }

      /// en translation: Not valid
      ///
      /// Locales: en, es
      static func not_Valid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not_Valid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not_Valid"
        }

        return NSLocalizedString("Not_Valid", bundle: bundle, comment: "")
      }

      /// en translation: Not valid
      ///
      /// Locales: en, es, English
      static func noValidTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoValidTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoValidTitle"
        }

        return NSLocalizedString("NoValidTitle", bundle: bundle, comment: "")
      }

      /// en translation: Notes for the order
      ///
      /// Locales: en, es, English
      static func lbl_Note_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Note_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Note_Order"
        }

        return NSLocalizedString("lbl_Note_Order", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, es
      static func ct_notification_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ct_notification_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ct_notification_title"
        }

        return NSLocalizedString("ct_notification_title", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, es
      static func hp_lbl_notifications_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_notifications_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_notifications_title"
        }

        return NSLocalizedString("hp_lbl_notifications_title", bundle: bundle, comment: "")
      }

      /// en translation: Number on the card
      ///
      /// Locales: en, es
      static func card_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card_Number"
        }

        return NSLocalizedString("Card_Number", bundle: bundle, comment: "")
      }

      /// en translation: Number on the card
      ///
      /// Locales: en, es, English
      static func txt_creditcard_number_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_creditcard_number_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_creditcard_number_placeholder"
        }

        return NSLocalizedString("txt_creditcard_number_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Number to recharge
      ///
      /// Locales: en, es, English
      static func lbl_TopUpCheckout_Number_Rechage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TopUpCheckout_Number_Rechage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TopUpCheckout_Number_Rechage"
        }

        return NSLocalizedString("lbl_TopUpCheckout_Number_Rechage", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, es, English
      static func entendido(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Entendido", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Entendido"
        }

        return NSLocalizedString("Entendido", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, es, English
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: OK, UNDERSTOOD!
      ///
      /// Locales: en, es, English
      static func lbl_UnderStanding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UnderStanding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UnderStanding"
        }

        return NSLocalizedString("lbl_UnderStanding", bundle: bundle, comment: "")
      }

      /// en translation: OPTION CATEGORY
      ///
      /// Locales: en, es, English
      static func lbl_Option_Category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Option_Category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Option_Category"
        }

        return NSLocalizedString("lbl_Option_Category", bundle: bundle, comment: "")
      }

      /// en translation: ORDER NUMBER
      ///
      /// Locales: en, es
      static func lbl_sch_detail_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sch_detail_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sch_detail_number"
        }

        return NSLocalizedString("lbl_sch_detail_number", bundle: bundle, comment: "")
      }

      /// en translation: ORDER SUMMARY
      ///
      /// Locales: en, es, English
      static func lbl_OrderSummary_Summary_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Summary_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Summary_Order"
        }

        return NSLocalizedString("lbl_OrderSummary_Summary_Order", bundle: bundle, comment: "")
      }

      /// en translation: ORDERS
      ///
      /// Locales: en, es, English
      static func lbl_order_titke(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_order_titke", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_order_titke"
        }

        return NSLocalizedString("lbl_order_titke", bundle: bundle, comment: "")
      }

      /// en translation: ORIGIN
      ///
      /// Locales: en, es
      static func lbl_Origen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Origen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Origen"
        }

        return NSLocalizedString("lbl_Origen", bundle: bundle, comment: "")
      }

      /// en translation: On this screen you can see the history of your past orders and track all your active orders. Create your account and place your first order
      ///
      /// Locales: en, es
      static func first_Order_Create_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("first_Order_Create_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "first_Order_Create_account"
        }

        return NSLocalizedString("first_Order_Create_account", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: en, es, English
      static func btn_LocalNotification_Open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_LocalNotification_Open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_LocalNotification_Open"
        }

        return NSLocalizedString("btn_LocalNotification_Open", bundle: bundle, comment: "")
      }

      /// en translation: Or begin with
      ///
      /// Locales: en, es, English
      static func lbl_RegisterPhone_StartWith(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RegisterPhone_StartWith", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RegisterPhone_StartWith"
        }

        return NSLocalizedString("lbl_RegisterPhone_StartWith", bundle: bundle, comment: "")
      }

      /// en translation: Or begin with
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhoneAlternative_StartWith(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhoneAlternative_StartWith", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhoneAlternative_StartWith"
        }

        return NSLocalizedString("lbl_StartedPhoneAlternative_StartWith", bundle: bundle, comment: "")
      }

      /// en translation: Or enter your email
      ///
      /// Locales: en, es
      static func hp_full_send_money_enter_email_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_send_money_enter_email_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_send_money_enter_email_placeholder"
        }

        return NSLocalizedString("hp_full_send_money_enter_email_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Order Complete
      ///
      /// Locales: en, es
      static func lblpartnerGoodRatings5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerGoodRatings5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerGoodRatings5"
        }

        return NSLocalizedString("lblpartnerGoodRatings5", bundle: bundle, comment: "")
      }

      /// en translation: Order again
      ///
      /// Locales: en, es, English
      static func btn_past_order_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_past_order_again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_past_order_again"
        }

        return NSLocalizedString("btn_past_order_again", bundle: bundle, comment: "")
      }

      /// en translation: Order cancellation
      ///
      /// Locales: en, es
      static func lbl_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Title"
        }

        return NSLocalizedString("lbl_Title", bundle: bundle, comment: "")
      }

      /// en translation: Order delivered
      ///
      /// Locales: en, es, English
      static func orderDeliveredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderDeliveredTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderDeliveredTitle"
        }

        return NSLocalizedString("OrderDeliveredTitle", bundle: bundle, comment: "")
      }

      /// en translation: Order detail
      ///
      /// Locales: en, es, English
      static func lbl_Detail_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Detail_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Detail_Order"
        }

        return NSLocalizedString("lbl_Detail_Order", bundle: bundle, comment: "")
      }

      /// en translation: Order in progress
      ///
      /// Locales: en, es
      static func hp_title_order_in_process(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_title_order_in_process", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_title_order_in_process"
        }

        return NSLocalizedString("hp_title_order_in_process", bundle: bundle, comment: "")
      }

      /// en translation: Order products
      ///
      /// Locales: en, es
      static func lbl_sch_detail_products(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sch_detail_products", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sch_detail_products"
        }

        return NSLocalizedString("lbl_sch_detail_products", bundle: bundle, comment: "")
      }

      /// en translation: Orders
      ///
      /// Locales: en, es
      static func title_Orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_Orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_Orders"
        }

        return NSLocalizedString("title_Orders", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en, es
      static func lbl_AddressBook_Other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Other"
        }

        return NSLocalizedString("lbl_AddressBook_Other", bundle: bundle, comment: "")
      }

      /// en translation: Our apologies!
      ///
      /// Locales: en, es, English
      static func lbl_AddUserInfo_Our_Apologies(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddUserInfo_Our_Apologies", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddUserInfo_Our_Apologies"
        }

        return NSLocalizedString("lbl_AddUserInfo_Our_Apologies", bundle: bundle, comment: "")
      }

      /// en translation: P-845678
      ///
      /// Locales: en, es, English
      static func lbl_OnTheWayRide2_P(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OnTheWayRide2_P", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OnTheWayRide2_P"
        }

        return NSLocalizedString("lbl_OnTheWayRide2_P", bundle: bundle, comment: "")
      }

      /// en translation: P-845678
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide2_P(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide2_P", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide2_P"
        }

        return NSLocalizedString("lbl_PickingRide2_P", bundle: bundle, comment: "")
      }

      /// en translation: PAY
      ///
      /// Locales: en, es, English
      static func btn_BottomButton_Pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_BottomButton_Pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_BottomButton_Pay"
        }

        return NSLocalizedString("btn_BottomButton_Pay", bundle: bundle, comment: "")
      }

      /// en translation: PAY INVOICE
      ///
      /// Locales: en, es
      static func pay_invoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pay_invoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pay_invoice"
        }

        return NSLocalizedString("pay_invoice", bundle: bundle, comment: "")
      }

      /// en translation: PAYMENT METHOD
      ///
      /// Locales: en, es, English
      static func lbl_PaymentTypeHeader_Method(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PaymentTypeHeader_Method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PaymentTypeHeader_Method"
        }

        return NSLocalizedString("lbl_PaymentTypeHeader_Method", bundle: bundle, comment: "")
      }

      /// en translation: PAYMENT METHOD
      ///
      /// Locales: en, es, English
      static func lbl_PaymentTypeSelection_Way_To_Pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PaymentTypeSelection_Way_To_Pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PaymentTypeSelection_Way_To_Pay"
        }

        return NSLocalizedString("lbl_PaymentTypeSelection_Way_To_Pay", bundle: bundle, comment: "")
      }

      /// en translation: PAYMENT METHOD
      ///
      /// Locales: en, es, English
      static func lbl_Payment_Method(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Payment_Method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Payment_Method"
        }

        return NSLocalizedString("lbl_Payment_Method", bundle: bundle, comment: "")
      }

      /// en translation: PAYMENT METHOD
      ///
      /// Locales: en, es, English
      static func lbl_Payments_Method(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Payments_Method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Payments_Method"
        }

        return NSLocalizedString("lbl_Payments_Method", bundle: bundle, comment: "")
      }

      /// en translation: PAYMENT UPDATE
      ///
      /// Locales: en, es, English
      static func lbl_Payment_Update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Payment_Update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Payment_Update"
        }

        return NSLocalizedString("lbl_Payment_Update", bundle: bundle, comment: "")
      }

      /// en translation: PAYMENT UPDATE
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentError_Update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentError_Update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentError_Update"
        }

        return NSLocalizedString("lbl_ShipmentError_Update", bundle: bundle, comment: "")
      }

      /// en translation: PENDING PAYMENT
      ///
      /// Locales: en, es, English
      static func lbl_Outstanding_Account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Outstanding_Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Outstanding_Account"
        }

        return NSLocalizedString("lbl_Outstanding_Account", bundle: bundle, comment: "")
      }

      /// en translation: PERFECT!
      ///
      /// Locales: en, es, English
      static func lbl_Perfect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Perfect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Perfect"
        }

        return NSLocalizedString("lbl_Perfect", bundle: bundle, comment: "")
      }

      /// en translation: POINT A
      ///
      /// Locales: en, es
      static func lbl_FinalizeRide_PointA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_PointA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_PointA"
        }

        return NSLocalizedString("lbl_FinalizeRide_PointA", bundle: bundle, comment: "")
      }

      /// en translation: POINT A
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentLocation_Point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentLocation_Point", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentLocation_Point"
        }

        return NSLocalizedString("lbl_ShipmentLocation_Point", bundle: bundle, comment: "")
      }

      /// en translation: POINT A - BUY WITH A LIST
      ///
      /// Locales: en, es, English
      static func lbl_PointA_Purchase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PointA_Purchase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PointA_Purchase"
        }

        return NSLocalizedString("lbl_PointA_Purchase", bundle: bundle, comment: "")
      }

      /// en translation: POINT A - ERRAND
      ///
      /// Locales: en, es, English
      static func lbl_PointA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PointA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PointA"
        }

        return NSLocalizedString("lbl_PointA", bundle: bundle, comment: "")
      }

      /// en translation: POINT B
      ///
      /// Locales: en, es
      static func lbl_FinalizeRide_PointB(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_PointB", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_PointB"
        }

        return NSLocalizedString("lbl_FinalizeRide_PointB", bundle: bundle, comment: "")
      }

      /// en translation: POINT B - BUY WITH A LIST
      ///
      /// Locales: en, es, English
      static func lbl_PointB_Purchase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PointB_Purchase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PointB_Purchase"
        }

        return NSLocalizedString("lbl_PointB_Purchase", bundle: bundle, comment: "")
      }

      /// en translation: POINT B - DELIVERY
      ///
      /// Locales: en, es, English
      static func lbl_PointB(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PointB", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PointB"
        }

        return NSLocalizedString("lbl_PointB", bundle: bundle, comment: "")
      }

      /// en translation: POINT B - ERRAND
      ///
      /// Locales: en, es, English
      static func lbl_PointB_Mandadito(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PointB_Mandadito", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PointB_Mandadito"
        }

        return NSLocalizedString("lbl_PointB_Mandadito", bundle: bundle, comment: "")
      }

      /// en translation: POINT C
      ///
      /// Locales: en, es
      static func lbl_FinalizeRide_PointC(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_PointC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_PointC"
        }

        return NSLocalizedString("lbl_FinalizeRide_PointC", bundle: bundle, comment: "")
      }

      /// en translation: POINT C
      ///
      /// Locales: en, es
      static func lbl_FinalizeRide_QualificationMSg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_QualificationMSg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_QualificationMSg"
        }

        return NSLocalizedString("lbl_FinalizeRide_QualificationMSg", bundle: bundle, comment: "")
      }

      /// en translation: POINT C - DELIVERY
      ///
      /// Locales: en, es, English
      static func lbl_PointC(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PointC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PointC"
        }

        return NSLocalizedString("lbl_PointC", bundle: bundle, comment: "")
      }

      /// en translation: PPlease confirm the list of products that we will buy for you today:
      ///
      /// Locales: en, es, English
      static func lbl_AddressInit_Comnfirm_List(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressInit_Comnfirm_List", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressInit_Comnfirm_List"
        }

        return NSLocalizedString("lbl_AddressInit_Comnfirm_List", bundle: bundle, comment: "")
      }

      /// en translation: PREDETERMINED
      ///
      /// Locales: en, es, English
      static func lbl_CreditCard_Predeterminado(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreditCard_Predeterminado", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreditCard_Predeterminado"
        }

        return NSLocalizedString("lbl_CreditCard_Predeterminado", bundle: bundle, comment: "")
      }

      /// en translation: PREFERENCE
      ///
      /// Locales: en, es, English
      static func lbl_Preference(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Preference", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Preference"
        }

        return NSLocalizedString("lbl_Preference", bundle: bundle, comment: "")
      }

      /// en translation: PRIZES
      ///
      /// Locales: en, es, English
      static func lbl_StatusProfile_Awards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StatusProfile_Awards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StatusProfile_Awards"
        }

        return NSLocalizedString("lbl_StatusProfile_Awards", bundle: bundle, comment: "")
      }

      /// en translation: PROCEED
      ///
      /// Locales: en, es
      static func process(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Process", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Process"
        }

        return NSLocalizedString("Process", bundle: bundle, comment: "")
      }

      /// en translation: PROCESS MY ORDER
      ///
      /// Locales: en, es
      static func lbl_Process_Order_Upper(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Process_Order_Upper", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Process_Order_Upper"
        }

        return NSLocalizedString("lbl_Process_Order_Upper", bundle: bundle, comment: "")
      }

      /// en translation: PROCESS MY ORDER
      ///
      /// Locales: en, es, English
      static func lbl_Process_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Process_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Process_Order"
        }

        return NSLocalizedString("lbl_Process_Order", bundle: bundle, comment: "")
      }

      /// en translation: PROCESS ORDER
      ///
      /// Locales: en, es, English
      static func btn_OrderSummary_Process_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_OrderSummary_Process_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_OrderSummary_Process_Order"
        }

        return NSLocalizedString("btn_OrderSummary_Process_Order", bundle: bundle, comment: "")
      }

      /// en translation: PROCESS ORDER
      ///
      /// Locales: en, es, English
      static func btn_ProcessOrder_Precess_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ProcessOrder_Precess_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ProcessOrder_Precess_Order"
        }

        return NSLocalizedString("btn_ProcessOrder_Precess_Order", bundle: bundle, comment: "")
      }

      /// en translation: PRODUCT AVAILABLE
      ///
      /// Locales: en, es
      static func lbl_OrderSummary_Header_Product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Header_Product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Header_Product"
        }

        return NSLocalizedString("lbl_OrderSummary_Header_Product", bundle: bundle, comment: "")
      }

      /// en translation: PRODUCT NOT AVAILABLE
      ///
      /// Locales: en, es
      static func lbl_OrderSummary_Header_Variation_Supermarket(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Header_Variation_Supermarket", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Header_Variation_Supermarket"
        }

        return NSLocalizedString("lbl_OrderSummary_Header_Variation_Supermarket", bundle: bundle, comment: "")
      }

      /// en translation: PRODUCT NOT AVAILABLE IN BRANCH
      ///
      /// Locales: en, es
      static func lbl_OrderSummary_Header_Variation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Header_Variation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Header_Variation"
        }

        return NSLocalizedString("lbl_OrderSummary_Header_Variation", bundle: bundle, comment: "")
      }

      /// en translation: PROFILE
      ///
      /// Locales: en, es, English
      static func lbl_Profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Profile"
        }

        return NSLocalizedString("lbl_Profile", bundle: bundle, comment: "")
      }

      /// en translation: Packaging
      ///
      /// Locales: en, es
      static func lblpartnerBadRatings2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerBadRatings2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerBadRatings2"
        }

        return NSLocalizedString("lblpartnerBadRatings2", bundle: bundle, comment: "")
      }

      /// en translation: Packaging
      ///
      /// Locales: en, es
      static func lblpartnerGoodRatings3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerGoodRatings3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerGoodRatings3"
        }

        return NSLocalizedString("lblpartnerGoodRatings3", bundle: bundle, comment: "")
      }

      /// en translation: Packing
      ///
      /// Locales: en, es
      static func lblhugoGoodRatings6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoGoodRatings6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoGoodRatings6"
        }

        return NSLocalizedString("lblhugoGoodRatings6", bundle: bundle, comment: "")
      }

      /// en translation: Parque Centenario
      ///
      /// Locales: en, es, English
      static func lbl_RouteNav_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RouteNav_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RouteNav_Address"
        }

        return NSLocalizedString("lbl_RouteNav_Address", bundle: bundle, comment: "")
      }

      /// en translation: Parque Maquilishuat
      ///
      /// Locales: en, es, English
      static func lbl_SearchNewAddress_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchNewAddress_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchNewAddress_Address"
        }

        return NSLocalizedString("lbl_SearchNewAddress_Address", bundle: bundle, comment: "")
      }

      /// en translation: Partner name
      ///
      /// Locales: en, es, English
      static func lbl_ProductsByCategory_Products(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductsByCategory_Products", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductsByCategory_Products"
        }

        return NSLocalizedString("lbl_ProductsByCategory_Products", bundle: bundle, comment: "")
      }

      /// en translation: Password required
      ///
      /// Locales: en, es
      static func password_Require(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password_Require", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password_Require"
        }

        return NSLocalizedString("Password_Require", bundle: bundle, comment: "")
      }

      /// en translation: Passwords do not match.
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_DonT_Match(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Don't_Match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Don't_Match"
        }

        return NSLocalizedString("lbl_CreatePassword_Don't_Match", bundle: bundle, comment: "")
      }

      /// en translation: Pay
      ///
      /// Locales: en, es
      static func hp_lbl_qr_payment_to_pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_payment_to_pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_payment_to_pay"
        }

        return NSLocalizedString("hp_lbl_qr_payment_to_pay", bundle: bundle, comment: "")
      }

      /// en translation: Pay in Pago Móvil
      ///
      /// Locales: en, es
      static func lbl_PagoMovil_Payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PagoMovil_Payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PagoMovil_Payments"
        }

        return NSLocalizedString("lbl_PagoMovil_Payments", bundle: bundle, comment: "")
      }

      /// en translation: Pay in Paypal
      ///
      /// Locales: en, es
      static func lbl_Paypal_Payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Paypal_Payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Paypal_Payments"
        }

        return NSLocalizedString("lbl_Paypal_Payments", bundle: bundle, comment: "")
      }

      /// en translation: Pay in Pipol Pay
      ///
      /// Locales: en, es
      static func lbl_Pipol_Payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Pipol_Payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Pipol_Payments"
        }

        return NSLocalizedString("lbl_Pipol_Payments", bundle: bundle, comment: "")
      }

      /// en translation: Pay in Reserve
      ///
      /// Locales: en, es
      static func lbl_Reserve_Payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Reserve_Payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Reserve_Payments"
        }

        return NSLocalizedString("lbl_Reserve_Payments", bundle: bundle, comment: "")
      }

      /// en translation: Pay in Venmo
      ///
      /// Locales: en, es
      static func lbl_Venmo_Payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Venmo_Payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Venmo_Payments"
        }

        return NSLocalizedString("lbl_Venmo_Payments", bundle: bundle, comment: "")
      }

      /// en translation: Pay in Zelle
      ///
      /// Locales: en, es
      static func lbl_Zelle_Payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Zelle_Payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Zelle_Payments"
        }

        return NSLocalizedString("lbl_Zelle_Payments", bundle: bundle, comment: "")
      }

      /// en translation: Pay in cash
      ///
      /// Locales: en, es, English
      static func lbl_Cash_Payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Cash_Payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Cash_Payments"
        }

        return NSLocalizedString("lbl_Cash_Payments", bundle: bundle, comment: "")
      }

      /// en translation: Pay with your card
      ///
      /// Locales: en, es, English
      static func lbl_Payment_By_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Payment_By_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Payment_By_Card"
        }

        return NSLocalizedString("lbl_Payment_By_Card", bundle: bundle, comment: "")
      }

      /// en translation: Paying from
      ///
      /// Locales: en, es, English
      static func playing_for(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Playing_for", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Playing_for"
        }

        return NSLocalizedString("Playing_for", bundle: bundle, comment: "")
      }

      /// en translation: Payment
      ///
      /// Locales: en, es
      static func lblhugoBadRatings4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoBadRatings4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoBadRatings4"
        }

        return NSLocalizedString("lblhugoBadRatings4", bundle: bundle, comment: "")
      }

      /// en translation: Payment Methods
      ///
      /// Locales: en, es, English
      static func payments_Method(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payments_Method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payments_Method"
        }

        return NSLocalizedString("Payments_Method", bundle: bundle, comment: "")
      }

      /// en translation: Payment of commerce
      ///
      /// Locales: en, es
      static func hp_lbl_qr_payment_commerce(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_payment_commerce", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_payment_commerce"
        }

        return NSLocalizedString("hp_lbl_qr_payment_commerce", bundle: bundle, comment: "")
      }

      /// en translation: Payment type
      ///
      /// Locales: en, es, English
      static func paymentRequiredWarningTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PaymentRequiredWarningTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PaymentRequiredWarningTitle"
        }

        return NSLocalizedString("PaymentRequiredWarningTitle", bundle: bundle, comment: "")
      }

      /// en translation: Pending balance
      ///
      /// Locales: en, es, English
      static func lbl_StatusProfile_OustStanding_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StatusProfile_OustStanding_balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StatusProfile_OustStanding_balance"
        }

        return NSLocalizedString("lbl_StatusProfile_OustStanding_balance", bundle: bundle, comment: "")
      }

      /// en translation: Pending orders
      ///
      /// Locales: en, es, English
      static func lbl_pending_order_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_pending_order_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_pending_order_title"
        }

        return NSLocalizedString("lbl_pending_order_title", bundle: bundle, comment: "")
      }

      /// en translation: Perfect!
      ///
      /// Locales: en, es, English
      static func lbl_CustomCall_Perfect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CustomCall_Perfect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CustomCall_Perfect"
        }

        return NSLocalizedString("lbl_CustomCall_Perfect", bundle: bundle, comment: "")
      }

      /// en translation: Perfect!
      ///
      /// Locales: en, es, English
      static func lbl_OrderFinished_Perfect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderFinished_Perfect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderFinished_Perfect"
        }

        return NSLocalizedString("lbl_OrderFinished_Perfect", bundle: bundle, comment: "")
      }

      /// en translation: Perfect!
      ///
      /// Locales: en, es, English
      static func lbl_UpdatePassword_Help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UpdatePassword_Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UpdatePassword_Help"
        }

        return NSLocalizedString("lbl_UpdatePassword_Help", bundle: bundle, comment: "")
      }

      /// en translation: Permissions
      ///
      /// Locales: en, es
      static func permission_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission_Text"
        }

        return NSLocalizedString("permission_Text", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, es, English
      static func txt_TopUpAdd_Enter_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_TopUpAdd_Enter_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_TopUpAdd_Enter_Number"
        }

        return NSLocalizedString("txt_TopUpAdd_Enter_Number", bundle: bundle, comment: "")
      }

      /// en translation: Pick up at location
      ///
      /// Locales: en, es
      static func lbl_Sort_TakeOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Sort_TakeOut", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Sort_TakeOut"
        }

        return NSLocalizedString("lbl_Sort_TakeOut", bundle: bundle, comment: "")
      }

      /// en translation: Pickup address
      ///
      /// Locales: en, es
      static func pickup_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pickup_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pickup_Address"
        }

        return NSLocalizedString("Pickup_Address", bundle: bundle, comment: "")
      }

      /// en translation: Place of delivery (B)
      ///
      /// Locales: en, es, English
      static func lbl_Place_Delivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Place_Delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Place_Delivery"
        }

        return NSLocalizedString("lbl_Place_Delivery", bundle: bundle, comment: "")
      }

      /// en translation: Place of start
      ///
      /// Locales: en, es, English
      static func txt_SearchAddressShipment_Starting_place(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_SearchAddressShipment_Starting_place", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_SearchAddressShipment_Starting_place"
        }

        return NSLocalizedString("txt_SearchAddressShipment_Starting_place", bundle: bundle, comment: "")
      }

      /// en translation: Place to collect (A)
      ///
      /// Locales: en, es, English
      static func lbl_PaymentLocation_Pickup_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PaymentLocation_Pickup_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PaymentLocation_Pickup_Location"
        }

        return NSLocalizedString("lbl_PaymentLocation_Pickup_Location", bundle: bundle, comment: "")
      }

      /// en translation: Platform
      ///
      /// Locales: en, es
      static func lblhugoGoodRatings4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoGoodRatings4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoGoodRatings4"
        }

        return NSLocalizedString("lblhugoGoodRatings4", bundle: bundle, comment: "")
      }

      /// en translation: Platform
      ///
      /// Locales: en, es
      static func lblhugoNamRatingDelivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoNamRatingDelivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoNamRatingDelivery"
        }

        return NSLocalizedString("lblhugoNamRatingDelivery", bundle: bundle, comment: "")
      }

      /// en translation: Platform
      ///
      /// Locales: en, es, English
      static func lbl_RatingHeader_Platform(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingHeader_Platform", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingHeader_Platform"
        }

        return NSLocalizedString("lbl_RatingHeader_Platform", bundle: bundle, comment: "")
      }

      /// en translation: Please allow access to the camera to scan the credit card
      ///
      /// Locales: en, es, English
      static func accessToCameraExplanation2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AccessToCameraExplanation2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AccessToCameraExplanation2"
        }

        return NSLocalizedString("AccessToCameraExplanation2", bundle: bundle, comment: "")
      }

      /// en translation: Please complete the following information
      ///
      /// Locales: en, es
      static func lbl_Step3_Info_Finish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step3_Info_Finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step3_Info_Finish"
        }

        return NSLocalizedString("lbl_Step3_Info_Finish", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid amount for the change
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_Valid_QTY(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_Valid_QTY", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_Valid_QTY"
        }

        return NSLocalizedString("alert_ProcessOrder_Valid_QTY", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid amount for the change.
      ///
      /// Locales: en, English
      static func valid_Amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Valid_Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Valid_Amount"
        }

        return NSLocalizedString("Valid_Amount", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the code you want to use.
      ///
      /// Locales: en, es, English
      static func enter_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter_Code"
        }

        return NSLocalizedString("Enter_Code", bundle: bundle, comment: "")
      }

      /// en translation: Please input your temporary code
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_title"
        }

        return NSLocalizedString("hp_full_reset_pin_title", bundle: bundle, comment: "")
      }

      /// en translation: Please make sure the fields are not empty
      ///
      /// Locales: en, es, English
      static func reqiured_Msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reqiured_Msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reqiured_Msg"
        }

        return NSLocalizedString("Reqiured_Msg", bundle: bundle, comment: "")
      }

      /// en translation: Please rate your experience
      ///
      /// Locales: en, es
      static func lbl_FinalizeGoodRating_Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeGoodRating_Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeGoodRating_Subtitle"
        }

        return NSLocalizedString("lbl_FinalizeGoodRating_Subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Please select a date and time to schedule the order
      ///
      /// Locales: en, es
      static func alert_sch_selectdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_sch_selectdate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_sch_selectdate"
        }

        return NSLocalizedString("alert_sch_selectdate", bundle: bundle, comment: "")
      }

      /// en translation: Please select one of our options
      ///
      /// Locales: en, es, English
      static func lbl_Please_Select_One(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Please_Select_One", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Please_Select_One"
        }

        return NSLocalizedString("lbl_Please_Select_One", bundle: bundle, comment: "")
      }

      /// en translation: Please select the area where you are.
      ///
      /// Locales: en, es, English
      static func lbl_Territory_Area_Selcet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Territory_Area_Selcet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Territory_Area_Selcet"
        }

        return NSLocalizedString("lbl_Territory_Area_Selcet", bundle: bundle, comment: "")
      }

      /// en translation: Please select the subject of your request.
      ///
      /// Locales: en, es, English
      static func lbl_CallRequest_Select_Subject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CallRequest_Select_Subject", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CallRequest_Select_Subject"
        }

        return NSLocalizedString("lbl_CallRequest_Select_Subject", bundle: bundle, comment: "")
      }

      /// en translation: Please wait
      ///
      /// Locales: en, es, English
      static func please_Wait(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please_Wait", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please_Wait"
        }

        return NSLocalizedString("Please_Wait", bundle: bundle, comment: "")
      }

      /// en translation: Points of participating banks were consulted
      ///
      /// Locales: en, es
      static func point_bank(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Point_bank", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Point_bank"
        }

        return NSLocalizedString("Point_bank", bundle: bundle, comment: "")
      }

      /// en translation: Portion
      ///
      /// Locales: en, es
      static func lblpartnerBadRatings4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerBadRatings4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerBadRatings4"
        }

        return NSLocalizedString("lblpartnerBadRatings4", bundle: bundle, comment: "")
      }

      /// en translation: Portion
      ///
      /// Locales: en, es
      static func lblpartnerGoodRatings2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerGoodRatings2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerGoodRatings2"
        }

        return NSLocalizedString("lblpartnerGoodRatings2", bundle: bundle, comment: "")
      }

      /// en translation: Preferences
      ///
      /// Locales: en, es, English
      static func lbl_ProfileOptions_Preferences(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProfileOptions_Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProfileOptions_Preferences"
        }

        return NSLocalizedString("lbl_ProfileOptions_Preferences", bundle: bundle, comment: "")
      }

      /// en translation: Preferences
      ///
      /// Locales: en, es, English
      static func preferences(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Preferences"
        }

        return NSLocalizedString("Preferences", bundle: bundle, comment: "")
      }

      /// en translation: Preparing search…
      ///
      /// Locales: en, es, English
      static func lbl_Preparing_Search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Preparing_Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Preparing_Search"
        }

        return NSLocalizedString("lbl_Preparing_Search", bundle: bundle, comment: "")
      }

      /// en translation: Presentation
      ///
      /// Locales: en, es
      static func lbldriverGoodRatings4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverGoodRatings4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverGoodRatings4"
        }

        return NSLocalizedString("lbldriverGoodRatings4", bundle: bundle, comment: "")
      }

      /// en translation: Price
      ///
      /// Locales: en, es
      static func lblpartnerGoodRatings4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerGoodRatings4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerGoodRatings4"
        }

        return NSLocalizedString("lblpartnerGoodRatings4", bundle: bundle, comment: "")
      }

      /// en translation: Price
      ///
      /// Locales: en, es, English
      static func lbl_Sort_Price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Sort_Price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Sort_Price"
        }

        return NSLocalizedString("lbl_Sort_Price", bundle: bundle, comment: "")
      }

      /// en translation: Privacy and Security Policy
      ///
      /// Locales: en, es, English
      static func policy_Security(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Policy_Security", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Policy_Security"
        }

        return NSLocalizedString("Policy_Security", bundle: bundle, comment: "")
      }

      /// en translation: Prizes
      ///
      /// Locales: en, es
      static func ct_prizes_tag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ct_prizes_tag", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ct_prizes_tag"
        }

        return NSLocalizedString("ct_prizes_tag", bundle: bundle, comment: "")
      }

      /// en translation: Prizes
      ///
      /// Locales: en, es, English
      static func lbl_Promos_Awards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Promos_Awards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Promos_Awards"
        }

        return NSLocalizedString("lbl_Promos_Awards", bundle: bundle, comment: "")
      }

      /// en translation: Process order
      ///
      /// Locales: en, es, English
      static func tokenLoadNewOrderTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokenLoadNewOrderTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokenLoadNewOrderTitle"
        }

        return NSLocalizedString("tokenLoadNewOrderTitle", bundle: bundle, comment: "")
      }

      /// en translation: Product
      ///
      /// Locales: en, es
      static func lbl_Title_Type_Product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Title_Type_Product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Title_Type_Product"
        }

        return NSLocalizedString("lbl_Title_Type_Product", bundle: bundle, comment: "")
      }

      /// en translation: Product Handling
      ///
      /// Locales: en, es
      static func lbldriverBadRatings4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverBadRatings4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverBadRatings4"
        }

        return NSLocalizedString("lbldriverBadRatings4", bundle: bundle, comment: "")
      }

      /// en translation: Product name
      ///
      /// Locales: en, es, English
      static func lbl_OrderSummary_Product_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Product_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Product_Name"
        }

        return NSLocalizedString("lbl_OrderSummary_Product_Name", bundle: bundle, comment: "")
      }

      /// en translation: Product name
      ///
      /// Locales: en, es, English
      static func lbl_ProductDetail_Product_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductDetail_Product_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductDetail_Product_Name"
        }

        return NSLocalizedString("lbl_ProductDetail_Product_Name", bundle: bundle, comment: "")
      }

      /// en translation: Product not avilable
      ///
      /// Locales: en, es, English
      static func productNotAvailableTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ProductNotAvailableTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ProductNotAvailableTitle"
        }

        return NSLocalizedString("ProductNotAvailableTitle", bundle: bundle, comment: "")
      }

      /// en translation: Profile saved
      ///
      /// Locales: en, es, English
      static func profileSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ProfileSaved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ProfileSaved"
        }

        return NSLocalizedString("ProfileSaved", bundle: bundle, comment: "")
      }

      /// en translation: Progress of your profile
      ///
      /// Locales: en, es, English
      static func progress_Profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Progress_Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Progress_Profile"
        }

        return NSLocalizedString("Progress_Profile", bundle: bundle, comment: "")
      }

      /// en translation: Progress of your profile (2 out of 5)
      ///
      /// Locales: en, es, English
      static func lbl_InfoUser_Progress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_InfoUser_Progress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_InfoUser_Progress"
        }

        return NSLocalizedString("lbl_InfoUser_Progress", bundle: bundle, comment: "")
      }

      /// en translation: Promotional code
      ///
      /// Locales: en, es, English
      static func promotional_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Promotional_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Promotional_Code"
        }

        return NSLocalizedString("Promotional_Code", bundle: bundle, comment: "")
      }

      /// en translation: Promotions
      ///
      /// Locales: en, es
      static func ct_promos_tag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ct_promos_tag", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ct_promos_tag"
        }

        return NSLocalizedString("ct_promos_tag", bundle: bundle, comment: "")
      }

      /// en translation: Promotions
      ///
      /// Locales: en, es
      static func lbl_Promo_Cell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Promo_Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Promo_Cell"
        }

        return NSLocalizedString("lbl_Promo_Cell", bundle: bundle, comment: "")
      }

      /// en translation: Qualification
      ///
      /// Locales: en, es, English
      static func lbl_Sort_Callsification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Sort_Callsification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Sort_Callsification"
        }

        return NSLocalizedString("lbl_Sort_Callsification", bundle: bundle, comment: "")
      }

      /// en translation: Qualification required
      ///
      /// Locales: en, es
      static func lbl_FinalizeGoodRating_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeGoodRating_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeGoodRating_Title"
        }

        return NSLocalizedString("lbl_FinalizeGoodRating_Title", bundle: bundle, comment: "")
      }

      /// en translation: Qualification required 
      ///
      /// Locales: en, es
      static func lbl_FinalizeRide_QualificationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_QualificationTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_QualificationTitle"
        }

        return NSLocalizedString("lbl_FinalizeRide_QualificationTitle", bundle: bundle, comment: "")
      }

      /// en translation: Quality
      ///
      /// Locales: en, es
      static func lblpartnerBadRatings1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerBadRatings1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerBadRatings1"
        }

        return NSLocalizedString("lblpartnerBadRatings1", bundle: bundle, comment: "")
      }

      /// en translation: Quality
      ///
      /// Locales: en, es
      static func lblpartnerGoodRatings1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerGoodRatings1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerGoodRatings1"
        }

        return NSLocalizedString("lblpartnerGoodRatings1", bundle: bundle, comment: "")
      }

      /// en translation: Quantity
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_quantity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_quantity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_quantity"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_quantity", bundle: bundle, comment: "")
      }

      /// en translation: Quantity to request
      ///
      /// Locales: en, es
      static func hp_lbl_qr_payment_qty_request(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_payment_qty_request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_payment_qty_request"
        }

        return NSLocalizedString("hp_lbl_qr_payment_qty_request", bundle: bundle, comment: "")
      }

      /// en translation: R (max 12)
      ///
      /// Locales: en, es, English
      static func lbl_Option_R(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Option_R", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Option_R"
        }

        return NSLocalizedString("lbl_Option_R", bundle: bundle, comment: "")
      }

      /// en translation: RB
      ///
      /// Locales: en, es, English
      static func lbl_InfoUser_Inatial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_InfoUser_Inatial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_InfoUser_Inatial"
        }

        return NSLocalizedString("lbl_InfoUser_Inatial", bundle: bundle, comment: "")
      }

      /// en translation: READY
      ///
      /// Locales: en, es, English
      static func btn_ConfirmationBottom_Ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ConfirmationBottom_Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ConfirmationBottom_Ready"
        }

        return NSLocalizedString("btn_ConfirmationBottom_Ready", bundle: bundle, comment: "")
      }

      /// en translation: READY
      ///
      /// Locales: en, es, English
      static func btn_PlaceMarker_Ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_PlaceMarker_Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_PlaceMarker_Ready"
        }

        return NSLocalizedString("btn_PlaceMarker_Ready", bundle: bundle, comment: "")
      }

      /// en translation: READY
      ///
      /// Locales: en, es, English
      static func lbl_Ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Ready"
        }

        return NSLocalizedString("lbl_Ready", bundle: bundle, comment: "")
      }

      /// en translation: RECENT TRIPS
      ///
      /// Locales: en, es
      static func recent_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Recent_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Recent_Trip"
        }

        return NSLocalizedString("Recent_Trip", bundle: bundle, comment: "")
      }

      /// en translation: RECENT TRIPS
      ///
      /// Locales: en, es, English
      static func lbl_Recent_Tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Recent_Tips", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Recent_Tips"
        }

        return NSLocalizedString("lbl_Recent_Tips", bundle: bundle, comment: "")
      }

      /// en translation: RECENT TRIPS
      ///
      /// Locales: en, es, English
      static func lbl_Recent_trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Recent_trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Recent_trip"
        }

        return NSLocalizedString("lbl_Recent_trip", bundle: bundle, comment: "")
      }

      /// en translation: RECENTS
      ///
      /// Locales: en, es
      static func lbl_service_recent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_service_recent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_service_recent"
        }

        return NSLocalizedString("lbl_service_recent", bundle: bundle, comment: "")
      }

      /// en translation: RECOVER ACCOUNT
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_locked_account_recover_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_locked_account_recover_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_locked_account_recover_button"
        }

        return NSLocalizedString("hp_full_reset_pin_locked_account_recover_button", bundle: bundle, comment: "")
      }

      /// en translation: RECOVER PASSWORD
      ///
      /// Locales: en, es
      static func btn_ChanelRecover_Recover(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ChanelRecover_Recover", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ChanelRecover_Recover"
        }

        return NSLocalizedString("btn_ChanelRecover_Recover", bundle: bundle, comment: "")
      }

      /// en translation: RECOVER PASSWORD
      ///
      /// Locales: en, es
      static func lbl_Step2_Recover_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Recover_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Recover_Password"
        }

        return NSLocalizedString("lbl_Step2_Recover_Password", bundle: bundle, comment: "")
      }

      /// en translation: REMEMBER LATER
      ///
      /// Locales: en, es, English
      static func btn_ConfirmOutstanding_Remember_Later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ConfirmOutstanding_Remember_Later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ConfirmOutstanding_Remember_Later"
        }

        return NSLocalizedString("btn_ConfirmOutstanding_Remember_Later", bundle: bundle, comment: "")
      }

      /// en translation: REQUEST HELP WITH THIS ORDER
      ///
      /// Locales: en, es, English
      static func btn_past_order_request_help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_past_order_request_help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_past_order_request_help"
        }

        return NSLocalizedString("btn_past_order_request_help", bundle: bundle, comment: "")
      }

      /// en translation: REQUEST SENT
      ///
      /// Locales: en, es, English
      static func lbl_OrderFinished_Request_Sent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderFinished_Request_Sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderFinished_Request_Sent"
        }

        return NSLocalizedString("lbl_OrderFinished_Request_Sent", bundle: bundle, comment: "")
      }

      /// en translation: REQUEST VEHICLE
      ///
      /// Locales: en, es, English
      static func lbl_Type_Request_Vehicle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Type_Request_Vehicle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Type_Request_Vehicle"
        }

        return NSLocalizedString("lbl_Type_Request_Vehicle", bundle: bundle, comment: "")
      }

      /// en translation: RESEND
      ///
      /// Locales: en, es, English
      static func btn_ValidateRecoverCode_ReSend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidateRecoverCode_ReSend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidateRecoverCode_ReSend"
        }

        return NSLocalizedString("btn_ValidateRecoverCode_ReSend", bundle: bundle, comment: "")
      }

      /// en translation: RESEND CODE
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_resend_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_resend_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_resend_code"
        }

        return NSLocalizedString("hp_full_reset_pin_resend_code", bundle: bundle, comment: "")
      }

      /// en translation: RESEND SMS.
      ///
      /// Locales: en, es, English
      static func btn_ValidatePhone_Forward_Sms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidatePhone_Forward_Sms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidatePhone_Forward_Sms"
        }

        return NSLocalizedString("btn_ValidatePhone_Forward_Sms", bundle: bundle, comment: "")
      }

      /// en translation: RESULTS
      ///
      /// Locales: en, es
      static func lbl_Title_Search_Result(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Title_Search_Result", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Title_Search_Result"
        }

        return NSLocalizedString("lbl_Title_Search_Result", bundle: bundle, comment: "")
      }

      /// en translation: RETRY
      ///
      /// Locales: en, es, English
      static func retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Retry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Retry"
        }

        return NSLocalizedString("Retry", bundle: bundle, comment: "")
      }

      /// en translation: REWARD TO
      ///
      /// Locales: en, es, English
      static func btn_FinalizeGoodRating_Reward_To(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_FinalizeGoodRating_Reward_To", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_FinalizeGoodRating_Reward_To"
        }

        return NSLocalizedString("btn_FinalizeGoodRating_Reward_To", bundle: bundle, comment: "")
      }

      /// en translation: RIGHT
      ///
      /// Locales: en, es
      static func lbl_NewLogin_Right(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_NewLogin_Right", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_NewLogin_Right"
        }

        return NSLocalizedString("lbl_NewLogin_Right", bundle: bundle, comment: "")
      }

      /// en translation: RIGHT
      ///
      /// Locales: en, es, English
      static func btn_Right(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Right", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Right"
        }

        return NSLocalizedString("btn_Right", bundle: bundle, comment: "")
      }

      /// en translation: ROUTE
      ///
      /// Locales: en, es, English
      static func lbl_Route(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Route", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Route"
        }

        return NSLocalizedString("lbl_Route", bundle: bundle, comment: "")
      }

      /// en translation: Rating
      ///
      /// Locales: en, es
      static func partner_header_rating_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("partner_header_rating_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "partner_header_rating_title"
        }

        return NSLocalizedString("partner_header_rating_title", bundle: bundle, comment: "")
      }

      /// en translation: Raúl
      ///
      /// Locales: en, es, English
      static func lbl_DriverDetail_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DriverDetail_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DriverDetail_Name"
        }

        return NSLocalizedString("lbl_DriverDetail_Name", bundle: bundle, comment: "")
      }

      /// en translation: Re: problems with my app
      ///
      /// Locales: en, es, English
      static func lbl_HelpZendesk_Problem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_HelpZendesk_Problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_HelpZendesk_Problem"
        }

        return NSLocalizedString("lbl_HelpZendesk_Problem", bundle: bundle, comment: "")
      }

      /// en translation: Ready
      ///
      /// Locales: en, English
      static func lbl_Search_GpsLocation_Ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Search_GpsLocation_Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Search_GpsLocation_Ready"
        }

        return NSLocalizedString("lbl_Search_GpsLocation_Ready", bundle: bundle, comment: "")
      }

      /// en translation: Ready
      ///
      /// Locales: en, es, English
      static func listoLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ListoLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ListoLabel"
        }

        return NSLocalizedString("ListoLabel", bundle: bundle, comment: "")
      }

      /// en translation: Ready! In a few moments we will call you on the registered phone number
      ///
      /// Locales: en, es, English
      static func helpRequested(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helpRequested", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helpRequested"
        }

        return NSLocalizedString("helpRequested", bundle: bundle, comment: "")
      }

      /// en translation: Receive code by SMS
      ///
      /// Locales: en, es
      static func lbl_step1_send_sms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_step1_send_sms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_step1_send_sms"
        }

        return NSLocalizedString("lbl_step1_send_sms", bundle: bundle, comment: "")
      }

      /// en translation: Receive code by WhatsApp
      ///
      /// Locales: en, es
      static func lbl_step1_send_whatsapp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_step1_send_whatsapp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_step1_send_whatsapp"
        }

        return NSLocalizedString("lbl_step1_send_whatsapp", bundle: bundle, comment: "")
      }

      /// en translation: Recent
      ///
      /// Locales: en, es
      static func lbl_Title_Type_Recent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Title_Type_Recent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Title_Type_Recent"
        }

        return NSLocalizedString("lbl_Title_Type_Recent", bundle: bundle, comment: "")
      }

      /// en translation: Recharge total
      ///
      /// Locales: en, es, English
      static func lbl_TopUpCheckout_Total_Rechage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TopUpCheckout_Total_Rechage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TopUpCheckout_Total_Rechage"
        }

        return NSLocalizedString("lbl_TopUpCheckout_Total_Rechage", bundle: bundle, comment: "")
      }

      /// en translation: Recidencial Miramar, Poligono C, Casa #137
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide2_Job_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide2_Job_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide2_Job_Address"
        }

        return NSLocalizedString("lbl_PickingRide2_Job_Address", bundle: bundle, comment: "")
      }

      /// en translation: Recidencial Miramar, Poligono C, Casa #137 #56789
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide2_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide2_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide2_Address"
        }

        return NSLocalizedString("lbl_PickingRide2_Address", bundle: bundle, comment: "")
      }

      /// en translation: Recidencial Miramar, Poligono C, Casa #137 #56789
      ///
      /// Locales: en, es, English
      static func lbl_RouteItem_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RouteItem_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RouteItem_Address"
        }

        return NSLocalizedString("lbl_RouteItem_Address", bundle: bundle, comment: "")
      }

      /// en translation: Recommended Shops
      ///
      /// Locales: en, es, English
      static func lbl_SearchTable_Shop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchTable_Shop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchTable_Shop"
        }

        return NSLocalizedString("lbl_SearchTable_Shop", bundle: bundle, comment: "")
      }

      /// en translation: Recommended options
      ///
      /// Locales: en, es, English
      static func lbl_SearchTable_Option(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchTable_Option", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchTable_Option"
        }

        return NSLocalizedString("lbl_SearchTable_Option", bundle: bundle, comment: "")
      }

      /// en translation: Redeem code
      ///
      /// Locales: en, es, English
      static func redeemLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RedeemLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RedeemLabel"
        }

        return NSLocalizedString("RedeemLabel", bundle: bundle, comment: "")
      }

      /// en translation: Reference identifier
      ///
      /// Locales: en, es, English
      static func lbl_BillPayService_Reference_Identifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_BillPayService_Reference_Identifi", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_BillPayService_Reference_Identifi"
        }

        return NSLocalizedString("lbl_BillPayService_Reference_Identifi", bundle: bundle, comment: "")
      }

      /// en translation: Reference identifier
      ///
      /// Locales: en, es, English
      static func lbl_PayServiceDetailHistory_Identifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PayServiceDetailHistory_Identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PayServiceDetailHistory_Identifier"
        }

        return NSLocalizedString("lbl_PayServiceDetailHistory_Identifier", bundle: bundle, comment: "")
      }

      /// en translation: Reference number
      ///
      /// Locales: en, es, English
      static func lbl_Reference_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Reference_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Reference_Number"
        }

        return NSLocalizedString("lbl_Reference_Number", bundle: bundle, comment: "")
      }

      /// en translation: Reference number
      ///
      /// Locales: en, es, English
      static func lbl_TopUpDetailHistory_Refence_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TopUpDetailHistory_Refence_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TopUpDetailHistory_Refence_Number"
        }

        return NSLocalizedString("lbl_TopUpDetailHistory_Refence_Number", bundle: bundle, comment: "")
      }

      /// en translation: Reference point
      ///
      /// Locales: en, es
      static func lbl_AddressBook_Reference_Point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Reference_Point", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Reference_Point"
        }

        return NSLocalizedString("lbl_AddressBook_Reference_Point", bundle: bundle, comment: "")
      }

      /// en translation: Reference:
      ///
      /// Locales: en, es
      static func lbl_AddressBook_Reference(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_Reference", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_Reference"
        }

        return NSLocalizedString("lbl_AddressBook_Reference", bundle: bundle, comment: "")
      }

      /// en translation: Refund Policies
      ///
      /// Locales: en, es, English
      static func refund_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Refund_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Refund_policy"
        }

        return NSLocalizedString("Refund_policy", bundle: bundle, comment: "")
      }

      /// en translation: Refund to the card
      ///
      /// Locales: en, es
      static func lbl_Program(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Program", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Program"
        }

        return NSLocalizedString("lbl_Program", bundle: bundle, comment: "")
      }

      /// en translation: Refuse
      ///
      /// Locales: en, es
      static func hp_lbl_qr_payment_to_refuse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_payment_to_refuse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_payment_to_refuse"
        }

        return NSLocalizedString("hp_lbl_qr_payment_to_refuse", bundle: bundle, comment: "")
      }

      /// en translation: Remember any change required in cash will be given in Yummy Credits within the wallet of your profile for future orders. You can obtain your credit by messaging us on the Chat within the app once you recive your order. Remember to give us your order number.
      ///
      /// Locales: en, es
      static func lbl_Alert_Cash(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Alert_Cash", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Alert_Cash"
        }

        return NSLocalizedString("lbl_Alert_Cash", bundle: bundle, comment: "")
      }

      /// en translation: Remember that you'll receive in this email the invoice of each purchase in Hugo.
      ///
      /// Locales: en, es, English
      static func lbl_ValidateEmail_Remember_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateEmail_Remember_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateEmail_Remember_Text"
        }

        return NSLocalizedString("lbl_ValidateEmail_Remember_Text", bundle: bundle, comment: "")
      }

      /// en translation: Remove
      ///
      /// Locales: en, es, English
      static func actionDeleteLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ActionDeleteLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ActionDeleteLabel"
        }

        return NSLocalizedString("ActionDeleteLabel", bundle: bundle, comment: "")
      }

      /// en translation: Remove Product
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_remove_product_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_remove_product_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_remove_product_title"
        }

        return NSLocalizedString("alert_ProcessOrder_remove_product_title", bundle: bundle, comment: "")
      }

      /// en translation: Request a call
      ///
      /// Locales: en, es, English
      static func request_Call(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Request_Call", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Request_Call"
        }

        return NSLocalizedString("Request_Call", bundle: bundle, comment: "")
      }

      /// en translation: Request for help
      ///
      /// Locales: en, es
      static func request_Help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request_Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request_Help"
        }

        return NSLocalizedString("request_Help", bundle: bundle, comment: "")
      }

      /// en translation: Required
      ///
      /// Locales: en, es
      static func hp_CashInMoneyIncome_AmountRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashInMoneyIncome_AmountRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashInMoneyIncome_AmountRequired"
        }

        return NSLocalizedString("hp_CashInMoneyIncome_AmountRequired", bundle: bundle, comment: "")
      }

      /// en translation: Required
      ///
      /// Locales: en, es, English
      static func lbl_EmailInfo_requiretext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EmailInfo_requiretext", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EmailInfo_requiretext"
        }

        return NSLocalizedString("lbl_EmailInfo_requiretext", bundle: bundle, comment: "")
      }

      /// en translation: Required Options
      ///
      /// Locales: en, es, English
      static func orderRequiredOptionsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderRequiredOptionsTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderRequiredOptionsTitle"
        }

        return NSLocalizedString("OrderRequiredOptionsTitle", bundle: bundle, comment: "")
      }

      /// en translation: Required field
      ///
      /// Locales: en, es
      static func required_fields(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Required_fields", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Required_fields"
        }

        return NSLocalizedString("Required_fields", bundle: bundle, comment: "")
      }

      /// en translation: Required field
      ///
      /// Locales: en, es, English
      static func required_Fields(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Required_Fields", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Required_Fields"
        }

        return NSLocalizedString("Required_Fields", bundle: bundle, comment: "")
      }

      /// en translation: Required fields
      ///
      /// Locales: en, es, English
      static func reqiured_Field(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reqiured_Field", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reqiured_Field"
        }

        return NSLocalizedString("Reqiured_Field", bundle: bundle, comment: "")
      }

      /// en translation: Required pending fields
      ///
      /// Locales: en, es
      static func reqiure_Field_Pending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reqiure_Field_Pending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reqiure_Field_Pending"
        }

        return NSLocalizedString("Reqiure_Field_Pending", bundle: bundle, comment: "")
      }

      /// en translation: Residencial Miramar, Poligono G, casa #137
      ///
      /// Locales: en, es, English
      static func lbl_RideSummaryArriving_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideSummaryArriving_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideSummaryArriving_Address"
        }

        return NSLocalizedString("lbl_RideSummaryArriving_Address", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant Mata 
      ///
      /// Locales: en, es, English
      static func lbl_PartnerProduct_Restaurant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerProduct_Restaurant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerProduct_Restaurant"
        }

        return NSLocalizedString("lbl_PartnerProduct_Restaurant", bundle: bundle, comment: "")
      }

      /// en translation: Reward your Hugo
      ///
      /// Locales: en, es, English
      static func lbl_Reward_Hugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Reward_Hugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Reward_Hugo"
        }

        return NSLocalizedString("lbl_Reward_Hugo", bundle: bundle, comment: "")
      }

      /// en translation: Reward your driver.
      ///
      /// Locales: en, es, English
      static func lbl_DriverTip_Reward_Driver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DriverTip_Reward_Driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DriverTip_Reward_Driver"
        }

        return NSLocalizedString("lbl_DriverTip_Reward_Driver", bundle: bundle, comment: "")
      }

      /// en translation: Reward your driver.
      ///
      /// Locales: en, es, English
      static func lbl_RatingTip_Reward(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingTip_Reward", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingTip_Reward"
        }

        return NSLocalizedString("lbl_RatingTip_Reward", bundle: bundle, comment: "")
      }

      /// en translation: Roberto Centeno
      ///
      /// Locales: en, es, English
      static func lbl_RatingView_Driver_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingView_Driver_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingView_Driver_Name"
        }

        return NSLocalizedString("lbl_RatingView_Driver_Name", bundle: bundle, comment: "")
      }

      /// en translation: Roberto Centeno
      ///
      /// Locales: en, es, English
      static func lbl_driver_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_driver_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_driver_name"
        }

        return NSLocalizedString("lbl_driver_name", bundle: bundle, comment: "")
      }

      /// en translation: Rodrigo Antonio Bazan
      ///
      /// Locales: en, es, English
      static func lbl_CreditCard_Bazan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreditCard_Bazan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreditCard_Bazan"
        }

        return NSLocalizedString("lbl_CreditCard_Bazan", bundle: bundle, comment: "")
      }

      /// en translation: Round trip
      ///
      /// Locales: en, es, English
      static func btn_AddressInit_Round_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_AddressInit_Round_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_AddressInit_Round_Trip"
        }

        return NSLocalizedString("btn_AddressInit_Round_Trip", bundle: bundle, comment: "")
      }

      /// en translation: Round trip
      ///
      /// Locales: en, es, English
      static func lbl_Round_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Round_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Round_Trip"
        }

        return NSLocalizedString("lbl_Round_Trip", bundle: bundle, comment: "")
      }

      /// en translation: Route update!
      ///
      /// Locales: en, es, English
      static func lbl_ChangeDestination_Route_Update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ChangeDestination_Route_Update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChangeDestination_Route_Update"
        }

        return NSLocalizedString("lbl_ChangeDestination_Route_Update", bundle: bundle, comment: "")
      }

      /// en translation: SAVE
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Save"
        }

        return NSLocalizedString("lbl_CreatePassword_Save", bundle: bundle, comment: "")
      }

      /// en translation: SAVE
      ///
      /// Locales: en, es
      static func receipt_configuration_create_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_create_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_create_button_title"
        }

        return NSLocalizedString("receipt_configuration_create_button_title", bundle: bundle, comment: "")
      }

      /// en translation: SAVE
      ///
      /// Locales: en, es, English
      static func btn_AddUserInfo_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_AddUserInfo_save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_AddUserInfo_save"
        }

        return NSLocalizedString("btn_AddUserInfo_save", bundle: bundle, comment: "")
      }

      /// en translation: SAVE
      ///
      /// Locales: en, es, English
      static func btn_BasicInfo_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_BasicInfo_save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_BasicInfo_save"
        }

        return NSLocalizedString("btn_BasicInfo_save", bundle: bundle, comment: "")
      }

      /// en translation: SAVE
      ///
      /// Locales: en, es, English
      static func btn_EmailInfo_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_EmailInfo_save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_EmailInfo_save"
        }

        return NSLocalizedString("btn_EmailInfo_save", bundle: bundle, comment: "")
      }

      /// en translation: SAVE
      ///
      /// Locales: en, es, English
      static func btn_Preferences_Save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Preferences_Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Preferences_Save"
        }

        return NSLocalizedString("btn_Preferences_Save", bundle: bundle, comment: "")
      }

      /// en translation: SAVE CHANGES
      ///
      /// Locales: en, es, English
      static func save_Changes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save_Changes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save_Changes"
        }

        return NSLocalizedString("Save_Changes", bundle: bundle, comment: "")
      }

      /// en translation: SAVE PASSWORD.
      ///
      /// Locales: en, es, English
      static func btn_CreateFBPassword_Save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_CreateFBPassword_Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_CreateFBPassword_Save"
        }

        return NSLocalizedString("btn_CreateFBPassword_Save", bundle: bundle, comment: "")
      }

      /// en translation: SAVE PASSWORD.
      ///
      /// Locales: en, es, English
      static func btn_UpdatePassword_Save_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_UpdatePassword_Save_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_UpdatePassword_Save_Password"
        }

        return NSLocalizedString("btn_UpdatePassword_Save_Password", bundle: bundle, comment: "")
      }

      /// en translation: SCHEDULE
      ///
      /// Locales: en, es, English
      static func lbl_PartnerProduct_Schedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerProduct_Schedule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerProduct_Schedule"
        }

        return NSLocalizedString("lbl_PartnerProduct_Schedule", bundle: bundle, comment: "")
      }

      /// en translation: SCHEDULED
      ///
      /// Locales: en, es
      static func lbl_Schedule_orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Schedule_orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Schedule_orders"
        }

        return NSLocalizedString("lbl_Schedule_orders", bundle: bundle, comment: "")
      }

      /// en translation: SCHEDULED ORDER
      ///
      /// Locales: en, es
      static func lbl_sch_detail_sch_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sch_detail_sch_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sch_detail_sch_order"
        }

        return NSLocalizedString("lbl_sch_detail_sch_order", bundle: bundle, comment: "")
      }

      /// en translation: SEARCH
      ///
      /// Locales: en, es
      static func lbl_Title_Search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Title_Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Title_Search"
        }

        return NSLocalizedString("lbl_Title_Search", bundle: bundle, comment: "")
      }

      /// en translation: SEARCH ADDRESS
      ///
      /// Locales: en, es, English
      static func lbl_Search_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Search_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Search_address"
        }

        return NSLocalizedString("lbl_Search_address", bundle: bundle, comment: "")
      }

      /// en translation: SEARCH RESULTS
      ///
      /// Locales: en, es
      static func search_result(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search_result", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search_result"
        }

        return NSLocalizedString("Search_result", bundle: bundle, comment: "")
      }

      /// en translation: SECURITY
      ///
      /// Locales: en, es, English
      static func lbl_Preferences_Security(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Preferences_Security", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Preferences_Security"
        }

        return NSLocalizedString("lbl_Preferences_Security", bundle: bundle, comment: "")
      }

      /// en translation: SECURITY
      ///
      /// Locales: en, es, English
      static func lbl_Security(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Security", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Security"
        }

        return NSLocalizedString("lbl_Security", bundle: bundle, comment: "")
      }

      /// en translation: SEE ALL
      ///
      /// Locales: en, es
      static func lbl_see_all_services(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_see_all_services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_see_all_services"
        }

        return NSLocalizedString("lbl_see_all_services", bundle: bundle, comment: "")
      }

      /// en translation: SEE MY ORDER
      ///
      /// Locales: en, es, English
      static func lbl_ProductView_ViewOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductView_ViewOrder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductView_ViewOrder"
        }

        return NSLocalizedString("lbl_ProductView_ViewOrder", bundle: bundle, comment: "")
      }

      /// en translation: SEE MY ORDER
      ///
      /// Locales: en, es, English
      static func lbl_ProductsByCategory_ViewOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductsByCategory_ViewOrder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductsByCategory_ViewOrder"
        }

        return NSLocalizedString("lbl_ProductsByCategory_ViewOrder", bundle: bundle, comment: "")
      }

      /// en translation: SEE MY ORDER STATUS.
      ///
      /// Locales: en, es, English
      static func btn_OrderFinished_See_Status_MyOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_OrderFinished_See_Status_MyOrder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_OrderFinished_See_Status_MyOrder"
        }

        return NSLocalizedString("btn_OrderFinished_See_Status_MyOrder", bundle: bundle, comment: "")
      }

      /// en translation: SEE SHOPS
      ///
      /// Locales: en, es
      static func see_Ubication_Shop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("See_Ubication_Shop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "See_Ubication_Shop"
        }

        return NSLocalizedString("See_Ubication_Shop", bundle: bundle, comment: "")
      }

      /// en translation: SEE TRIP
      ///
      /// Locales: en, es, English
      static func btn_ConfirmOutstanding_See_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ConfirmOutstanding_See_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ConfirmOutstanding_See_Trip"
        }

        return NSLocalizedString("btn_ConfirmOutstanding_See_Trip", bundle: bundle, comment: "")
      }

      /// en translation: SELECT
      ///
      /// Locales: en, es
      static func selectSucursalButtonSelect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectSucursalButtonSelect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectSucursalButtonSelect"
        }

        return NSLocalizedString("SelectSucursalButtonSelect", bundle: bundle, comment: "")
      }

      /// en translation: SELECT A COUNTRY!
      ///
      /// Locales: en, es
      static func select_Country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_Country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_Country"
        }

        return NSLocalizedString("select_Country", bundle: bundle, comment: "")
      }

      /// en translation: SELECT A TERRITORY
      ///
      /// Locales: en, es, English
      static func lbl_Select_Territo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Select_Territo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Select_Territo"
        }

        return NSLocalizedString("lbl_Select_Territo", bundle: bundle, comment: "")
      }

      /// en translation: SELECT DESTINATION
      ///
      /// Locales: en, es
      static func select_Destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select_Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select_Destination"
        }

        return NSLocalizedString("Select_Destination", bundle: bundle, comment: "")
      }

      /// en translation: SELECT ORIGIN
      ///
      /// Locales: en, es
      static func select_Origin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select_Origin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select_Origin"
        }

        return NSLocalizedString("Select_Origin", bundle: bundle, comment: "")
      }

      /// en translation: SEND
      ///
      /// Locales: en, es, English
      static func btn_CoverAlert_Submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_CoverAlert_Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_CoverAlert_Submit"
        }

        return NSLocalizedString("btn_CoverAlert_Submit", bundle: bundle, comment: "")
      }

      /// en translation: SEND
      ///
      /// Locales: en, es, English
      static func btn_FinalizeBad_Submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_FinalizeBad_Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_FinalizeBad_Submit"
        }

        return NSLocalizedString("btn_FinalizeBad_Submit", bundle: bundle, comment: "")
      }

      /// en translation: SEND CODE
      ///
      /// Locales: en, es
      static func btn_ChanelRecover_Send_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ChanelRecover_Send_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ChanelRecover_Send_Code"
        }

        return NSLocalizedString("btn_ChanelRecover_Send_Code", bundle: bundle, comment: "")
      }

      /// en translation: SEND CODE
      ///
      /// Locales: en, es, English
      static func btn_ChooseRecover_Recover(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ChooseRecover_Recover", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ChooseRecover_Recover"
        }

        return NSLocalizedString("btn_ChooseRecover_Recover", bundle: bundle, comment: "")
      }

      /// en translation: SEND COMMENT
      ///
      /// Locales: en, es, English
      static func btn_BottomBadRating_Send_Comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_BottomBadRating_Send_Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_BottomBadRating_Send_Comment"
        }

        return NSLocalizedString("btn_BottomBadRating_Send_Comment", bundle: bundle, comment: "")
      }

      /// en translation: SEND IT!
      ///
      /// Locales: en, es
      static func lbl_Send_It(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Send_It", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Send_It"
        }

        return NSLocalizedString("lbl_Send_It", bundle: bundle, comment: "")
      }

      /// en translation: SEND VALIDATION
      ///
      /// Locales: en, es, English
      static func btn_ValidateEmail_Email_validation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidateEmail_Email_validation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidateEmail_Email_validation"
        }

        return NSLocalizedString("btn_ValidateEmail_Email_validation", bundle: bundle, comment: "")
      }

      /// en translation: SERVICES
      ///
      /// Locales: en, es, English
      static func lbl_Service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Service"
        }

        return NSLocalizedString("lbl_Service", bundle: bundle, comment: "")
      }

      /// en translation: SET
      ///
      /// Locales: en, es, English
      static func btn_ConfirmationBottom_Pin_Up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ConfirmationBottom_Pin_Up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ConfirmationBottom_Pin_Up"
        }

        return NSLocalizedString("btn_ConfirmationBottom_Pin_Up", bundle: bundle, comment: "")
      }

      /// en translation: SET
      ///
      /// Locales: en, es, English
      static func btn_MyLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_MyLocation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_MyLocation"
        }

        return NSLocalizedString("btn_MyLocation", bundle: bundle, comment: "")
      }

      /// en translation: SET ANOTHER DELIVERY POINT
      ///
      /// Locales: en, es, English
      static func btn_CoverAlert_Another_Shipping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_CoverAlert_Another_Shipping", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_CoverAlert_Another_Shipping"
        }

        return NSLocalizedString("btn_CoverAlert_Another_Shipping", bundle: bundle, comment: "")
      }

      /// en translation: SET UP ERRADS
      ///
      /// Locales: en, es, English
      static func lbl_Request_Mandadito(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Request_Mandadito", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Request_Mandadito"
        }

        return NSLocalizedString("lbl_Request_Mandadito", bundle: bundle, comment: "")
      }

      /// en translation: SHARE MY ADDRESS
      ///
      /// Locales: en, es
      static func share_My_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share_My_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share_My_Address"
        }

        return NSLocalizedString("Share_My_Address", bundle: bundle, comment: "")
      }

      /// en translation: SHOPPING CART
      ///
      /// Locales: en, es, English
      static func lbl_ProcessOrder_Nav(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProcessOrder_Nav", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProcessOrder_Nav"
        }

        return NSLocalizedString("lbl_ProcessOrder_Nav", bundle: bundle, comment: "")
      }

      /// en translation: SIGN UP
      ///
      /// Locales: en, es
      static func btn_WelcomeSignup_free(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_WelcomeSignup_free", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_WelcomeSignup_free"
        }

        return NSLocalizedString("btn_WelcomeSignup_free", bundle: bundle, comment: "")
      }

      /// en translation: SOON
      ///
      /// Locales: en, es, English
      static func comingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ComingTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ComingTitle"
        }

        return NSLocalizedString("ComingTitle", bundle: bundle, comment: "")
      }

      /// en translation: SOON IN HUGO!
      ///
      /// Locales: en, es, English
      static func lbl_soon_in_hugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_soon_in_hugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_soon_in_hugo"
        }

        return NSLocalizedString("lbl_soon_in_hugo", bundle: bundle, comment: "")
      }

      /// en translation: START
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Start"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Start", bundle: bundle, comment: "")
      }

      /// en translation: START
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Start_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Start_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Start_Text"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Start_Text", bundle: bundle, comment: "")
      }

      /// en translation: START
      ///
      /// Locales: en, es, English
      static func lbl_Start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Start"
        }

        return NSLocalizedString("lbl_Start", bundle: bundle, comment: "")
      }

      /// en translation: STOP
      ///
      /// Locales: en, es, English
      static func lbl_Stop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Stop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Stop"
        }

        return NSLocalizedString("lbl_Stop", bundle: bundle, comment: "")
      }

      /// en translation: SUBMIT
      ///
      /// Locales: en, es
      static func lbl_Step3_Following(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step3_Following", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step3_Following"
        }

        return NSLocalizedString("lbl_Step3_Following", bundle: bundle, comment: "")
      }

      /// en translation: SUMMARY
      ///
      /// Locales: en, es
      static func hp_CashinTransactionDetailViewController_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinTransactionDetailViewController_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinTransactionDetailViewController_Title"
        }

        return NSLocalizedString("hp_CashinTransactionDetailViewController_Title", bundle: bundle, comment: "")
      }

      /// en translation: SUMMARY
      ///
      /// Locales: en, es, English
      static func lbl_Summary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Summary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Summary"
        }

        return NSLocalizedString("lbl_Summary", bundle: bundle, comment: "")
      }

      /// en translation: Sample description
      ///
      /// Locales: en, es, English
      static func lbl_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_description"
        }

        return NSLocalizedString("lbl_description", bundle: bundle, comment: "")
      }

      /// en translation: Sample description
      ///
      /// Locales: en, es, English
      static func txt_CustomPage_Sample_Description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_CustomPage_Sample_Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_CustomPage_Sample_Description"
        }

        return NSLocalizedString("txt_CustomPage_Sample_Description", bundle: bundle, comment: "")
      }

      /// en translation: Sample title
      ///
      /// Locales: en, es, English
      static func lbl_CustomPage_Sample_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CustomPage_Sample_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CustomPage_Sample_Title"
        }

        return NSLocalizedString("lbl_CustomPage_Sample_Title", bundle: bundle, comment: "")
      }

      /// en translation: Sample title
      ///
      /// Locales: en, es, English
      static func lbl_sample_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sample_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sample_title"
        }

        return NSLocalizedString("lbl_sample_title", bundle: bundle, comment: "")
      }

      /// en translation: San Salvador
      ///
      /// Locales: en, es, English
      static func lbl_TerritoryHugo_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TerritoryHugo_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TerritoryHugo_Name"
        }

        return NSLocalizedString("lbl_TerritoryHugo_Name", bundle: bundle, comment: "")
      }

      /// en translation: San Salvador, El Salvador
      ///
      /// Locales: en, es, English
      static func lbl_CustomAddress_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CustomAddress_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CustomAddress_Address"
        }

        return NSLocalizedString("lbl_CustomAddress_Address", bundle: bundle, comment: "")
      }

      /// en translation: San Salvador, Municipality of San Salvador
      ///
      /// Locales: en, es, English
      static func lbl_CustomAddress_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CustomAddress_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CustomAddress_Title"
        }

        return NSLocalizedString("lbl_CustomAddress_Title", bundle: bundle, comment: "")
      }

      /// en translation: Saturated Trade 😢
      ///
      /// Locales: en, es, English
      static func saturatedPartnerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SaturatedPartnerTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SaturatedPartnerTitle"
        }

        return NSLocalizedString("SaturatedPartnerTitle", bundle: bundle, comment: "")
      }

      /// en translation: Saturation
      ///
      /// Locales: en, es, English
      static func generalSaturatedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GeneralSaturatedTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GeneralSaturatedTitle"
        }

        return NSLocalizedString("GeneralSaturatedTitle", bundle: bundle, comment: "")
      }

      /// en translation: Save as
      ///
      /// Locales: en, es, English
      static func lbl_ChooseAddress_Save_As(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ChooseAddress_Save_As", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChooseAddress_Save_As"
        }

        return NSLocalizedString("lbl_ChooseAddress_Save_As", bundle: bundle, comment: "")
      }

      /// en translation: Say hello to your new personal driver!
      ///
      /// Locales: en, es, English
      static func lbl_say_hello_yo_driver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_say_hello_yo_driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_say_hello_yo_driver"
        }

        return NSLocalizedString("lbl_say_hello_yo_driver", bundle: bundle, comment: "")
      }

      /// en translation: Say hi to your new personal driver!
      ///
      /// Locales: en, es, English
      static func lbl_InvitationCode_New_Driver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_InvitationCode_New_Driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_InvitationCode_New_Driver"
        }

        return NSLocalizedString("lbl_InvitationCode_New_Driver", bundle: bundle, comment: "")
      }

      /// en translation: Schedule
      ///
      /// Locales: en, es
      static func partner_header_schedule_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("partner_header_schedule_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "partner_header_schedule_title"
        }

        return NSLocalizedString("partner_header_schedule_title", bundle: bundle, comment: "")
      }

      /// en translation: Schedule a date and time for your order
      ///
      /// Locales: en, es
      static func lbl_sch_alert_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_sch_alert_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_sch_alert_title"
        }

        return NSLocalizedString("lbl_sch_alert_title", bundle: bundle, comment: "")
      }

      /// en translation: Schedule order
      ///
      /// Locales: en, es
      static func lbl_Sort_Schedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Sort_Schedule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Sort_Schedule"
        }

        return NSLocalizedString("lbl_Sort_Schedule", bundle: bundle, comment: "")
      }

      /// en translation: Scheduled orders only
      ///
      /// Locales: en, es
      static func lbl_title_onlyschedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_title_onlyschedule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_title_onlyschedule"
        }

        return NSLocalizedString("lbl_title_onlyschedule", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, es, English
      static func lbl_Main_SearchFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_SearchFor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_SearchFor"
        }

        return NSLocalizedString("lbl_Main_SearchFor", bundle: bundle, comment: "")
      }

      /// en translation: Search destination
      ///
      /// Locales: en, es
      static func search_Destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search_Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search_Destination"
        }

        return NSLocalizedString("Search_Destination", bundle: bundle, comment: "")
      }

      /// en translation: Search for
      ///
      /// Locales: en, es, English
      static func searchLabelPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("searchLabelPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "searchLabelPlaceholder"
        }

        return NSLocalizedString("searchLabelPlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: Search for a store or label
      ///
      /// Locales: en, es, English
      static func search_Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search_Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search_Placeholder"
        }

        return NSLocalizedString("Search_Placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Search in 
      ///
      /// Locales: en, es
      static func partner_header_search_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("partner_header_search_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "partner_header_search_in"
        }

        return NSLocalizedString("partner_header_search_in", bundle: bundle, comment: "")
      }

      /// en translation: Search origin
      ///
      /// Locales: en, es
      static func search_Origin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search_Origin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search_Origin"
        }

        return NSLocalizedString("Search_Origin", bundle: bundle, comment: "")
      }

      /// en translation: Search your destiny.
      ///
      /// Locales: en, English
      static func lbl_WelcomeMaps_destiny(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WelcomeMaps_destiny", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WelcomeMaps_destiny"
        }

        return NSLocalizedString("lbl_WelcomeMaps_destiny", bundle: bundle, comment: "")
      }

      /// en translation: Search your destiny.
      ///
      /// Locales: en, es, English
      static func lbl_LookUpRide_Search_Destiny(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LookUpRide_Search_Destiny", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LookUpRide_Search_Destiny"
        }

        return NSLocalizedString("lbl_LookUpRide_Search_Destiny", bundle: bundle, comment: "")
      }

      /// en translation: Searching transportation…
      ///
      /// Locales: en, es, English
      static func lbl_SearchingDriver_Transport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchingDriver_Transport", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchingDriver_Transport"
        }

        return NSLocalizedString("lbl_SearchingDriver_Transport", bundle: bundle, comment: "")
      }

      /// en translation: Section Title
      ///
      /// Locales: en, es, English
      static func lbl_ProductView_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductView_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductView_Title"
        }

        return NSLocalizedString("lbl_ProductView_Title", bundle: bundle, comment: "")
      }

      /// en translation: Security PIN
      ///
      /// Locales: en, es, English
      static func txt_creditcard_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_creditcard_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_creditcard_pin"
        }

        return NSLocalizedString("txt_creditcard_pin", bundle: bundle, comment: "")
      }

      /// en translation: Security Politics
      ///
      /// Locales: en, es
      static func hp_get_security_politics(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_get_security_politics", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_get_security_politics"
        }

        return NSLocalizedString("hp_get_security_politics", bundle: bundle, comment: "")
      }

      /// en translation: Security option
      ///
      /// Locales: en, es, English
      static func security_Option(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Security_Option", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Security_Option"
        }

        return NSLocalizedString("Security_Option", bundle: bundle, comment: "")
      }

      /// en translation: Security pin required
      ///
      /// Locales: en, es, English
      static func pinRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PinRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PinRequired"
        }

        return NSLocalizedString("PinRequired", bundle: bundle, comment: "")
      }

      /// en translation: See
      ///
      /// Locales: en, es, English
      static func viewLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ViewLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ViewLabel"
        }

        return NSLocalizedString("ViewLabel", bundle: bundle, comment: "")
      }

      /// en translation: See all
      ///
      /// Locales: en, es
      static func hp_notifications_view_more(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_notifications_view_more", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_notifications_view_more"
        }

        return NSLocalizedString("hp_notifications_view_more", bundle: bundle, comment: "")
      }

      /// en translation: See all
      ///
      /// Locales: en, es, English
      static func btn_SearchAddress_SeE_All(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_SearchAddress_SeE_All", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_SearchAddress_SeE_All"
        }

        return NSLocalizedString("btn_SearchAddress_SeE_All", bundle: bundle, comment: "")
      }

      /// en translation: See all >
      ///
      /// Locales: en, es, English
      static func lbl_See(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_See", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_See"
        }

        return NSLocalizedString("lbl_See", bundle: bundle, comment: "")
      }

      /// en translation: See all ›
      ///
      /// Locales: en, es, English
      static func lbl_ProductTable_See_ALl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductTable_See_ALl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductTable_See_ALl"
        }

        return NSLocalizedString("lbl_ProductTable_See_ALl", bundle: bundle, comment: "")
      }

      /// en translation: See detail
      ///
      /// Locales: en, es, English
      static func lbl_Tracking_See_Details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Tracking_See_Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Tracking_See_Details"
        }

        return NSLocalizedString("lbl_Tracking_See_Details", bundle: bundle, comment: "")
      }

      /// en translation: See my order
      ///
      /// Locales: en, es, English
      static func lbl_Main_View_MyOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_View_MyOrder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_View_MyOrder"
        }

        return NSLocalizedString("lbl_Main_View_MyOrder", bundle: bundle, comment: "")
      }

      /// en translation: See my order $1
      ///
      /// Locales: en, es, English
      static func viewOrderBtnTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ViewOrderBtnTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ViewOrderBtnTitle"
        }

        return NSLocalizedString("ViewOrderBtnTitle", bundle: bundle, comment: "")
      }

      /// en translation: See order
      ///
      /// Locales: en, es, English
      static func goToTracking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GoToTracking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GoToTracking"
        }

        return NSLocalizedString("GoToTracking", bundle: bundle, comment: "")
      }

      /// en translation: See product list
      ///
      /// Locales: en, es, English
      static func btn_ShipmentLocation_ProductList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ShipmentLocation_ProductList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ShipmentLocation_ProductList"
        }

        return NSLocalizedString("btn_ShipmentLocation_ProductList", bundle: bundle, comment: "")
      }

      /// en translation: See promotions
      ///
      /// Locales: en, es, English
      static func lbl_Promos_See_Promotion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Promos_See_Promotion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Promos_See_Promotion"
        }

        return NSLocalizedString("lbl_Promos_See_Promotion", bundle: bundle, comment: "")
      }

      /// en translation: See the Privacy Policies.
      ///
      /// Locales: en, es, English
      static func lbl_creditcard_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_creditcard_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_creditcard_privacy_policy"
        }

        return NSLocalizedString("lbl_creditcard_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: See the purchase ticket.
      ///
      /// Locales: en, es, English
      static func lbl_ViewReceipts_Purchase_Ticket(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ViewReceipts_Purchase_Ticket", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ViewReceipts_Purchase_Ticket"
        }

        return NSLocalizedString("lbl_ViewReceipts_Purchase_Ticket", bundle: bundle, comment: "")
      }

      /// en translation: Select a new security PIN
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_newpin_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_newpin_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_newpin_title"
        }

        return NSLocalizedString("hp_full_reset_pin_newpin_title", bundle: bundle, comment: "")
      }

      /// en translation: Select a payment method
      ///
      /// Locales: en, es
      static func select_Payment_Method(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select_Payment_Method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select_Payment_Method"
        }

        return NSLocalizedString("Select_Payment_Method", bundle: bundle, comment: "")
      }

      /// en translation: Select a territory
      ///
      /// Locales: en, es, English
      static func selectTerritoriesMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectTerritoriesMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectTerritoriesMessage"
        }

        return NSLocalizedString("SelectTerritoriesMessage", bundle: bundle, comment: "")
      }

      /// en translation: Select a valid payment method
      ///
      /// Locales: en, es
      static func select_Valid_Payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select_Valid_Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select_Valid_Payment"
        }

        return NSLocalizedString("Select_Valid_Payment", bundle: bundle, comment: "")
      }

      /// en translation: Select all
      ///
      /// Locales: en, es
      static func hp_lbl_notificactions_select_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_notificactions_select_all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_notificactions_select_all"
        }

        return NSLocalizedString("hp_lbl_notificactions_select_all", bundle: bundle, comment: "")
      }

      /// en translation: Select an icon.
      ///
      /// Locales: en, es, English
      static func lbl_ChooseAddressIcon_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ChooseAddressIcon_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChooseAddressIcon_Heading"
        }

        return NSLocalizedString("lbl_ChooseAddressIcon_Heading", bundle: bundle, comment: "")
      }

      /// en translation: Select payment method
      ///
      /// Locales: en, es, English
      static func selectPaymentTypeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectPaymentTypeTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectPaymentTypeTitle"
        }

        return NSLocalizedString("SelectPaymentTypeTitle", bundle: bundle, comment: "")
      }

      /// en translation: Select the branch
      ///
      /// Locales: en, es
      static func selectSucursalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectSucursalTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectSucursalTitle"
        }

        return NSLocalizedString("SelectSucursalTitle", bundle: bundle, comment: "")
      }

      /// en translation: Select your country
      ///
      /// Locales: en, es
      static func select_County(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select_County", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select_County"
        }

        return NSLocalizedString("Select_County", bundle: bundle, comment: "")
      }

      /// en translation: Select your destiny!
      ///
      /// Locales: en, es, English
      static func lbl_Select_Destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Select_Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Select_Destination"
        }

        return NSLocalizedString("lbl_Select_Destination", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, es, English
      static func btn_RatingComment_Submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_RatingComment_Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_RatingComment_Submit"
        }

        return NSLocalizedString("btn_RatingComment_Submit", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, es, English
      static func lbl_Submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Submit"
        }

        return NSLocalizedString("lbl_Submit", bundle: bundle, comment: "")
      }

      /// en translation: Send invoice to the mail:
      ///
      /// Locales: en, es
      static func lbl_new_billing_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_new_billing_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_new_billing_email"
        }

        return NSLocalizedString("lbl_new_billing_email", bundle: bundle, comment: "")
      }

      /// en translation: Send me code as SMS
      ///
      /// Locales: en, es
      static func hp_title_recovery_method_sms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_title_recovery_method_sms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_title_recovery_method_sms"
        }

        return NSLocalizedString("hp_title_recovery_method_sms", bundle: bundle, comment: "")
      }

      /// en translation: Send me code to my email
      ///
      /// Locales: en, es
      static func hp_title_recovery_method_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_title_recovery_method_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_title_recovery_method_email"
        }

        return NSLocalizedString("hp_title_recovery_method_email", bundle: bundle, comment: "")
      }

      /// en translation: Send the code again
      ///
      /// Locales: en, es
      static func lbl_Step2_Send_Code_Again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Send_Code_Again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Send_Code_Again"
        }

        return NSLocalizedString("lbl_Step2_Send_Code_Again", bundle: bundle, comment: "")
      }

      /// en translation: Sent
      ///
      /// Locales: en, es, English
      static func sent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sent"
        }

        return NSLocalizedString("Sent", bundle: bundle, comment: "")
      }

      /// en translation: Service not available
      ///
      /// Locales: en, es, English
      static func noOperationalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noOperationalTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noOperationalTitle"
        }

        return NSLocalizedString("noOperationalTitle", bundle: bundle, comment: "")
      }

      /// en translation: Servicio - Tributo a Natalia…
      ///
      /// Locales: en, es, English
      static func lbl_EntertainmentOrder_Service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EntertainmentOrder_Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EntertainmentOrder_Service"
        }

        return NSLocalizedString("lbl_EntertainmentOrder_Service", bundle: bundle, comment: "")
      }

      /// en translation: Set a password
      ///
      /// Locales: en, es
      static func createPassword_Set_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CreatePassword_Set_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CreatePassword_Set_Password"
        }

        return NSLocalizedString("CreatePassword_Set_Password", bundle: bundle, comment: "")
      }

      /// en translation: Set the pin in the correct address.
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmationBottom_Set_Pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmationBottom_Set_Pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmationBottom_Set_Pin"
        }

        return NSLocalizedString("lbl_ConfirmationBottom_Set_Pin", bundle: bundle, comment: "")
      }

      /// en translation: Set the pin in the exact location
      ///
      /// Locales: en, es, English
      static func lbl_Set_Pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Set_Pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Set_Pin"
        }

        return NSLocalizedString("lbl_Set_Pin", bundle: bundle, comment: "")
      }

      /// en translation: Set the pin on the delivery address.
      ///
      /// Locales: en, es
      static func set_UbicationPin_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Set_UbicationPin_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Set_UbicationPin_Location"
        }

        return NSLocalizedString("Set_UbicationPin_Location", bundle: bundle, comment: "")
      }

      /// en translation: Set the pin to the exact address.
      ///
      /// Locales: en, es, English
      static func lbl_MyLocation_Set_Pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_MyLocation_Set_Pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_MyLocation_Set_Pin"
        }

        return NSLocalizedString("lbl_MyLocation_Set_Pin", bundle: bundle, comment: "")
      }

      /// en translation: Set up
      ///
      /// Locales: en, es
      static func hp_lbl_account_enable_biometric(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_account_enable_biometric", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_account_enable_biometric"
        }

        return NSLocalizedString("hp_lbl_account_enable_biometric", bundle: bundle, comment: "")
      }

      /// en translation: Set your new security PIN
      ///
      /// Locales: en, es
      static func hp_temporal_code_set_security_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_temporal_code_set_security_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_temporal_code_set_security_pin"
        }

        return NSLocalizedString("hp_temporal_code_set_security_pin", bundle: bundle, comment: "")
      }

      /// en translation: Shops
      ///
      /// Locales: en, es
      static func lbl_Main_commerce_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_commerce_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_commerce_title"
        }

        return NSLocalizedString("lbl_Main_commerce_title", bundle: bundle, comment: "")
      }

      /// en translation: Sign off
      ///
      /// Locales: en, es, English
      static func closeSessionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CloseSessionTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CloseSessionTitle"
        }

        return NSLocalizedString("CloseSessionTitle", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: en, es, English
      static func btn_StartedPhoneAlternative_signup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_StartedPhoneAlternative_signup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_StartedPhoneAlternative_signup"
        }

        return NSLocalizedString("btn_StartedPhoneAlternative_signup", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, es
      static func hp_lbl_account_skip_biometric(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_account_skip_biometric", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_account_skip_biometric"
        }

        return NSLocalizedString("hp_lbl_account_skip_biometric", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Skip"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Skip", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, es, English
      static func btn_CustomPage_Skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_CustomPage_Skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_CustomPage_Skip"
        }

        return NSLocalizedString("btn_CustomPage_Skip", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, es, English
      static func btn_HeaderFinalizeRide_Skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_HeaderFinalizeRide_Skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_HeaderFinalizeRide_Skip"
        }

        return NSLocalizedString("btn_HeaderFinalizeRide_Skip", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, es, English
      static func btn_RatingComment_Skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_RatingComment_Skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_RatingComment_Skip"
        }

        return NSLocalizedString("btn_RatingComment_Skip", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, es, English
      static func btn_skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_skip"
        }

        return NSLocalizedString("btn_skip", bundle: bundle, comment: "")
      }

      /// en translation: Some products are no longer available in inventory. Please, check again the cart.
      ///
      /// Locales: en, es
      static func lbl_product_variation_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_product_variation_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_product_variation_message"
        }

        return NSLocalizedString("lbl_product_variation_message", bundle: bundle, comment: "")
      }

      /// en translation: Some products may not be available or have a different price, do you want to continue?
      ///
      /// Locales: en, es, English
      static func productAlertMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ProductAlertMsg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ProductAlertMsg"
        }

        return NSLocalizedString("ProductAlertMsg", bundle: bundle, comment: "")
      }

      /// en translation: Something is wrong.
      ///
      /// Locales: en, es, English
      static func lbl_ServerError_Something_Wrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ServerError_Something_Wrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ServerError_Something_Wrong"
        }

        return NSLocalizedString("lbl_ServerError_Something_Wrong", bundle: bundle, comment: "")
      }

      /// en translation: Soon in Hugo
      ///
      /// Locales: en, es
      static func hp_lbl_onboarding_soon_hugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_onboarding_soon_hugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_onboarding_soon_hugo"
        }

        return NSLocalizedString("hp_lbl_onboarding_soon_hugo", bundle: bundle, comment: "")
      }

      /// en translation: Sorry an error arose, which has already been reported, please try again later
      ///
      /// Locales: en, es, English
      static func generalErrorMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GeneralErrorMsg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GeneralErrorMsg"
        }

        return NSLocalizedString("GeneralErrorMsg", bundle: bundle, comment: "")
      }

      /// en translation: Sorry at this time it is not possible to make a call, try again later
      ///
      /// Locales: en, es, English
      static func phoneCallSmsFailedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phoneCallSmsFailedMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phoneCallSmsFailedMessage"
        }

        return NSLocalizedString("phoneCallSmsFailedMessage", bundle: bundle, comment: "")
      }

      /// en translation: Sorry for the inconveniences
      ///
      /// Locales: en, es, English
      static func lbl_Inconvenience(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Inconvenience", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Inconvenience"
        }

        return NSLocalizedString("lbl_Inconvenience", bundle: bundle, comment: "")
      }

      /// en translation: Sorry it was not possible to obtain the information for this order, if you think it is an error please call customer service at 2247-8100.
      ///
      /// Locales: en, es, English
      static func orderLoadErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("orderLoadErrorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "orderLoadErrorMessage"
        }

        return NSLocalizedString("orderLoadErrorMessage", bundle: bundle, comment: "")
      }

      /// en translation: Sorry it was not possible to select the billing information
      ///
      /// Locales: en, es, English
      static func not_Possible(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not_Possible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not_Possible"
        }

        return NSLocalizedString("Not_Possible", bundle: bundle, comment: "")
      }

      /// en translation: Sorry it was not possible to validate the token, if you think it is an error please call customer service at 2247-8100
      ///
      /// Locales: en, es, English
      static func tokenErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokenErrorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokenErrorMessage"
        }

        return NSLocalizedString("tokenErrorMessage", bundle: bundle, comment: "")
      }

      /// en translation: Sorry no matches found
      ///
      /// Locales: en, es, English
      static func sorry_No_Match(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sorry_No_Match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sorry_No_Match"
        }

        return NSLocalizedString("Sorry_No_Match", bundle: bundle, comment: "")
      }

      /// en translation: Sorry something has gone wrong.
      ///
      /// Locales: en, es
      static func wrong_Error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wrong_Error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wrong_Error"
        }

        return NSLocalizedString("wrong_Error", bundle: bundle, comment: "")
      }

      /// en translation: Sorry there is no stock available for this product 😢
      ///
      /// Locales: en, es, English
      static func productNotAvailableMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ProductNotAvailableMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ProductNotAvailableMessage"
        }

        return NSLocalizedString("ProductNotAvailableMessage", bundle: bundle, comment: "")
      }

      /// en translation: Sorry this option is not valid in your location.
      ///
      /// Locales: en, es
      static func not_Valid_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not_Valid_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not_Valid_Location"
        }

        return NSLocalizedString("Not_Valid_Location", bundle: bundle, comment: "")
      }

      /// en translation: Sorry we cannot process your order, because the service where this order was processed is not available 😢
      ///
      /// Locales: en, es, English
      static func noOperationalMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noOperationalMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noOperationalMessage"
        }

        return NSLocalizedString("noOperationalMessage", bundle: bundle, comment: "")
      }

      /// en translation: Sorry you can't add more than 3 cards. If you want to add a new card you must delete one.
      ///
      /// Locales: en, es, English
      static func limitExceededMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LimitExceededMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LimitExceededMessage"
        }

        return NSLocalizedString("LimitExceededMessage", bundle: bundle, comment: "")
      }

      /// en translation: Sorry you don't have a billing record available, try adding a new one.
      ///
      /// Locales: en, es, English
      static func no_Bill(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No_Bill", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No_Bill"
        }

        return NSLocalizedString("No_Bill", bundle: bundle, comment: "")
      }

      /// en translation: Sorry you're out of coverage area, but don't worry you can select one of our coverage areas.
      ///
      /// Locales: en, es, English
      static func notInDelivereArea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NotInDelivereArea", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NotInDelivereArea"
        }

        return NSLocalizedString("NotInDelivereArea", bundle: bundle, comment: "")
      }

      /// en translation: Sorry 😞 the selected card type is not supported in your location.
      ///
      /// Locales: en, es
      static func sorry_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sorry_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sorry_Card"
        }

        return NSLocalizedString("Sorry_Card", bundle: bundle, comment: "")
      }

      /// en translation: Sorry 😞 the type of card entered is not supported in your location.
      ///
      /// Locales: en, es, English
      static func card_Not_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card_Not_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card_Not_Location"
        }

        return NSLocalizedString("Card_Not_Location", bundle: bundle, comment: "")
      }

      /// en translation: Sorry 😣
      ///
      /// Locales: en, es
      static func sorry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sorry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sorry"
        }

        return NSLocalizedString("Sorry", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, payment types could not be loaded.
      ///
      /// Locales: en, es, English
      static func payment_Type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment_Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment_Type"
        }

        return NSLocalizedString("Payment_Type", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, we couldn't enter your order 🙁
      ///
      /// Locales: en, es
      static func sorry_Con_Not_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sorry_Con_Not_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sorry_Con_Not_Order"
        }

        return NSLocalizedString("Sorry_Con_Not_Order", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, you can't track this order at this time
      ///
      /// Locales: en, es
      static func can_Not_Track(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Can_Not_Track", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Can_Not_Track"
        }

        return NSLocalizedString("Can_Not_Track", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, your order could not be completed, please contact support, your order is HO- $1
      ///
      /// Locales: en, es, English
      static func orderProcessError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderProcessError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderProcessError"
        }

        return NSLocalizedString("OrderProcessError", bundle: bundle, comment: "")
      }

      /// en translation: Sort by:
      ///
      /// Locales: en, es
      static func lbl_Sort_By(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Sort_By", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Sort_By"
        }

        return NSLocalizedString("lbl_Sort_By", bundle: bundle, comment: "")
      }

      /// en translation: Sort transactions as you wish!
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_FilterSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_FilterSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_FilterSubtitle"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_FilterSubtitle", bundle: bundle, comment: "")
      }

      /// en translation: Special instructions
      ///
      /// Locales: en, es, English
      static func lbl_OptionsQtyCell_Instruction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OptionsQtyCell_Instruction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OptionsQtyCell_Instruction"
        }

        return NSLocalizedString("lbl_OptionsQtyCell_Instruction", bundle: bundle, comment: "")
      }

      /// en translation: Specify what Hugo will do at Point A
      ///
      /// Locales: en, es, English
      static func shipmentAddDescriptionInstructionsA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ShipmentAddDescriptionInstructionsA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ShipmentAddDescriptionInstructionsA"
        }

        return NSLocalizedString("ShipmentAddDescriptionInstructionsA", bundle: bundle, comment: "")
      }

      /// en translation: Specify what Hugo will do at Point B
      ///
      /// Locales: en, es, English
      static func shipmentAddDescriptionInstructionsB(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ShipmentAddDescriptionInstructionsB", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ShipmentAddDescriptionInstructionsB"
        }

        return NSLocalizedString("ShipmentAddDescriptionInstructionsB", bundle: bundle, comment: "")
      }

      /// en translation: Specify what you want to do in this location
      ///
      /// Locales: en, es
      static func specify_Location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Specify_Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Specify_Location"
        }

        return NSLocalizedString("Specify_Location", bundle: bundle, comment: "")
      }

      /// en translation: Speed
      ///
      /// Locales: en, es
      static func lbldriverGoodRatings2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbldriverGoodRatings2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbldriverGoodRatings2"
        }

        return NSLocalizedString("lbldriverGoodRatings2", bundle: bundle, comment: "")
      }

      /// en translation: Speed
      ///
      /// Locales: en, es
      static func lblhugoGoodRatings3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoGoodRatings3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoGoodRatings3"
        }

        return NSLocalizedString("lblhugoGoodRatings3", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionDateInit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionDateInit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionDateInit"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionDateInit", bundle: bundle, comment: "")
      }

      /// en translation: Start 5:40 p.m.
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide2_Start_Time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide2_Start_Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide2_Start_Time"
        }

        return NSLocalizedString("lbl_PickingRide2_Start_Time", bundle: bundle, comment: "")
      }

      /// en translation: Start a new cart?
      ///
      /// Locales: en, es, English
      static func orderNoSamePartnerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderNoSamePartnerTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderNoSamePartnerTitle"
        }

        return NSLocalizedString("OrderNoSamePartnerTitle", bundle: bundle, comment: "")
      }

      /// en translation: Starting tracking...
      ///
      /// Locales: en, es
      static func showSimpleAlertLbl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("showSimpleAlertLbl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "showSimpleAlertLbl"
        }

        return NSLocalizedString("showSimpleAlertLbl", bundle: bundle, comment: "")
      }

      /// en translation: State
      ///
      /// Locales: en, es
      static func lbl_AddressBook_State(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_State", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_State"
        }

        return NSLocalizedString("lbl_AddressBook_State", bundle: bundle, comment: "")
      }

      /// en translation: Status of your order
      ///
      /// Locales: en, es, English
      static func statu_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Statu_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Statu_Order"
        }

        return NSLocalizedString("Statu_Order", bundle: bundle, comment: "")
      }

      /// en translation: Status of your shipment:
      ///
      /// Locales: en, es, English
      static func status_Shipping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Status_Shipping", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Status_Shipping"
        }

        return NSLocalizedString("Status_Shipping", bundle: bundle, comment: "")
      }

      /// en translation: Step 3: Basic Information
      ///
      /// Locales: en, es, English
      static func lbl_BasicInfo_Sub_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_BasicInfo_Sub_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_BasicInfo_Sub_Heading"
        }

        return NSLocalizedString("lbl_BasicInfo_Sub_Heading", bundle: bundle, comment: "")
      }

      /// en translation: Step 4: Email validation
      ///
      /// Locales: en, es, English
      static func lbl_ValidateEmail_Mail_validation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateEmail_Mail_validation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateEmail_Mail_validation"
        }

        return NSLocalizedString("lbl_ValidateEmail_Mail_validation", bundle: bundle, comment: "")
      }

      /// en translation: Step 5: Add payment method
      ///
      /// Locales: en, es, English
      static func step_5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Step_5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Step_5"
        }

        return NSLocalizedString("Step_5", bundle: bundle, comment: "")
      }

      /// en translation: Subscription failed
      ///
      /// Locales: en, es, English
      static func subscriptionFailTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubscriptionFailTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubscriptionFailTitle"
        }

        return NSLocalizedString("SubscriptionFailTitle", bundle: bundle, comment: "")
      }

      /// en translation: Subtotal
      ///
      /// Locales: en, es, English
      static func lbl_TotalTable_SubTotal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TotalTable_SubTotal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TotalTable_SubTotal"
        }

        return NSLocalizedString("lbl_TotalTable_SubTotal", bundle: bundle, comment: "")
      }

      /// en translation: Successful update
      ///
      /// Locales: en, es
      static func hp_biometrics_successful_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_biometrics_successful_update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_biometrics_successful_update"
        }

        return NSLocalizedString("hp_biometrics_successful_update", bundle: bundle, comment: "")
      }

      /// en translation: Super Marino
      ///
      /// Locales: en, es, English
      static func lbl_PartnerFeedTable_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerFeedTable_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerFeedTable_Address"
        }

        return NSLocalizedString("lbl_PartnerFeedTable_Address", bundle: bundle, comment: "")
      }

      /// en translation: Swipe down
      ///
      /// Locales: en, es, English
      static func lbl_swipe_down(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_swipe_down", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_swipe_down"
        }

        return NSLocalizedString("lbl_swipe_down", bundle: bundle, comment: "")
      }

      /// en translation: Swipe for more
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Swipe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Swipe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Swipe"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Swipe", bundle: bundle, comment: "")
      }

      /// en translation: Swipe up
      ///
      /// Locales: en, es, English
      static func lbl_swipe_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_swipe_up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_swipe_up"
        }

        return NSLocalizedString("lbl_swipe_up", bundle: bundle, comment: "")
      }

      /// en translation: THANKS A LOT HUGO!
      ///
      /// Locales: en, es, English
      static func lbl_CustomCall_Thanks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CustomCall_Thanks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CustomCall_Thanks"
        }

        return NSLocalizedString("lbl_CustomCall_Thanks", bundle: bundle, comment: "")
      }

      /// en translation: TICKET ID
      ///
      /// Locales: en, es, English
      static func lbl_DateRangePicker_TicketId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DateRangePicker_TicketId", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DateRangePicker_TicketId"
        }

        return NSLocalizedString("lbl_DateRangePicker_TicketId", bundle: bundle, comment: "")
      }

      /// en translation: TOTAL
      ///
      /// Locales: en, es, English
      static func lbl_TotalTable_Total(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TotalTable_Total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TotalTable_Total"
        }

        return NSLocalizedString("lbl_TotalTable_Total", bundle: bundle, comment: "")
      }

      /// en translation: TOTAL COST OF DELIVERY ONLY
      ///
      /// Locales: en, es, English
      static func lbl_AddressInit_Total_Cost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressInit_Total_Cost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressInit_Total_Cost"
        }

        return NSLocalizedString("lbl_AddressInit_Total_Cost", bundle: bundle, comment: "")
      }

      /// en translation: TRAJECTORY
      ///
      /// Locales: en, es
      static func search_Title_Route(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search_Title_Route", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search_Title_Route"
        }

        return NSLocalizedString("Search_Title_Route", bundle: bundle, comment: "")
      }

      /// en translation: TRANSACTION AMOUNT
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionAmount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionAmount"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionAmount", bundle: bundle, comment: "")
      }

      /// en translation: TRANSACTION DATE
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionDateLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionDateLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionDateLabel"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionDateLabel", bundle: bundle, comment: "")
      }

      /// en translation: TRANSACTION DETAILS
      ///
      /// Locales: en, es
      static func hp_CashinSucessViewController_seeDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinSucessViewController_seeDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinSucessViewController_seeDetail"
        }

        return NSLocalizedString("hp_CashinSucessViewController_seeDetail", bundle: bundle, comment: "")
      }

      /// en translation: TRANSACTION DETAILS
      ///
      /// Locales: en, es
      static func hp_full_send_money_success_details_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_send_money_success_details_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_send_money_success_details_button_title"
        }

        return NSLocalizedString("hp_full_send_money_success_details_button_title", bundle: bundle, comment: "")
      }

      /// en translation: TRANSACTION NOTE
      ///
      /// Locales: en, es
      static func hp_transaction_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_transaction_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_transaction_title"
        }

        return NSLocalizedString("hp_transaction_title", bundle: bundle, comment: "")
      }

      /// en translation: TRANSACTION TYPE
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionTypeLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionTypeLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionTypeLabel"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionTypeLabel", bundle: bundle, comment: "")
      }

      /// en translation: TRIP'S ROUTE
      ///
      /// Locales: en, es, English
      static func lbl_RouteCell_Route(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RouteCell_Route", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RouteCell_Route"
        }

        return NSLocalizedString("lbl_RouteCell_Route", bundle: bundle, comment: "")
      }

      /// en translation: Tap to end.
      ///
      /// Locales: en, es, English
      static func btn_Boarding_Finish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Boarding_Finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Boarding_Finish"
        }

        return NSLocalizedString("btn_Boarding_Finish", bundle: bundle, comment: "")
      }

      /// en translation: Tax ID Number
      ///
      /// Locales: en, es
      static func receipt_configuration_document_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_document_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_document_title"
        }

        return NSLocalizedString("receipt_configuration_document_title", bundle: bundle, comment: "")
      }

      /// en translation: Tax document
      ///
      /// Locales: en, es, English
      static func lbl_new_billing_txt_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_new_billing_txt_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_new_billing_txt_number"
        }

        return NSLocalizedString("lbl_new_billing_txt_number", bundle: bundle, comment: "")
      }

      /// en translation: Tell us what you liked.
      ///
      /// Locales: en, es, English
      static func lbl_RatingHeader_Liked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingHeader_Liked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingHeader_Liked"
        }

        return NSLocalizedString("lbl_RatingHeader_Liked", bundle: bundle, comment: "")
      }

      /// en translation: Terms
      ///
      /// Locales: en, es
      static func hp_lbl_onboarding_terms_word(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_onboarding_terms_word", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_onboarding_terms_word"
        }

        return NSLocalizedString("hp_lbl_onboarding_terms_word", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: en, es, English
      static func termAndCondition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TermAndCondition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TermAndCondition"
        }

        return NSLocalizedString("TermAndCondition", bundle: bundle, comment: "")
      }

      /// en translation: Terms and conditions
      ///
      /// Locales: en, es, English
      static func lbl_PreferencesSingle_Condtion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PreferencesSingle_Condtion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PreferencesSingle_Condtion"
        }

        return NSLocalizedString("lbl_PreferencesSingle_Condtion", bundle: bundle, comment: "")
      }

      /// en translation: Test
      ///
      /// Locales: en, es
      static func test(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("test", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "test"
        }

        return NSLocalizedString("test", bundle: bundle, comment: "")
      }

      /// en translation: Thank you for choosing us, enjoy it!
      ///
      /// Locales: en, es, English
      static func orderDeliveredMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderDeliveredMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderDeliveredMessage"
        }

        return NSLocalizedString("OrderDeliveredMessage", bundle: bundle, comment: "")
      }

      /// en translation: Thank you for installing Hugo App, your first order 🛵 is on us :)
      ///
      /// Locales: en, es, English
      static func firstInstallMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FirstInstallMsg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FirstInstallMsg"
        }

        return NSLocalizedString("FirstInstallMsg", bundle: bundle, comment: "")
      }

      /// en translation: Thank you for participating in our beta. We are still working to adjust some things, but we need your opinion about our app. We appreciate your patience, because with your help we will make Hugo the best app to take what you need, to your home. 
      ///
      /// Locales: en, es, English
      static func welcomeBetaMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WelcomeBetaMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WelcomeBetaMessage"
        }

        return NSLocalizedString("WelcomeBetaMessage", bundle: bundle, comment: "")
      }

      /// en translation: Thank you for using Hugo! To make our app better for you, we send regular updates to the App Store. Each update includes speed and stability improvements as well as new features. Your current version is $1 and the latest version is $ 2. 
      ///
      /// Locales: en, es, English
      static func newVersionMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NewVersionMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NewVersionMessage"
        }

        return NSLocalizedString("NewVersionMessage", bundle: bundle, comment: "")
      }

      /// en translation: Thank you!
      ///
      /// Locales: en, es
      static func lblThankyou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblThankyou", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblThankyou"
        }

        return NSLocalizedString("lblThankyou", bundle: bundle, comment: "")
      }

      /// en translation: Thanks
      ///
      /// Locales: en, es, English
      static func btn_DriverTip_ThanksYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_DriverTip_ThanksYou", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_DriverTip_ThanksYou"
        }

        return NSLocalizedString("btn_DriverTip_ThanksYou", bundle: bundle, comment: "")
      }

      /// en translation: Thanks a lot!
      ///
      /// Locales: en, es, English
      static func lbl_Thanks_You_Very_Much(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Thanks_You_Very_Much", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Thanks_You_Very_Much"
        }

        return NSLocalizedString("lbl_Thanks_You_Very_Much", bundle: bundle, comment: "")
      }

      /// en translation: Thanks a lot!
      ///
      /// Locales: en, es, English
      static func lbl_Thnaks_You(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Thnaks_You", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Thnaks_You"
        }

        return NSLocalizedString("lbl_Thnaks_You", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for letting us know. We will work to improve the service our team provides.
      ///
      /// Locales: en, es, English
      static func lbl_BottomBadRating_Improve_Service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_BottomBadRating_Improve_Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_BottomBadRating_Improve_Service"
        }

        return NSLocalizedString("lbl_BottomBadRating_Improve_Service", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for letting us know. We will work to improve the service our team provides.
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeBad_Team_provider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeBad_Team_provider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeBad_Team_provider"
        }

        return NSLocalizedString("lbl_FinalizeBad_Team_provider", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for using 
      ///
      /// Locales: en, es
      static func hp_CashinSucessViewController_ThanksForUse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinSucessViewController_ThanksForUse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinSucessViewController_ThanksForUse"
        }

        return NSLocalizedString("hp_CashinSucessViewController_ThanksForUse", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for your trust in us
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeGoodRating_Thanks_Trusting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeGoodRating_Thanks_Trusting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeGoodRating_Thanks_Trusting"
        }

        return NSLocalizedString("lbl_FinalizeGoodRating_Thanks_Trusting", bundle: bundle, comment: "")
      }

      /// en translation: Thanks to trust in us!
      ///
      /// Locales: en, es, English
      static func lbl_OrderFinished_Trusting_Us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderFinished_Trusting_Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderFinished_Trusting_Us"
        }

        return NSLocalizedString("lbl_OrderFinished_Trusting_Us", bundle: bundle, comment: "")
      }

      /// en translation: The action could not be completed
      ///
      /// Locales: en, es, English
      static func subscriptionFailBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubscriptionFailBody", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubscriptionFailBody"
        }

        return NSLocalizedString("SubscriptionFailBody", bundle: bundle, comment: "")
      }

      /// en translation: The action could not be performed.
      ///
      /// Locales: en, es, English
      static func wrongSetRangeAddressMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongSetRangeAddressMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongSetRangeAddressMessage"
        }

        return NSLocalizedString("WrongSetRangeAddressMessage", bundle: bundle, comment: "")
      }

      /// en translation: The app does not have access to your location. Go to settings -> privacy
      ///
      /// Locales: en, es, English
      static func locationNoAccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationNoAccess", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationNoAccess"
        }

        return NSLocalizedString("LocationNoAccess", bundle: bundle, comment: "")
      }

      /// en translation: The applicable taxes are included in your recharge.
      ///
      /// Locales: en, es, English
      static func lbl_Already_include(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Already_include", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Already_include"
        }

        return NSLocalizedString("lbl_Already_include", bundle: bundle, comment: "")
      }

      /// en translation: The card is saved exclusively in the device in a safe way and the information is subject to our privacy policies and use. 
      ///
      /// Locales: en, es, English
      static func lbl_creditcard_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_creditcard_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_creditcard_description"
        }

        return NSLocalizedString("lbl_creditcard_description", bundle: bundle, comment: "")
      }

      /// en translation: The card is stored exclusively in the device in a secure way. This information is subject to our policies and use. Read more
      ///
      /// Locales: en, es, English
      static func read_More(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Read_More", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Read_More"
        }

        return NSLocalizedString("Read_More", bundle: bundle, comment: "")
      }

      /// en translation: The card number is invalid.
      ///
      /// Locales: en, es, English
      static func invalid_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid_Card"
        }

        return NSLocalizedString("Invalid_Card", bundle: bundle, comment: "")
      }

      /// en translation: The cash will be delivered at the destination point because you have at least one purchase with a list at one point.
      ///
      /// Locales: en, es
      static func lbl_ShipmentCheckout_Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentCheckout_Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentCheckout_Subtitle"
        }

        return NSLocalizedString("lbl_ShipmentCheckout_Subtitle", bundle: bundle, comment: "")
      }

      /// en translation: The change of branch can generate a variation in your shopping cart, either in the price or in product stock. We ask you to verify your order again to proceed.
      ///
      /// Locales: en, es
      static func sucursalChangeAlertDesc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SucursalChangeAlertDesc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SucursalChangeAlertDesc"
        }

        return NSLocalizedString("SucursalChangeAlertDesc", bundle: bundle, comment: "")
      }

      /// en translation: The chat you had with your driver is no longer active because your journey has started and you are on your way to your destination.
      ///
      /// Locales: en, es, English
      static func errorChatMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ErrorChatMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ErrorChatMessage"
        }

        return NSLocalizedString("ErrorChatMessage", bundle: bundle, comment: "")
      }

      /// en translation: The code could not be sent
      ///
      /// Locales: en, es
      static func code_Not_Send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("code_Not_Send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "code_Not_Send"
        }

        return NSLocalizedString("code_Not_Send", bundle: bundle, comment: "")
      }

      /// en translation: The code entered is not correct
      ///
      /// Locales: en, es
      static func lbl_Step2_InCorrect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_InCorrect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_InCorrect"
        }

        return NSLocalizedString("lbl_Step2_InCorrect", bundle: bundle, comment: "")
      }

      /// en translation: The code may take up to 30 seconds to arrive
      ///
      /// Locales: en, es
      static func lbl_Step2_30_Sec(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_30_Sec", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_30_Sec"
        }

        return NSLocalizedString("lbl_Step2_30_Sec", bundle: bundle, comment: "")
      }

      /// en translation: The data does not match
      ///
      /// Locales: en, es
      static func date_Not_Match(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Date_Not_Match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Date_Not_Match"
        }

        return NSLocalizedString("Date_Not_Match", bundle: bundle, comment: "")
      }

      /// en translation: The date of birth field is required   
      ///
      /// Locales: en, es, English
      static func birthdateRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BirthdateRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BirthdateRequired"
        }

        return NSLocalizedString("BirthdateRequired", bundle: bundle, comment: "")
      }

      /// en translation: The delivery time is above 60 minutes.
      ///
      /// Locales: en, es, English
      static func lbl_Main_Delivery_Time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_Delivery_Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_Delivery_Time"
        }

        return NSLocalizedString("lbl_Main_Delivery_Time", bundle: bundle, comment: "")
      }

      /// en translation: The driver will ask for you to show your ID to verify your age.
      ///
      /// Locales: en, es, English
      static func lbl_AgeReuired_Driver_Request(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AgeReuired_Driver_Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AgeReuired_Driver_Request"
        }

        return NSLocalizedString("lbl_AgeReuired_Driver_Request", bundle: bundle, comment: "")
      }

      /// en translation: The driver will ask for you to show your payment card and ID to verify your identity
      ///
      /// Locales: en, es, English
      static func ccShowCSSMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCShowCSSMsg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCShowCSSMsg"
        }

        return NSLocalizedString("CCShowCSSMsg", bundle: bundle, comment: "")
      }

      /// en translation: The email field is required
      ///
      /// Locales: en, es, English
      static func email_Filed_Required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email_Filed_Required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email_Filed_Required"
        }

        return NSLocalizedString("Email_Filed_Required", bundle: bundle, comment: "")
      }

      /// en translation: The email is not in a correct format
      ///
      /// Locales: en, es
      static func email_Not_Correct_Format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email_Not_Correct_Format", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email_Not_Correct_Format"
        }

        return NSLocalizedString("Email_Not_Correct_Format", bundle: bundle, comment: "")
      }

      /// en translation: The entered phone does not   have an active account
      ///
      /// Locales: en, es
      static func active_Account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("active_Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "active_Account"
        }

        return NSLocalizedString("active_Account", bundle: bundle, comment: "")
      }

      /// en translation: The expiration date is invalid.
      ///
      /// Locales: en, es, English
      static func expire_Date_Invalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Expire_Date_Invalid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Expire_Date_Invalid"
        }

        return NSLocalizedString("Expire_Date_Invalid", bundle: bundle, comment: "")
      }

      /// en translation: The limit for this product is 
      ///
      /// Locales: en, es
      static func limit_Product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Limit_Product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Limit_Product"
        }

        return NSLocalizedString("Limit_Product", bundle: bundle, comment: "")
      }

      /// en translation: The location could not be determined
      ///
      /// Locales: en, es, English
      static func locationImpossibleLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationImpossibleLocation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationImpossibleLocation"
        }

        return NSLocalizedString("LocationImpossibleLocation", bundle: bundle, comment: "")
      }

      /// en translation: The mail was sent, you can close this screen
      ///
      /// Locales: en, es, English
      static func emailSentMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EmailSentMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "EmailSentMessage"
        }

        return NSLocalizedString("EmailSentMessage", bundle: bundle, comment: "")
      }

      /// en translation: The minimum purchase of this business is __min__, add something else
      ///
      /// Locales: en, es, English
      static func minOrderRequiredMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MinOrderRequiredMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MinOrderRequiredMessage"
        }

        return NSLocalizedString("MinOrderRequiredMessage", bundle: bundle, comment: "")
      }

      /// en translation: The name field is required
      ///
      /// Locales: en, es, English
      static func name_Filed_Rquired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name_Filed_Rquired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name_Filed_Rquired"
        }

        return NSLocalizedString("Name_Filed_Rquired", bundle: bundle, comment: "")
      }

      /// en translation: The new point is very far from the original point.
      ///
      /// Locales: en, es
      static func lbl_AlertTransport_FarAway_Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AlertTransport_FarAway_Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AlertTransport_FarAway_Subtitle"
        }

        return NSLocalizedString("lbl_AlertTransport_FarAway_Subtitle", bundle: bundle, comment: "")
      }

      /// en translation: The number **** **** is linked to a login through Facebook. We'd like you to validate your account through this social network.
      ///
      /// Locales: en, es, English
      static func lbl_ValidPhoneLoginWithFB_lengend_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidPhoneLoginWithFB_lengend_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidPhoneLoginWithFB_lengend_Text"
        }

        return NSLocalizedString("lbl_ValidPhoneLoginWithFB_lengend_Text", bundle: bundle, comment: "")
      }

      /// en translation: The number entered already has an active account
      ///
      /// Locales: en, es
      static func lbl_Step1_Already_Active(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Already_Active", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Already_Active"
        }

        return NSLocalizedString("lbl_Step1_Already_Active", bundle: bundle, comment: "")
      }

      /// en translation: The number of the card entered is invalid.
      ///
      /// Locales: en, es, English
      static func enter_Invalid_Card_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter_Invalid_Card_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter_Invalid_Card_Number"
        }

        return NSLocalizedString("Enter_Invalid_Card_Number", bundle: bundle, comment: "")
      }

      /// en translation: The number you entered is linked to another account, please try to enter your password
      ///
      /// Locales: en, es, English
      static func lbl_Existing_Account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Existing_Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Existing_Account"
        }

        return NSLocalizedString("lbl_Existing_Account", bundle: bundle, comment: "")
      }

      /// en translation: The order cannot be processed
      ///
      /// Locales: en, es, English
      static func orderProcessTerritoryTitleError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderProcessTerritoryTitleError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderProcessTerritoryTitleError"
        }

        return NSLocalizedString("OrderProcessTerritoryTitleError", bundle: bundle, comment: "")
      }

      /// en translation: The password does not meet one or more of the necessary requirements.
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Neccesary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Neccesary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Neccesary"
        }

        return NSLocalizedString("lbl_CreatePassword_Neccesary", bundle: bundle, comment: "")
      }

      /// en translation: The password entered is invalid
      ///
      /// Locales: en, es
      static func lbl_LoginPassword_Invalid_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LoginPassword_Invalid_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LoginPassword_Invalid_Password"
        }

        return NSLocalizedString("lbl_LoginPassword_Invalid_Password", bundle: bundle, comment: "")
      }

      /// en translation: The password field is required
      ///
      /// Locales: en, es, English
      static func passwordRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PasswordRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PasswordRequired"
        }

        return NSLocalizedString("PasswordRequired", bundle: bundle, comment: "")
      }

      /// en translation: The password is mandatory
      ///
      /// Locales: en, es, English
      static func passNoValidMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PassNoValidMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PassNoValidMessage"
        }

        return NSLocalizedString("PassNoValidMessage", bundle: bundle, comment: "")
      }

      /// en translation: The password must have:                                        At least one number                                        At least one symbol                                        At least one lowercase                                        at least one capital letter                                        A minimum of eight characters 
      ///
      /// Locales: en, es, English
      static func weakPasswordSubmitted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeakPasswordSubmitted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeakPasswordSubmitted"
        }

        return NSLocalizedString("WeakPasswordSubmitted", bundle: bundle, comment: "")
      }

      /// en translation: The phone can only contain numbers
      ///
      /// Locales: en, es, English
      static func cannotHaveLetttersMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannotHaveLetttersMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannotHaveLetttersMessage"
        }

        return NSLocalizedString("cannotHaveLetttersMessage", bundle: bundle, comment: "")
      }

      /// en translation: The phone must contain $1 digits
      ///
      /// Locales: en, es, English
      static func cannotHaveMoreOrLessCharactersMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannotHaveMoreOrLessCharactersMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannotHaveMoreOrLessCharactersMessage"
        }

        return NSLocalizedString("cannotHaveMoreOrLessCharactersMessage", bundle: bundle, comment: "")
      }

      /// en translation: The phone must not contain blank spaces
      ///
      /// Locales: en, es, English
      static func cannotHaveBlankSpacesMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannotHaveBlankSpacesMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannotHaveBlankSpacesMessage"
        }

        return NSLocalizedString("cannotHaveBlankSpacesMessage", bundle: bundle, comment: "")
      }

      /// en translation: The phone must not contain the country code
      ///
      /// Locales: en, es, English
      static func cannotHaveCountryCodeInPhoneMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannotHaveCountryCodeInPhoneMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannotHaveCountryCodeInPhoneMessage"
        }

        return NSLocalizedString("cannotHaveCountryCodeInPhoneMessage", bundle: bundle, comment: "")
      }

      /// en translation: The phone number is very important for the proper functioning of the app.
      ///
      /// Locales: en, es, English
      static func lbl_Proper_Testing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Proper_Testing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Proper_Testing"
        }

        return NSLocalizedString("lbl_Proper_Testing", bundle: bundle, comment: "")
      }

      /// en translation: The phone number must contain $1 digits. Please verify the number entered.
      ///
      /// Locales: en, es
      static func contain_Digit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contain_Digit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "contain_Digit"
        }

        return NSLocalizedString("contain_Digit", bundle: bundle, comment: "")
      }

      /// en translation: The points of the banks that apply will be consulted.
      ///
      /// Locales: en, es, English
      static func lbl_PaymentTypeSelection_Consulted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PaymentTypeSelection_Consulted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PaymentTypeSelection_Consulted"
        }

        return NSLocalizedString("lbl_PaymentTypeSelection_Consulted", bundle: bundle, comment: "")
      }

      /// en translation: The requested fields are required.
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Require(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Require", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Require"
        }

        return NSLocalizedString("lbl_CreatePassword_Require", bundle: bundle, comment: "")
      }

      /// en translation: The sale of these products is not allowed to minors.
      ///
      /// Locales: en, es
      static func lbl_AgeReuired_Product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AgeReuired_Product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AgeReuired_Product"
        }

        return NSLocalizedString("lbl_AgeReuired_Product", bundle: bundle, comment: "")
      }

      /// en translation: The security number is invalid.
      ///
      /// Locales: en, es
      static func security_number_Invalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Security_number_Invalid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Security_number_Invalid"
        }

        return NSLocalizedString("Security_number_Invalid", bundle: bundle, comment: "")
      }

      /// en translation: The security number is invalid.
      ///
      /// Locales: en, es, English
      static func scurity_Number_Invalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Scurity_Number_Invalid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Scurity_Number_Invalid"
        }

        return NSLocalizedString("Scurity_Number_Invalid", bundle: bundle, comment: "")
      }

      /// en translation: The selected address is not within the coverage area
      ///
      /// Locales: en, es, English
      static func orderProcessTerritoryMsgError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderProcessTerritoryMsgError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderProcessTerritoryMsgError"
        }

        return NSLocalizedString("OrderProcessTerritoryMsgError", bundle: bundle, comment: "")
      }

      /// en translation: The selected address is outside the coverage range of the trade. If you want to change to this address your order will be automatically canceled. Do you want to continue?
      ///
      /// Locales: en, es, English
      static func wrongRangeAddressDeleteOrderMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongRangeAddressDeleteOrderMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongRangeAddressDeleteOrderMessage"
        }

        return NSLocalizedString("WrongRangeAddressDeleteOrderMessage", bundle: bundle, comment: "")
      }

      /// en translation: The selected destination is outside our area of ​​operations. Please choose another address
      ///
      /// Locales: en, es, English
      static func hotZoneMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HotZoneMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HotZoneMessage"
        }

        return NSLocalizedString("HotZoneMessage", bundle: bundle, comment: "")
      }

      /// en translation: The time of the scheduled order has expired, select a new one
      ///
      /// Locales: en, es
      static func alert_sch_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_sch_expired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_sch_expired"
        }

        return NSLocalizedString("alert_sch_expired", bundle: bundle, comment: "")
      }

      /// en translation: The token must contain 8 digits
      ///
      /// Locales: en, es, English
      static func tokenErrorDigitsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokenErrorDigitsMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokenErrorDigitsMessage"
        }

        return NSLocalizedString("tokenErrorDigitsMessage", bundle: bundle, comment: "")
      }

      /// en translation: The total of the purchase does not exceed the minimum amount for card payment.   Do you want to change the payment to cash?
      ///
      /// Locales: en, es, English
      static func ccPaymentMinimunAmountBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCPaymentMinimunAmountBody", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCPaymentMinimunAmountBody"
        }

        return NSLocalizedString("CCPaymentMinimunAmountBody", bundle: bundle, comment: "")
      }

      /// en translation: The transaction was not possible, please try another form of payment or contact your bank, reason: $1
      ///
      /// Locales: en, es, English
      static func ccPaymentErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCPaymentErrorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCPaymentErrorMessage"
        }

        return NSLocalizedString("CCPaymentErrorMessage", bundle: bundle, comment: "")
      }

      /// en translation: The update was successful
      ///
      /// Locales: en, es
      static func hp_biometrics_update_was_successful(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_biometrics_update_was_successful", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_biometrics_update_was_successful"
        }

        return NSLocalizedString("hp_biometrics_update_was_successful", bundle: bundle, comment: "")
      }

      /// en translation: The username or password are incorrect
      ///
      /// Locales: en, es, English
      static func userOrPassNoValidTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserOrPassNoValidTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserOrPassNoValidTitle"
        }

        return NSLocalizedString("UserOrPassNoValidTitle", bundle: bundle, comment: "")
      }

      /// en translation: The username or password entered is not correct, please verify the information again.
      ///
      /// Locales: en, es
      static func password_Not_Correct(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password_Not_Correct", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password_Not_Correct"
        }

        return NSLocalizedString("Password_Not_Correct", bundle: bundle, comment: "")
      }

      /// en translation: The value of the change must be greater than the total of the order
      ///
      /// Locales: en, es, English
      static func minimumAmounMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MinimumAmounMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MinimumAmounMessage"
        }

        return NSLocalizedString("MinimumAmounMessage", bundle: bundle, comment: "")
      }

      /// en translation: There are no active orders
      ///
      /// Locales: en, es, English
      static func ordersList_No_Active_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrdersList_No_Active_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrdersList_No_Active_Order"
        }

        return NSLocalizedString("OrdersList_No_Active_Order", bundle: bundle, comment: "")
      }

      /// en translation: There are no addresses.
      ///
      /// Locales: en, English
      static func lbl_WelcomeMaps_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WelcomeMaps_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WelcomeMaps_address"
        }

        return NSLocalizedString("lbl_WelcomeMaps_address", bundle: bundle, comment: "")
      }

      /// en translation: There are no registered cards
      ///
      /// Locales: en, es, English
      static func no_Card_Register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No_Card_Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No_Card_Register"
        }

        return NSLocalizedString("No_Card_Register", bundle: bundle, comment: "")
      }

      /// en translation: There are no results in this covered area.
      ///
      /// Locales: en, es, English
      static func lbl_Main_Not_Coverage_Area(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_Not_Coverage_Area", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_Not_Coverage_Area"
        }

        return NSLocalizedString("lbl_Main_Not_Coverage_Area", bundle: bundle, comment: "")
      }

      /// en translation: There are no transactions for the selected filter
      ///
      /// Locales: en, es
      static func hp_full_TransactionHPFullViewController_EmptyTextFilter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionHPFullViewController_EmptyTextFilter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionHPFullViewController_EmptyTextFilter"
        }

        return NSLocalizedString("hp_full_TransactionHPFullViewController_EmptyTextFilter", bundle: bundle, comment: "")
      }

      /// en translation: There are no transactions for the selected range
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_list_emptytitlefilters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_list_emptytitlefilters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_list_emptytitlefilters"
        }

        return NSLocalizedString("hp_lbl_transaction_list_emptytitlefilters", bundle: bundle, comment: "")
      }

      /// en translation: There is a problem
      ///
      /// Locales: en, es, English
      static func problemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ProblemTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ProblemTitle"
        }

        return NSLocalizedString("ProblemTitle", bundle: bundle, comment: "")
      }

      /// en translation: There is an account associated with this phone
      ///
      /// Locales: en, es
      static func account_Assocaite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_Assocaite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account_Assocaite"
        }

        return NSLocalizedString("account_Assocaite", bundle: bundle, comment: "")
      }

      /// en translation: There is no user associated with this email, it is possible that your profile was created with Facebook
      ///
      /// Locales: en, es
      static func create_With_Facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create_With_Facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create_With_Facebook"
        }

        return NSLocalizedString("Create_With_Facebook", bundle: bundle, comment: "")
      }

      /// en translation: There isn't any registered address.
      ///
      /// Locales: en, es, English
      static func lbl_ProfileOptions_Not_Resgister(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProfileOptions_Not_Resgister", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProfileOptions_Not_Resgister"
        }

        return NSLocalizedString("lbl_ProfileOptions_Not_Resgister", bundle: bundle, comment: "")
      }

      /// en translation: There was a problem
      ///
      /// Locales: en, es, English
      static func aProblemOcurredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AProblemOcurredTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AProblemOcurredTitle"
        }

        return NSLocalizedString("AProblemOcurredTitle", bundle: bundle, comment: "")
      }

      /// en translation: There was a problem
      ///
      /// Locales: en, es, English
      static func tokenErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokenErrorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokenErrorTitle"
        }

        return NSLocalizedString("tokenErrorTitle", bundle: bundle, comment: "")
      }

      /// en translation: There was a problem when logging in
      ///
      /// Locales: en, es, English
      static func lbl_Proble_When_Entering(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Proble_When_Entering", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Proble_When_Entering"
        }

        return NSLocalizedString("lbl_Proble_When_Entering", bundle: bundle, comment: "")
      }

      /// en translation: There was a problem with the transaction
      ///
      /// Locales: en, es, English
      static func ccPaymentErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCPaymentErrorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCPaymentErrorTitle"
        }

        return NSLocalizedString("CCPaymentErrorTitle", bundle: bundle, comment: "")
      }

      /// en translation: Think of me as your personal assistant
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Cell_Shack_Hand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Cell_Shack_Hand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Cell_Shack_Hand"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Cell_Shack_Hand", bundle: bundle, comment: "")
      }

      /// en translation: This address does not belong to the coverage area of ​​your order, please select a different one
      ///
      /// Locales: en, es, English
      static func wrongTerritoryAddressMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongTerritoryAddressMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongTerritoryAddressMessage"
        }

        return NSLocalizedString("WrongTerritoryAddressMessage", bundle: bundle, comment: "")
      }

      /// en translation: This card does not apply.
      ///
      /// Locales: en, es, English
      static func lbl_CardTable_Not_Apply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CardTable_Not_Apply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CardTable_Not_Apply"
        }

        return NSLocalizedString("lbl_CardTable_Not_Apply", bundle: bundle, comment: "")
      }

      /// en translation: This coupon is not valid in this order 😵
      ///
      /// Locales: en, es, English
      static func noValidCouponMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoValidCouponMsg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoValidCouponMsg"
        }

        return NSLocalizedString("NoValidCouponMsg", bundle: bundle, comment: "")
      }

      /// en translation: This is taking too long, check your connection and try again
      ///
      /// Locales: en, es
      static func hp_conecction_taking_too_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_conecction_taking_too_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_conecction_taking_too_long"
        }

        return NSLocalizedString("hp_conecction_taking_too_long", bundle: bundle, comment: "")
      }

      /// en translation: This is the cashback you have obtained   from your purchases. Use it when paying with QR!
      ///
      /// Locales: en, es
      static func hp_cashback_message_about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_cashback_message_about", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_cashback_message_about"
        }

        return NSLocalizedString("hp_cashback_message_about", bundle: bundle, comment: "")
      }

      /// en translation: This number will be important for us.
      ///
      /// Locales: en, es, English
      static func lbl_CorrectNumber_Importtance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CorrectNumber_Importtance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CorrectNumber_Importtance"
        }

        return NSLocalizedString("lbl_CorrectNumber_Importtance", bundle: bundle, comment: "")
      }

      /// en translation: This order is already beign processed
      ///
      /// Locales: en, es
      static func hp_message_order_in_process(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_message_order_in_process", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_message_order_in_process"
        }

        return NSLocalizedString("hp_message_order_in_process", bundle: bundle, comment: "")
      }

      /// en translation: This process can take up to 90 days depending on your bank.
      ///
      /// Locales: en, es
      static func lbl_Program_Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Program_Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Program_Subtitle"
        }

        return NSLocalizedString("lbl_Program_Subtitle", bundle: bundle, comment: "")
      }

      /// en translation: This product is no longer available, we recommend you a similar product.
      ///
      /// Locales: en, es
      static func lbl_product_unavailable_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_product_unavailable_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_product_unavailable_message"
        }

        return NSLocalizedString("lbl_product_unavailable_message", bundle: bundle, comment: "")
      }

      /// en translation: This product requires to show your identity document
      ///
      /// Locales: en, es, English
      static func productRequireDocTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ProductRequireDocTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ProductRequireDocTitle"
        }

        return NSLocalizedString("ProductRequireDocTitle", bundle: bundle, comment: "")
      }

      /// en translation: This purchase requires an invitation code, if you have received one, insert it in the space above and then tap continue.
      ///
      /// Locales: en, es, English
      static func lbl_OrderRedeem_Invitation_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderRedeem_Invitation_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderRedeem_Invitation_Code"
        }

        return NSLocalizedString("lbl_OrderRedeem_Invitation_Code", bundle: bundle, comment: "")
      }

      /// en translation: This trade is closed for the moment
      ///
      /// Locales: en, es, English
      static func closeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CloseMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CloseMessage"
        }

        return NSLocalizedString("CloseMessage", bundle: bundle, comment: "")
      }

      /// en translation: This trade only allows adding $1 per purchase
      ///
      /// Locales: en, es, English
      static func partnerLimitMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PartnerLimitMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PartnerLimitMessage"
        }

        return NSLocalizedString("PartnerLimitMessage", bundle: bundle, comment: "")
      }

      /// en translation: Time
      ///
      /// Locales: en, es
      static func lblpartnerBadRatings3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblpartnerBadRatings3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblpartnerBadRatings3"
        }

        return NSLocalizedString("lblpartnerBadRatings3", bundle: bundle, comment: "")
      }

      /// en translation: Title address
      ///
      /// Locales: en, es, English
      static func lbl_SearchAddress_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchAddress_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchAddress_Title"
        }

        return NSLocalizedString("lbl_SearchAddress_Title", bundle: bundle, comment: "")
      }

      /// en translation: To
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_to"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_to", bundle: bundle, comment: "")
      }

      /// en translation: To authorize the use of your card
      ///
      /// Locales: en, es
      static func cvcDescAutorization_Base(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CVCDescAutorization_Base", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CVCDescAutorization_Base"
        }

        return NSLocalizedString("CVCDescAutorization_Base", bundle: bundle, comment: "")
      }

      /// en translation: To cancel an order
      ///
      /// Locales: en, es, English
      static func cancelOrderTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelOrderTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelOrderTitle"
        }

        return NSLocalizedString("CancelOrderTitle", bundle: bundle, comment: "")
      }

      /// en translation: To continue it is necessary that all the requested fields are completed
      ///
      /// Locales: en, es
      static func to_Continue_Ness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("To_Continue_Ness", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "To_Continue_Ness"
        }

        return NSLocalizedString("To_Continue_Ness", bundle: bundle, comment: "")
      }

      /// en translation: To continue we must create a profile for you, it is easy and fast, it will take you less than a minute. Do you want to continue?
      ///
      /// Locales: en, es
      static func do_You_Continuous(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Do_You_Continuous", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Do_You_Continuous"
        }

        return NSLocalizedString("Do_You_Continuous", bundle: bundle, comment: "")
      }

      /// en translation: To continue you must accept the terms and conditions
      ///
      /// Locales: en, es
      static func accept_Terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Accept_Terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Accept_Terms"
        }

        return NSLocalizedString("Accept_Terms", bundle: bundle, comment: "")
      }

      /// en translation: To continue you must choose a location manually to provide you with our services
      ///
      /// Locales: en, es, English
      static func lbl_To_Continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_To_Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_To_Continue"
        }

        return NSLocalizedString("lbl_To_Continue", bundle: bundle, comment: "")
      }

      /// en translation: To continue you need to enter your password
      ///
      /// Locales: en, es
      static func to_Continue_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("To_Continue_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "To_Continue_Password"
        }

        return NSLocalizedString("To_Continue_Password", bundle: bundle, comment: "")
      }

      /// en translation: To enter hugo we need to know your location, in order to provide you with our services.
      ///
      /// Locales: en, es
      static func need_Location_Service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Need_Location_Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Need_Location_Service"
        }

        return NSLocalizedString("Need_Location_Service", bundle: bundle, comment: "")
      }

      /// en translation: To enter you must   select a territory
      ///
      /// Locales: en, es
      static func lbl_Territory_Selcet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Territory_Selcet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Territory_Selcet"
        }

        return NSLocalizedString("lbl_Territory_Selcet", bundle: bundle, comment: "")
      }

      /// en translation: To get started, enter your phone number.
      ///
      /// Locales: en, es
      static func lbl_Step1_Start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Start"
        }

        return NSLocalizedString("lbl_Step1_Start", bundle: bundle, comment: "")
      }

      /// en translation: To give you a better experience, help us with your authorization in the necessary permissions. Go to Accesses, Location to configure them.
      ///
      /// Locales: en, es
      static func locationNoAccess2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationNoAccess2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationNoAccess2"
        }

        return NSLocalizedString("LocationNoAccess2", bundle: bundle, comment: "")
      }

      /// en translation: To give you the best experience, we will request your authorization on the necessary permissions.
      ///
      /// Locales: en, es
      static func authu_naessary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Authu_naessary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Authu_naessary"
        }

        return NSLocalizedString("Authu_naessary", bundle: bundle, comment: "")
      }

      /// en translation: To make a round trip you must select an address for point A
      ///
      /// Locales: en, es, English
      static func shipmentRoundTrip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ShipmentRoundTrip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ShipmentRoundTrip"
        }

        return NSLocalizedString("ShipmentRoundTrip", bundle: bundle, comment: "")
      }

      /// en translation: To update
      ///
      /// Locales: en, es, English
      static func actualizar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Actualizar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Actualizar"
        }

        return NSLocalizedString("Actualizar", bundle: bundle, comment: "")
      }

      /// en translation: To update
      ///
      /// Locales: en, es, English
      static func newVersionButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NewVersionButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NewVersionButton"
        }

        return NSLocalizedString("NewVersionButton", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, es
      static func hp_total_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_total_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_total_title"
        }

        return NSLocalizedString("hp_total_title", bundle: bundle, comment: "")
      }

      /// en translation: Total cost of delivery only
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentPurchase_Total_Cost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentPurchase_Total_Cost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentPurchase_Total_Cost"
        }

        return NSLocalizedString("lbl_ShipmentPurchase_Total_Cost", bundle: bundle, comment: "")
      }

      /// en translation: Total: $20.23
      ///
      /// Locales: en, es, English
      static func lbl_RideOrderTable_Total(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideOrderTable_Total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideOrderTable_Total"
        }

        return NSLocalizedString("lbl_RideOrderTable_Total", bundle: bundle, comment: "")
      }

      /// en translation: Trabajo
      ///
      /// Locales: en, es, English
      static func lbl_PickingRide2_Job(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PickingRide2_Job", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PickingRide2_Job"
        }

        return NSLocalizedString("lbl_PickingRide2_Job", bundle: bundle, comment: "")
      }

      /// en translation: Track order
      ///
      /// Locales: en, es, English
      static func track(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Track", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Track"
        }

        return NSLocalizedString("Track", bundle: bundle, comment: "")
      }

      /// en translation: Tracking
      ///
      /// Locales: en, es
      static func lblhugoBadRatings3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoBadRatings3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoBadRatings3"
        }

        return NSLocalizedString("lblhugoBadRatings3", bundle: bundle, comment: "")
      }

      /// en translation: Tracking
      ///
      /// Locales: en, es
      static func lblhugoGoodRatings1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoGoodRatings1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoGoodRatings1"
        }

        return NSLocalizedString("lblhugoGoodRatings1", bundle: bundle, comment: "")
      }

      /// en translation: Trade not found
      ///
      /// Locales: en, es
      static func search_Not_Found(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search_Not_Found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search_Not_Found"
        }

        return NSLocalizedString("Search_Not_Found", bundle: bundle, comment: "")
      }

      /// en translation: Transaction ID
      ///
      /// Locales: en, es
      static func hp_transaction_id_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_transaction_id_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_transaction_id_title"
        }

        return NSLocalizedString("hp_transaction_id_title", bundle: bundle, comment: "")
      }

      /// en translation: Transactions
      ///
      /// Locales: en, es
      static func hp_lbl_home_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_home_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_home_transactions"
        }

        return NSLocalizedString("hp_lbl_home_transactions", bundle: bundle, comment: "")
      }

      /// en translation: Transactions of
      ///
      /// Locales: en, es
      static func hp_expense_control_transactions_of(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_expense_control_transactions_of", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_expense_control_transactions_of"
        }

        return NSLocalizedString("hp_expense_control_transactions_of", bundle: bundle, comment: "")
      }

      /// en translation: Transportation
      ///
      /// Locales: en, es, English
      static func lbl_RideOrderTable_Transporte(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideOrderTable_Transporte", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideOrderTable_Transporte"
        }

        return NSLocalizedString("lbl_RideOrderTable_Transporte", bundle: bundle, comment: "")
      }

      /// en translation: Travel safe
      ///
      /// Locales: en, es
      static func safe_travels(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("safe_travels", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "safe_travels"
        }

        return NSLocalizedString("safe_travels", bundle: bundle, comment: "")
      }

      /// en translation: Tributo a Natalia Lafourcade
      ///
      /// Locales: en, es, English
      static func lbl_DateRangePicker_Tribute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DateRangePicker_Tribute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DateRangePicker_Tribute"
        }

        return NSLocalizedString("lbl_DateRangePicker_Tribute", bundle: bundle, comment: "")
      }

      /// en translation: Try again
      ///
      /// Locales: en, es
      static func hp_create_pin_dont_match_second(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_create_pin_dont_match_second", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_create_pin_dont_match_second"
        }

        return NSLocalizedString("hp_create_pin_dont_match_second", bundle: bundle, comment: "")
      }

      /// en translation: Try again
      ///
      /// Locales: en, es
      static func hp_verify_pin_try_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_verify_pin_try_again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_verify_pin_try_again"
        }

        return NSLocalizedString("hp_verify_pin_try_again", bundle: bundle, comment: "")
      }

      /// en translation: Type a comment…
      ///
      /// Locales: en, es, English
      static func lbl_Type_Of_Comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Type_Of_Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Type_Of_Comment"
        }

        return NSLocalizedString("lbl_Type_Of_Comment", bundle: bundle, comment: "")
      }

      /// en translation: Type a text to search
      ///
      /// Locales: en, es
      static func search_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search_Text"
        }

        return NSLocalizedString("Search_Text", bundle: bundle, comment: "")
      }

      /// en translation: Type of address required
      ///
      /// Locales: en, es, English
      static func addressTypeRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddressTypeRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AddressTypeRequired"
        }

        return NSLocalizedString("AddressTypeRequired", bundle: bundle, comment: "")
      }

      /// en translation: Type of card
      ///
      /// Locales: en, es, English
      static func txt_creditcard_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_creditcard_type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_creditcard_type"
        }

        return NSLocalizedString("txt_creditcard_type", bundle: bundle, comment: "")
      }

      /// en translation: Type of monthly consumption
      ///
      /// Locales: en, es
      static func hp_expense_control_type_monthly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_expense_control_type_monthly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_expense_control_type_monthly"
        }

        return NSLocalizedString("hp_expense_control_type_monthly", bundle: bundle, comment: "")
      }

      /// en translation: UPDATE
      ///
      /// Locales: en, es
      static func receipt_configuration_edit_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_edit_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_edit_button_title"
        }

        return NSLocalizedString("receipt_configuration_edit_button_title", bundle: bundle, comment: "")
      }

      /// en translation: UPDATE AND VALIDATE
      ///
      /// Locales: en, es, English
      static func btn_ValidateEmail_Update_Validate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidateEmail_Update_Validate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidateEmail_Update_Validate"
        }

        return NSLocalizedString("btn_ValidateEmail_Update_Validate", bundle: bundle, comment: "")
      }

      /// en translation: UPDATE CARD
      ///
      /// Locales: en, es
      static func update_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update_Card"
        }

        return NSLocalizedString("Update_Card", bundle: bundle, comment: "")
      }

      /// en translation: UPDATE PAYMENT
      ///
      /// Locales: en, es
      static func lbl_Update_Payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Update_Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Update_Payment"
        }

        return NSLocalizedString("lbl_Update_Payment", bundle: bundle, comment: "")
      }

      /// en translation: UPDATED REQUEST
      ///
      /// Locales: en, es, English
      static func lbl_Update_App(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Update_App", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Update_App"
        }

        return NSLocalizedString("lbl_Update_App", bundle: bundle, comment: "")
      }

      /// en translation: UPLOAD PROOF OF PAYMENT
      ///
      /// Locales: en, es
      static func lbl_PaymentTypeSelection_Upload_Voucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PaymentTypeSelection_Upload_Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PaymentTypeSelection_Upload_Voucher"
        }

        return NSLocalizedString("lbl_PaymentTypeSelection_Upload_Voucher", bundle: bundle, comment: "")
      }

      /// en translation: UPS!
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentError"
        }

        return NSLocalizedString("lbl_ShipmentError", bundle: bundle, comment: "")
      }

      /// en translation: USE DATA
      ///
      /// Locales: en, es
      static func btn_Use_Billing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Use_Billing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Use_Billing"
        }

        return NSLocalizedString("btn_Use_Billing", bundle: bundle, comment: "")
      }

      /// en translation: USE INFORMATION
      ///
      /// Locales: en, es
      static func receipt_list_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_list_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_list_button_title"
        }

        return NSLocalizedString("receipt_list_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Unable to complete action 😣
      ///
      /// Locales: en, es, English
      static func helpRequestFailedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helpRequestFailedTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helpRequestFailedTitle"
        }

        return NSLocalizedString("helpRequestFailedTitle", bundle: bundle, comment: "")
      }

      /// en translation: Unexpected Error 😵
      ///
      /// Locales: en, es, English
      static func generalErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GeneralErrorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GeneralErrorTitle"
        }

        return NSLocalizedString("GeneralErrorTitle", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error
      ///
      /// Locales: en, es, English
      static func ccPaymentGeneralTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCPaymentGeneralTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCPaymentGeneralTitle"
        }

        return NSLocalizedString("CCPaymentGeneralTitle", bundle: bundle, comment: "")
      }

      /// en translation: Unsatisfied
      ///
      /// Locales: en, es, English
      static func lbl_RatingCell_Your_Dissatisfied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingCell_Your_Dissatisfied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingCell_Your_Dissatisfied"
        }

        return NSLocalizedString("lbl_RatingCell_Your_Dissatisfied", bundle: bundle, comment: "")
      }

      /// en translation: Unselect all
      ///
      /// Locales: en, es
      static func hp_lbl_notifications_unselect_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_notifications_unselect_all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_notifications_unselect_all"
        }

        return NSLocalizedString("hp_lbl_notifications_unselect_all", bundle: bundle, comment: "")
      }

      /// en translation: Update data
      ///
      /// Locales: en, es
      static func receipt_configuration_edit_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receipt_configuration_edit_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receipt_configuration_edit_subtitle"
        }

        return NSLocalizedString("receipt_configuration_edit_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Update your email!
      ///
      /// Locales: en, es, English
      static func lbl_ValidateEmail_Update_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateEmail_Update_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateEmail_Update_email"
        }

        return NSLocalizedString("lbl_ValidateEmail_Update_email", bundle: bundle, comment: "")
      }

      /// en translation: Update your password!
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Update_Password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Update_Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Update_Password"
        }

        return NSLocalizedString("lbl_CreatePassword_Update_Password", bundle: bundle, comment: "")
      }

      /// en translation: Update.
      ///
      /// Locales: en, es, English
      static func btn_Update_ToUpdate_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Update_ToUpdate_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Update_ToUpdate_Text"
        }

        return NSLocalizedString("btn_Update_ToUpdate_Text", bundle: bundle, comment: "")
      }

      /// en translation: Updating...
      ///
      /// Locales: en, es
      static func searching_points_calculating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Searching_points_calculating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Searching_points_calculating"
        }

        return NSLocalizedString("Searching_points_calculating", bundle: bundle, comment: "")
      }

      /// en translation: Ups it looks like you've locked your account.
      ///
      /// Locales: en, es
      static func hp_block_account_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_block_account_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_block_account_title"
        }

        return NSLocalizedString("hp_block_account_title", bundle: bundle, comment: "")
      }

      /// en translation: Ups!
      ///
      /// Locales: en, es, English
      static func lbl_Outstanding_Ups(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Outstanding_Ups", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Outstanding_Ups"
        }

        return NSLocalizedString("lbl_Outstanding_Ups", bundle: bundle, comment: "")
      }

      /// en translation: Ups! Something went wrong
      ///
      /// Locales: en, es, English
      static func lbl_Whoops_Somthing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Whoops_Somthing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Whoops_Somthing"
        }

        return NSLocalizedString("lbl_Whoops_Somthing", bundle: bundle, comment: "")
      }

      /// en translation: Use Fingertip in place of your Passcode for faster purchases
      ///
      /// Locales: en, es
      static func hp_lbl_account_desc_biometric(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_account_desc_biometric", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_account_desc_biometric"
        }

        return NSLocalizedString("hp_lbl_account_desc_biometric", bundle: bundle, comment: "")
      }

      /// en translation: Use another address
      ///
      /// Locales: en, es, English
      static func chooseOtherAddrTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ChooseOtherAddrTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ChooseOtherAddrTitle"
        }

        return NSLocalizedString("ChooseOtherAddrTitle", bundle: bundle, comment: "")
      }

      /// en translation: Use either phone number or email address
      ///
      /// Locales: en, es
      static func hp_full_invalid_fields(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_invalid_fields", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_invalid_fields"
        }

        return NSLocalizedString("hp_full_invalid_fields", bundle: bundle, comment: "")
      }

      /// en translation: Use my Cashback
      ///
      /// Locales: en, es
      static func hp_lbl_qr_payment_use_my_cashback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_payment_use_my_cashback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_payment_use_my_cashback"
        }

        return NSLocalizedString("hp_lbl_qr_payment_use_my_cashback", bundle: bundle, comment: "")
      }

      /// en translation: Use points
      ///
      /// Locales: en, es, English
      static func lbl_Use_Point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Use_Point", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Use_Point"
        }

        return NSLocalizedString("lbl_Use_Point", bundle: bundle, comment: "")
      }

      /// en translation: Use this address
      ///
      /// Locales: en, es, English
      static func btn_AddressBook_Use_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_AddressBook_Use_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_AddressBook_Use_Address"
        }

        return NSLocalizedString("btn_AddressBook_Use_Address", bundle: bundle, comment: "")
      }

      /// en translation: Use this card
      ///
      /// Locales: en, es, English
      static func btn_use_this_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_use_this_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_use_this_card"
        }

        return NSLocalizedString("btn_use_this_card", bundle: bundle, comment: "")
      }

      /// en translation: Use this information.
      ///
      /// Locales: en, es, English
      static func billing_use_the_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("billing_use_the_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "billing_use_the_info"
        }

        return NSLocalizedString("billing_use_the_info", bundle: bundle, comment: "")
      }

      /// en translation: Use this prize.
      ///
      /// Locales: en, es, English
      static func btn_Promos_Used_Awards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_Promos_Used_Awards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_Promos_Used_Awards"
        }

        return NSLocalizedString("btn_Promos_Used_Awards", bundle: bundle, comment: "")
      }

      /// en translation: User is required
      ///
      /// Locales: en, es, English
      static func userRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserRequired"
        }

        return NSLocalizedString("UserRequired", bundle: bundle, comment: "")
      }

      /// en translation: VALIDATE
      ///
      /// Locales: en, es
      static func hp_temporal_code_validate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_temporal_code_validate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_temporal_code_validate"
        }

        return NSLocalizedString("hp_temporal_code_validate", bundle: bundle, comment: "")
      }

      /// en translation: VALIDATE CODE
      ///
      /// Locales: en, es
      static func valid_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("valid_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "valid_code"
        }

        return NSLocalizedString("valid_code", bundle: bundle, comment: "")
      }

      /// en translation: VALIDATE WITH FACEBOOK
      ///
      /// Locales: en, es, English
      static func btn_ValidPhoneLoginWithFB_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_ValidPhoneLoginWithFB_save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_ValidPhoneLoginWithFB_save"
        }

        return NSLocalizedString("btn_ValidPhoneLoginWithFB_save", bundle: bundle, comment: "")
      }

      /// en translation: VIP / A
      ///
      /// Locales: en, es, English
      static func lbl_DateRangePicker_Vip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_DateRangePicker_Vip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DateRangePicker_Vip"
        }

        return NSLocalizedString("lbl_DateRangePicker_Vip", bundle: bundle, comment: "")
      }

      /// en translation: Validate your account
      ///
      /// Locales: en, es, English
      static func lbl_Validate_Account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Validate_Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Validate_Account"
        }

        return NSLocalizedString("lbl_Validate_Account", bundle: bundle, comment: "")
      }

      /// en translation: Validate your email.
      ///
      /// Locales: en, es, English
      static func lbl_ValidateEmail_validate_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateEmail_validate_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateEmail_validate_email"
        }

        return NSLocalizedString("lbl_ValidateEmail_validate_email", bundle: bundle, comment: "")
      }

      /// en translation: Vehicles not found
      ///
      /// Locales: en, es, English
      static func vehicleNotAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VehicleNotAvailable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "VehicleNotAvailable"
        }

        return NSLocalizedString("VehicleNotAvailable", bundle: bundle, comment: "")
      }

      /// en translation: Verify your last delivery address or try another address.
      ///
      /// Locales: en, es, English
      static func lbl_Main_Checking_Shipping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_Checking_Shipping", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_Checking_Shipping"
        }

        return NSLocalizedString("lbl_Main_Checking_Shipping", bundle: bundle, comment: "")
      }

      /// en translation: Verify.
      ///
      /// Locales: en, es, English
      static func btn_verifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_verifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_verifier"
        }

        return NSLocalizedString("btn_verifier", bundle: bundle, comment: "")
      }

      /// en translation: Verify.
      ///
      /// Locales: en, es, English
      static func lbl_OrderRedeem_Check(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderRedeem_Check", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderRedeem_Check"
        }

        return NSLocalizedString("lbl_OrderRedeem_Check", bundle: bundle, comment: "")
      }

      /// en translation: Very satisfied
      ///
      /// Locales: en, es, English
      static func lbl_RatingCell_Very_satisfied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingCell_Very_satisfied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingCell_Very_satisfied"
        }

        return NSLocalizedString("lbl_RatingCell_Very_satisfied", bundle: bundle, comment: "")
      }

      /// en translation: Very soon
      ///
      /// Locales: en, es, English
      static func lbl_ServiceSelection_Coming_Soon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ServiceSelection_Coming_Soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ServiceSelection_Coming_Soon"
        }

        return NSLocalizedString("lbl_ServiceSelection_Coming_Soon", bundle: bundle, comment: "")
      }

      /// en translation: View All
      ///
      /// Locales: en, es
      static func hp_lbl_home_viewall(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_home_viewall", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_home_viewall"
        }

        return NSLocalizedString("hp_lbl_home_viewall", bundle: bundle, comment: "")
      }

      /// en translation: View All
      ///
      /// Locales: en, es
      static func hp_my_view_all_transactions_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_my_view_all_transactions_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_my_view_all_transactions_title"
        }

        return NSLocalizedString("hp_my_view_all_transactions_title", bundle: bundle, comment: "")
      }

      /// en translation: WHAT WILL HUGO BUY AT POINT A?
      ///
      /// Locales: en, es
      static func lbl_Hugo_Buy_PointA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Hugo_Buy_PointA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Hugo_Buy_PointA"
        }

        return NSLocalizedString("lbl_Hugo_Buy_PointA", bundle: bundle, comment: "")
      }

      /// en translation: WHAT WILL HUGO BUY AT POINT B?
      ///
      /// Locales: en, es
      static func lbl_Hugo_Buy_PointB(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Hugo_Buy_PointB", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Hugo_Buy_PointB"
        }

        return NSLocalizedString("lbl_Hugo_Buy_PointB", bundle: bundle, comment: "")
      }

      /// en translation: WHAT WILL HUGO DO AT POINT A?
      ///
      /// Locales: en, es, English
      static func lbl_Hugo_PointA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Hugo_PointA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Hugo_PointA"
        }

        return NSLocalizedString("lbl_Hugo_PointA", bundle: bundle, comment: "")
      }

      /// en translation: WHAT WILL HUGO DO AT POINT B?
      ///
      /// Locales: en, es, English
      static func lbl_Hugo_PointB(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Hugo_PointB", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Hugo_PointB"
        }

        return NSLocalizedString("lbl_Hugo_PointB", bundle: bundle, comment: "")
      }

      /// en translation: WHAT WILL HUGO DO AT POINT C?
      ///
      /// Locales: en, es, English
      static func lbl_Hugo_PointC(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Hugo_PointC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Hugo_PointC"
        }

        return NSLocalizedString("lbl_Hugo_PointC", bundle: bundle, comment: "")
      }

      /// en translation: WHAT WILL HUGO DO IN POINT A?
      ///
      /// Locales: en, es, English
      static func lbl_WriteDescription_Point_Hugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WriteDescription_Point_Hugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WriteDescription_Point_Hugo"
        }

        return NSLocalizedString("lbl_WriteDescription_Point_Hugo", bundle: bundle, comment: "")
      }

      /// en translation: Wait a moment!
      ///
      /// Locales: en, es, English
      static func lbl_ValidPhoneLoginWithFB_Main_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidPhoneLoginWithFB_Main_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidPhoneLoginWithFB_Main_Heading"
        }

        return NSLocalizedString("lbl_ValidPhoneLoginWithFB_Main_Heading", bundle: bundle, comment: "")
      }

      /// en translation: Wait for it!
      ///
      /// Locales: en, es, English
      static func comingMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ComingMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ComingMessage"
        }

        return NSLocalizedString("ComingMessage", bundle: bundle, comment: "")
      }

      /// en translation: Water
      ///
      /// Locales: en, es, English
      static func lbl_Category_Water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Category_Water", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Category_Water"
        }

        return NSLocalizedString("lbl_Category_Water", bundle: bundle, comment: "")
      }

      /// en translation: Way to pay
      ///
      /// Locales: en, es, English
      static func paymentTypeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PaymentTypeTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PaymentTypeTitle"
        }

        return NSLocalizedString("PaymentTypeTitle", bundle: bundle, comment: "")
      }

      /// en translation: We apologize for the inconvenience, in this moment we don’t count with the product quantity that you need.
      ///
      /// Locales: en, es
      static func lbl_stock_unavailable_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_stock_unavailable_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_stock_unavailable_message"
        }

        return NSLocalizedString("lbl_stock_unavailable_message", bundle: bundle, comment: "")
      }

      /// en translation: We are creating an expense report for you, with it you can identify your  consumption patterns and make better financial decisions. Keep trading to get it.
      ///
      /// Locales: en, es
      static func hp_expense_control_message_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_expense_control_message_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_expense_control_message_title"
        }

        return NSLocalizedString("hp_expense_control_message_title", bundle: bundle, comment: "")
      }

      /// en translation: We are experiencing high traffic now, it is possible that you get your order in a delivery time of 60 min.
      ///
      /// Locales: en, es, English
      static func lbl_HANotificationBanner_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_HANotificationBanner_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_HANotificationBanner_Text"
        }

        return NSLocalizedString("lbl_HANotificationBanner_Text", bundle: bundle, comment: "")
      }

      /// en translation: We are experiencing high traffic.
      ///
      /// Locales: en, es, English
      static func lbl_Main_Saturation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_Saturation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_Saturation"
        }

        return NSLocalizedString("lbl_Main_Saturation", bundle: bundle, comment: "")
      }

      /// en translation: We are experiencing saturation in this trade, it is possible that your order has a delivery time of more than 60 minutes
      ///
      /// Locales: en, es, English
      static func partnerPanicModeStatusMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PartnerPanicModeStatusMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PartnerPanicModeStatusMessage"
        }

        return NSLocalizedString("PartnerPanicModeStatusMessage", bundle: bundle, comment: "")
      }

      /// en translation: We are experiencing saturation, so your order may have a delay of more than 60 minutes
      ///
      /// Locales: en, es, English
      static func generalPanicModeStatusMessage(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("GeneralPanicModeStatusMessage", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GeneralPanicModeStatusMessage"
        }

        let format = NSLocalizedString("GeneralPanicModeStatusMessage", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: We are far, your product may not arrive in the best condition.
      ///
      /// Locales: en, es, English
      static func lbl_RangeSlider_Condition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RangeSlider_Condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RangeSlider_Condition"
        }

        return NSLocalizedString("lbl_RangeSlider_Condition", bundle: bundle, comment: "")
      }

      /// en translation: We are glad you had a good trip
      ///
      /// Locales: en, es, English
      static func lbl_Good_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Good_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Good_Trip"
        }

        return NSLocalizedString("lbl_Good_Trip", bundle: bundle, comment: "")
      }

      /// en translation: We are having high traffic now, it is possible that your order will have a delivery time of more than 60 minutes
      ///
      /// Locales: en, es, English
      static func lbl_Delivery_Time(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("lbl_Delivery_Time", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Delivery_Time"
        }

        let format = NSLocalizedString("lbl_Delivery_Time", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: We are having little technical problems, reload your app. We will solve it soon.
      ///
      /// Locales: en, es, English
      static func lbl_ServerError_Technical_Problem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ServerError_Technical_Problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ServerError_Technical_Problem"
        }

        return NSLocalizedString("lbl_ServerError_Technical_Problem", bundle: bundle, comment: "")
      }

      /// en translation: We are ready!
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Ready"
        }

        return NSLocalizedString("lbl_CreatePassword_Ready", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry
      ///
      /// Locales: en, es, English
      static func ccPaymentMinimunAmountTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCPaymentMinimunAmountTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CCPaymentMinimunAmountTitle"
        }

        return NSLocalizedString("CCPaymentMinimunAmountTitle", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry at the moment the store is too saturated to receive your order... Try again later.
      ///
      /// Locales: en, es, English
      static func saturatedPartnerMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SaturatedPartnerMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SaturatedPartnerMessage"
        }

        return NSLocalizedString("SaturatedPartnerMessage", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry at the moment we do not have hugos available to meet our delivery times, try later
      ///
      /// Locales: en, es, English
      static func generalSaturatedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GeneralSaturatedMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GeneralSaturatedMessage"
        }

        return NSLocalizedString("GeneralSaturatedMessage", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry at this time it is not possible to request help
      ///
      /// Locales: en, es, English
      static func helpRequestFailedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helpRequestFailedMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helpRequestFailedMessage"
        }

        return NSLocalizedString("helpRequestFailedMessage", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry no results were found(territoryName), please verify your address 
      ///
      /// Locales: en, es, English
      static func lbl_No_Result_Found_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_No_Result_Found_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_No_Result_Found_Name"
        }

        return NSLocalizedString("lbl_No_Result_Found_Name", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry the inconvenience!
      ///
      /// Locales: en, es
      static func lbl_product_unavailable_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_product_unavailable_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_product_unavailable_title"
        }

        return NSLocalizedString("lbl_product_unavailable_title", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry the inconvenience.
      ///
      /// Locales: en, es
      static func lbl_OrderSummary_Not_Variation_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Not_Variation_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Not_Variation_Title"
        }

        return NSLocalizedString("lbl_OrderSummary_Not_Variation_Title", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry you didn't have a good experience.
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeBadRating_experience(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeBadRating_experience", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeBadRating_experience"
        }

        return NSLocalizedString("lbl_FinalizeBadRating_experience", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry you didn't have a good trip
      ///
      /// Locales: en, es, English
      static func lbl_Didnt_Good(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Didnt_Good", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Didnt_Good"
        }

        return NSLocalizedString("lbl_Didnt_Good", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry!
      ///
      /// Locales: en, es, English
      static func lbl_We_are_Sorry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_We_are_Sorry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_We_are_Sorry"
        }

        return NSLocalizedString("lbl_We_are_Sorry", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry, no results were found 
      ///
      /// Locales: en, es, English
      static func lbl_No_result_found(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_No_result_found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_No_result_found"
        }

        return NSLocalizedString("lbl_No_result_found", bundle: bundle, comment: "")
      }

      /// en translation: We are sorry, no results were found.
      ///
      /// Locales: en, es, English
      static func lbl_SearchAddressShipment_Sorry_NoResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SearchAddressShipment_Sorry_NoResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SearchAddressShipment_Sorry_NoResult"
        }

        return NSLocalizedString("lbl_SearchAddressShipment_Sorry_NoResult", bundle: bundle, comment: "")
      }

      /// en translation: We are very sorry
      ///
      /// Locales: en, es, English
      static func lbl_CoverAlert_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CoverAlert_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CoverAlert_Heading"
        }

        return NSLocalizedString("lbl_CoverAlert_Heading", bundle: bundle, comment: "")
      }

      /// en translation: We are very sorry.
      ///
      /// Locales: en, es, English
      static func errorCDTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ErrorCDTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ErrorCDTitle"
        }

        return NSLocalizedString("ErrorCDTitle", bundle: bundle, comment: "")
      }

      /// en translation: We can help you get it back
      ///
      /// Locales: en, es
      static func hp_block_account_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_block_account_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_block_account_body"
        }

        return NSLocalizedString("hp_block_account_body", bundle: bundle, comment: "")
      }

      /// en translation: We can´t locate your driver now, we suggest you to be aware, it will be updated shortly. 
      ///
      /// Locales: en, es, English
      static func lbl_AlertOutOfSync_Update_Shortly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AlertOutOfSync_Update_Shortly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AlertOutOfSync_Update_Shortly"
        }

        return NSLocalizedString("lbl_AlertOutOfSync_Update_Shortly", bundle: bundle, comment: "")
      }

      /// en translation: We could not detect your GPS location
      ///
      /// Locales: en, es, English
      static func lbl_Didnt_Get_GPS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Didnt_Get_GPS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Didnt_Get_GPS"
        }

        return NSLocalizedString("lbl_Didnt_Get_GPS", bundle: bundle, comment: "")
      }

      /// en translation: We couldn't create your password, please try again.
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Try_Again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Try_Again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Try_Again"
        }

        return NSLocalizedString("lbl_CreatePassword_Try_Again", bundle: bundle, comment: "")
      }

      /// en translation: We couldn't recognize you, are you sure it's your fingerprint?
      ///
      /// Locales: en, es, English
      static func authErrorDesc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authErrorDesc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "authErrorDesc"
        }

        return NSLocalizedString("authErrorDesc", bundle: bundle, comment: "")
      }

      /// en translation: We couldn't resend the verification code to you.
      ///
      /// Locales: en, es
      static func lbl_Step2_Resend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step2_Resend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step2_Resend"
        }

        return NSLocalizedString("lbl_Step2_Resend", bundle: bundle, comment: "")
      }

      /// en translation: We do not accept cash payments for scheduled orders. Please select a debit or credit card.
      ///
      /// Locales: en, es
      static func alert_sch_onlycard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_sch_onlycard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_sch_onlycard"
        }

        return NSLocalizedString("alert_sch_onlycard", bundle: bundle, comment: "")
      }

      /// en translation: We had a problem, we ask that you please try again later.
      ///
      /// Locales: en, es
      static func try_Again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Try_Again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Try_Again"
        }

        return NSLocalizedString("Try_Again", bundle: bundle, comment: "")
      }

      /// en translation: We have a new version of the app. During our beta, we are adding new functions quickly and fixing problems. In order for the app to continue working normally for you it is important that you update it every time a new version is released. Your current version is $1 and the latest version is $ 2, please upgrade from TestFlight 
      ///
      /// Locales: en, es, English
      static func betaNewVersionMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BetaNewVersionMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BetaNewVersionMessage"
        }

        return NSLocalizedString("BetaNewVersionMessage", bundle: bundle, comment: "")
      }

      /// en translation: We have detected an account.
      ///
      /// Locales: en, es, English
      static func lbl_ValidPhoneLoginWithFB_Sub_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidPhoneLoginWithFB_Sub_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidPhoneLoginWithFB_Sub_Heading"
        }

        return NSLocalizedString("lbl_ValidPhoneLoginWithFB_Sub_Heading", bundle: bundle, comment: "")
      }

      /// en translation: We have detected that the shipping address is not your default address. Please select or add a new address
      ///
      /// Locales: en, es
      static func defalut_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Defalut_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Defalut_Address"
        }

        return NSLocalizedString("Defalut_Address", bundle: bundle, comment: "")
      }

      /// en translation: We have detected that you have an order pending to process, if you change your address it will be deleted. Do you want to continue?
      ///
      /// Locales: en, es, English
      static func wrongTerritoryAddressDeleteOrderMessage2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongTerritoryAddressDeleteOrderMessage2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongTerritoryAddressDeleteOrderMessage2"
        }

        return NSLocalizedString("WrongTerritoryAddressDeleteOrderMessage2", bundle: bundle, comment: "")
      }

      /// en translation: We have detected that you´re outside our service area. Hugo is expanding as quickly as possible. Would you like to be notified when we cover this zone?
      ///
      /// Locales: en, es, English
      static func lbl_CoverAlert_Sub_Headling(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CoverAlert_Sub_Headling", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CoverAlert_Sub_Headling"
        }

        return NSLocalizedString("lbl_CoverAlert_Sub_Headling", bundle: bundle, comment: "")
      }

      /// en translation: We have not been able to charge the card registered for your order, help us changing the payment method or selecting another card.
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentError_Selecting_Another(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentError_Selecting_Another", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentError_Selecting_Another"
        }

        return NSLocalizedString("lbl_ShipmentError_Selecting_Another", bundle: bundle, comment: "")
      }

      /// en translation: We have not found a result for the word "%@"
      ///
      /// Locales: en, es
      static func lbl_NoResult_Search(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("lbl_NoResult_Search", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_NoResult_Search"
        }

        let format = NSLocalizedString("lbl_NoResult_Search", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: We have not yet reached the destination and you are about to end your trip, if you continue, you will be charged the value of the trip generated up to this moment. Do you want to continue?
      ///
      /// Locales: en, es, English
      static func cancelRideMessageOnWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelRideMessageOnWay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelRideMessageOnWay"
        }

        return NSLocalizedString("CancelRideMessageOnWay", bundle: bundle, comment: "")
      }

      /// en translation: We have problems with your card.
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentError_Card_Problem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentError_Card_Problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentError_Card_Problem"
        }

        return NSLocalizedString("lbl_ShipmentError_Card_Problem", bundle: bundle, comment: "")
      }

      /// en translation: We help you!
      ///
      /// Locales: en, es, English
      static func lbl_ChooseRecover_Main_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ChooseRecover_Main_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChooseRecover_Main_Heading"
        }

        return NSLocalizedString("lbl_ChooseRecover_Main_Heading", bundle: bundle, comment: "")
      }

      /// en translation: We hope you enjoy it!
      ///
      /// Locales: en, es, English
      static func lbl_RatingView_enjoy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingView_enjoy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingView_enjoy"
        }

        return NSLocalizedString("lbl_RatingView_enjoy", bundle: bundle, comment: "")
      }

      /// en translation: We invite you to read our terms and conditions
      ///
      /// Locales: en, es
      static func we_invite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("We_invite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "We_invite"
        }

        return NSLocalizedString("We_invite", bundle: bundle, comment: "")
      }

      /// en translation: We need the following data to send you the invoices of each purchase in our platform.
      ///
      /// Locales: en, es, English
      static func lbl_AddUserInfo_Send_Receipts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddUserInfo_Send_Receipts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddUserInfo_Send_Receipts"
        }

        return NSLocalizedString("lbl_AddUserInfo_Send_Receipts", bundle: bundle, comment: "")
      }

      /// en translation: We need to know your location
      ///
      /// Locales: en, es, English
      static func lbl_Where_You_Are(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Where_You_Are", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Where_You_Are"
        }

        return NSLocalizedString("lbl_Where_You_Are", bundle: bundle, comment: "")
      }

      /// en translation: We need you to update your payment information for the next detail:
      ///
      /// Locales: en, es, English
      static func lbl_ShipmentError_Info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ShipmentError_Info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ShipmentError_Info"
        }

        return NSLocalizedString("lbl_ShipmentError_Info", bundle: bundle, comment: "")
      }

      /// en translation: We present you a summary of the shipment
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeRide_Total_Shipping_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_Total_Shipping_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_Total_Shipping_Order"
        }

        return NSLocalizedString("lbl_FinalizeRide_Total_Shipping_Order", bundle: bundle, comment: "")
      }

      /// en translation: We want to be sure
      ///
      /// Locales: en, es, English
      static func lbl_Safe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Safe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Safe"
        }

        return NSLocalizedString("lbl_Safe", bundle: bundle, comment: "")
      }

      /// en translation: We were unable to complete your change of destination request, please try again
      ///
      /// Locales: en, es, English
      static func errorCDMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ErrorCDMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ErrorCDMessage"
        }

        return NSLocalizedString("ErrorCDMessage", bundle: bundle, comment: "")
      }

      /// en translation: We will send a recovery code to one of your registered media. Choose the channel where you would like to receive the code
      ///
      /// Locales: en, es, English
      static func lbl_ChooseRecover_Recover_Msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ChooseRecover_Recover_Msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChooseRecover_Recover_Msg"
        }

        return NSLocalizedString("lbl_ChooseRecover_Recover_Msg", bundle: bundle, comment: "")
      }

      /// en translation: We will take very good care of her
      ///
      /// Locales: en, es, English
      static func good_Care(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Good_Care", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Good_Care"
        }

        return NSLocalizedString("Good_Care", bundle: bundle, comment: "")
      }

      /// en translation: We would like to know your opinion about the experience.
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeRide_Exprience(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRide_Exprience", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRide_Exprience"
        }

        return NSLocalizedString("lbl_FinalizeRide_Exprience", bundle: bundle, comment: "")
      }

      /// en translation: We would like to know your opinion.
      ///
      /// Locales: en, es, English
      static func lbl_RatingCell_Your_Opinion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingCell_Your_Opinion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingCell_Your_Opinion"
        }

        return NSLocalizedString("lbl_RatingCell_Your_Opinion", bundle: bundle, comment: "")
      }

      /// en translation: We'd like to know you!
      ///
      /// Locales: en, es, English
      static func lbl_BasicInfo_Main_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_BasicInfo_Main_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_BasicInfo_Main_Heading"
        }

        return NSLocalizedString("lbl_BasicInfo_Main_Heading", bundle: bundle, comment: "")
      }

      /// en translation: We'd like to know you.
      ///
      /// Locales: en, es, English
      static func lbl_EmailInfo_Sub_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EmailInfo_Sub_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EmailInfo_Sub_Heading"
        }

        return NSLocalizedString("lbl_EmailInfo_Sub_Heading", bundle: bundle, comment: "")
      }

      /// en translation: We'll add your security.
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_Sub_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_Sub_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_Sub_Heading"
        }

        return NSLocalizedString("lbl_CreateFBPassword_Sub_Heading", bundle: bundle, comment: "")
      }

      /// en translation: We'll recover your password.
      ///
      /// Locales: en, es, English
      static func lbl_ChooseRecover_Sub_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ChooseRecover_Sub_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChooseRecover_Sub_Heading"
        }

        return NSLocalizedString("lbl_ChooseRecover_Sub_Heading", bundle: bundle, comment: "")
      }

      /// en translation: We'll send an email to your synchronized account.
      ///
      /// Locales: en, es, English
      static func lbl_ValidateEmail_Mail_Msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateEmail_Mail_Msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateEmail_Mail_Msg"
        }

        return NSLocalizedString("lbl_ValidateEmail_Mail_Msg", bundle: bundle, comment: "")
      }

      /// en translation: We'll send you a verification code
      ///
      /// Locales: en, es
      static func lbl_Step1_Send_Code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Send_Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Send_Code"
        }

        return NSLocalizedString("lbl_Step1_Send_Code", bundle: bundle, comment: "")
      }

      /// en translation: We're sorry, something went wrong when you got your phone.
      ///
      /// Locales: en, es, English
      static func cannotGetPhoneMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannotGetPhoneMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannotGetPhoneMessage"
        }

        return NSLocalizedString("cannotGetPhoneMessage", bundle: bundle, comment: "")
      }

      /// en translation: We're very sorry!
      ///
      /// Locales: en, es, English
      static func lbl_ServerError_Sorry_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ServerError_Sorry_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ServerError_Sorry_Text"
        }

        return NSLocalizedString("lbl_ServerError_Sorry_Text", bundle: bundle, comment: "")
      }

      /// en translation: We've got you!
      ///
      /// Locales: en, es, English
      static func lbl_AddressInit_Ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressInit_Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressInit_Ready"
        }

        return NSLocalizedString("lbl_AddressInit_Ready", bundle: bundle, comment: "")
      }

      /// en translation: Welcome
      ///
      /// Locales: en, es, English
      static func lbl_LoginWithPassword_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LoginWithPassword_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LoginWithPassword_Heading"
        }

        return NSLocalizedString("lbl_LoginWithPassword_Heading", bundle: bundle, comment: "")
      }

      /// en translation: Welcome back
      ///
      /// Locales: en, es
      static func lbl_CreatePassword_Welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreatePassword_Welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreatePassword_Welcome"
        }

        return NSLocalizedString("lbl_CreatePassword_Welcome", bundle: bundle, comment: "")
      }

      /// en translation: Welcome back
      ///
      /// Locales: en, es
      static func lbl_LoginPassword_Welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LoginPassword_Welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LoginPassword_Welcome"
        }

        return NSLocalizedString("lbl_LoginPassword_Welcome", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhoneAlternative_Help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhoneAlternative_Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhoneAlternative_Help"
        }

        return NSLocalizedString("lbl_StartedPhoneAlternative_Help", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhone_Welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhone_Welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhone_Welcome"
        }

        return NSLocalizedString("lbl_StartedPhone_Welcome", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to Hugo
      ///
      /// Locales: en, es, English
      static func lbl_Welcome_Hugo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Welcome_Hugo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Welcome_Hugo"
        }

        return NSLocalizedString("lbl_Welcome_Hugo", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to)
      ///
      /// Locales: en, es, English
      static func welcomeBetaTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WelcomeBetaTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WelcomeBetaTitle"
        }

        return NSLocalizedString("WelcomeBetaTitle", bundle: bundle, comment: "")
      }

      /// en translation: Welcome!
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_Welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_Welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_Welcome"
        }

        return NSLocalizedString("lbl_CreateFBPassword_Welcome", bundle: bundle, comment: "")
      }

      /// en translation: What a shame we
      ///
      /// Locales: en, es, English
      static func noCoverTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoCoverTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NoCoverTitle"
        }

        return NSLocalizedString("NoCoverTitle", bundle: bundle, comment: "")
      }

      /// en translation: What can $name improve?
      ///
      /// Locales: en, es, English
      static func lbl_ImprovementList_Improve_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ImprovementList_Improve_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ImprovementList_Improve_Name"
        }

        return NSLocalizedString("lbl_ImprovementList_Improve_Name", bundle: bundle, comment: "")
      }

      /// en translation: What can improve
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeBadRating_Improve_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeBadRating_Improve_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeBadRating_Improve_Name"
        }

        return NSLocalizedString("lbl_FinalizeBadRating_Improve_Name", bundle: bundle, comment: "")
      }

      /// en translation: What can we improve?
      ///
      /// Locales: en, es
      static func lbl_RatingHeader_Improve(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingHeader_Improve", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingHeader_Improve"
        }

        return NSLocalizedString("lbl_RatingHeader_Improve", bundle: bundle, comment: "")
      }

      /// en translation: What do you 
      ///
      /// Locales: en, es
      static func lbl_TitlPayService_Pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TitlPayService_Pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TitlPayService_Pay"
        }

        return NSLocalizedString("lbl_TitlPayService_Pay", bundle: bundle, comment: "")
      }

      /// en translation: What do you want today?
      ///
      /// Locales: en, es, English
      static func lbl_Salutation_You_Need(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Salutation_You_Need", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Salutation_You_Need"
        }

        return NSLocalizedString("lbl_Salutation_You_Need", bundle: bundle, comment: "")
      }

      /// en translation: What's up
      ///
      /// Locales: en, English
      static func lbl_WelcomeMaps_UP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WelcomeMaps_UP", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WelcomeMaps_UP"
        }

        return NSLocalizedString("lbl_WelcomeMaps_UP", bundle: bundle, comment: "")
      }

      /// en translation: What's up
      ///
      /// Locales: en, es, English
      static func lbl_LookUpRide_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LookUpRide_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LookUpRide_title"
        }

        return NSLocalizedString("lbl_LookUpRide_title", bundle: bundle, comment: "")
      }

      /// en translation: What's up
      ///
      /// Locales: en, es, English
      static func lbl_What_Ware(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_What_Ware", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_What_Ware"
        }

        return NSLocalizedString("lbl_What_Ware", bundle: bundle, comment: "")
      }

      /// en translation: When changing your linked phone number, all your information will move to this number
      ///
      /// Locales: en, es, English
      static func lbl_Link_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Link_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Link_Number"
        }

        return NSLocalizedString("lbl_Link_Number", bundle: bundle, comment: "")
      }

      /// en translation: When re-processing this order, some prices may vary depending on the charges that are in effect at the time of processing (e.g., delivery charge, booking fee, tax and others).
      ///
      /// Locales: en, es, English
      static func lbl_past_order_imp_notes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_past_order_imp_notes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_past_order_imp_notes"
        }

        return NSLocalizedString("lbl_past_order_imp_notes", bundle: bundle, comment: "")
      }

      /// en translation: When using cash as a payment, method we recommend having the exact amount. If change is required well fund the wallet in your profile with Yummy Credits for future orders. To obtain your credit message us on the Chat within the app.
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_cash_payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_cash_payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_cash_payment"
        }

        return NSLocalizedString("alert_ProcessOrder_cash_payment", bundle: bundle, comment: "")
      }

      /// en translation: When you receive the email, go to the link to complete the validation.
      ///
      /// Locales: en, es, English
      static func lbl_ValidateEmail_Recive_Mail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateEmail_Recive_Mail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateEmail_Recive_Mail"
        }

        return NSLocalizedString("lbl_ValidateEmail_Recive_Mail", bundle: bundle, comment: "")
      }

      /// en translation: Where are we going today?
      ///
      /// Locales: en, es, English
      static func lbl_AddressInit_Do_for_Today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressInit_Do_for_Today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressInit_Do_for_Today"
        }

        return NSLocalizedString("lbl_AddressInit_Do_for_Today", bundle: bundle, comment: "")
      }

      /// en translation: Where are you going?
      ///
      /// Locales: en, es, English
      static func lbl_PlaceMarker_Going(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PlaceMarker_Going", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PlaceMarker_Going"
        }

        return NSLocalizedString("lbl_PlaceMarker_Going", bundle: bundle, comment: "")
      }

      /// en translation: Where are you?
      ///
      /// Locales: en, es, English
      static func lbl_WhereAreYou_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhereAreYou_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhereAreYou_Heading"
        }

        return NSLocalizedString("lbl_WhereAreYou_Heading", bundle: bundle, comment: "")
      }

      /// en translation: Where do we depart?
      ///
      /// Locales: en, es, English
      static func lbl_Come_Form(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Come_Form", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Come_Form"
        }

        return NSLocalizedString("lbl_Come_Form", bundle: bundle, comment: "")
      }

      /// en translation: Where do we stop?
      ///
      /// Locales: en, es, English
      static func lbl_Where_do_Stop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Where_do_Stop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Where_do_Stop"
        }

        return NSLocalizedString("lbl_Where_do_Stop", bundle: bundle, comment: "")
      }

      /// en translation: Where do you want to go today?
      ///
      /// Locales: en, English
      static func lbl_WelcomeMaps_today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WelcomeMaps_today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WelcomeMaps_today"
        }

        return NSLocalizedString("lbl_WelcomeMaps_today", bundle: bundle, comment: "")
      }

      /// en translation: Where do you want to go today?
      ///
      /// Locales: en, es, English
      static func lbl_LookUpRide_Go_Today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LookUpRide_Go_Today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LookUpRide_Go_Today"
        }

        return NSLocalizedString("lbl_LookUpRide_Go_Today", bundle: bundle, comment: "")
      }

      /// en translation: Where do you want to go today?
      ///
      /// Locales: en, es, English
      static func txt_Search_Go_Today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt_Search_Go_Today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt_Search_Go_Today"
        }

        return NSLocalizedString("txt_Search_Go_Today", bundle: bundle, comment: "")
      }

      /// en translation: Where will we deliver your orders?
      ///
      /// Locales: en, es, English
      static func lbl_MyLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_MyLocation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_MyLocation"
        }

        return NSLocalizedString("lbl_MyLocation", bundle: bundle, comment: "")
      }

      /// en translation: Where will we deliver your orders? 
      ///
      /// Locales: en, es
      static func where_UbicationDeliver_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Where_UbicationDeliver_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Where_UbicationDeliver_Order"
        }

        return NSLocalizedString("Where_UbicationDeliver_Order", bundle: bundle, comment: "")
      }

      /// en translation: While you were placing your order the  following products were sold out
      ///
      /// Locales: en, es
      static func lbl_OrderSummary_Not_Variation_Message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Not_Variation_Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Not_Variation_Message"
        }

        return NSLocalizedString("lbl_OrderSummary_Not_Variation_Message", bundle: bundle, comment: "")
      }

      /// en translation: Who will we recharge?
      ///
      /// Locales: en, es, English
      static func lbl_TopUpMain_Who_Recharge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TopUpMain_Who_Recharge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TopUpMain_Who_Recharge"
        }

        return NSLocalizedString("lbl_TopUpMain_Who_Recharge", bundle: bundle, comment: "")
      }

      /// en translation: Why are you ending the trip?
      ///
      /// Locales: en, es
      static func lbl_ConfirmCancelRide_Why_Cancel_Ride(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmCancelRide_Why_Cancel_Ride", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmCancelRide_Why_Cancel_Ride"
        }

        return NSLocalizedString("lbl_ConfirmCancelRide_Why_Cancel_Ride", bundle: bundle, comment: "")
      }

      /// en translation: Will arrive in %d minutes
      ///
      /// Locales: en, es
      static func lbl_Picking_Ride_Minutes(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("lbl_Picking_Ride_Minutes", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Picking_Ride_Minutes"
        }

        let format = NSLocalizedString("lbl_Picking_Ride_Minutes", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Will arrive in 1 minute
      ///
      /// Locales: en, es
      static func lbl_Picking_Ride_Minute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Picking_Ride_Minute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Picking_Ride_Minute"
        }

        return NSLocalizedString("lbl_Picking_Ride_Minute", bundle: bundle, comment: "")
      }

      /// en translation: With our exclusive network of professional drivers
      ///
      /// Locales: en, es
      static func profiession_Cycle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profiession_Cycle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profiession_Cycle"
        }

        return NSLocalizedString("Profiession_Cycle", bundle: bundle, comment: "")
      }

      /// en translation: With our modern fleet
      ///
      /// Locales: en, es
      static func mordel_feet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mordel_feet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mordel_feet"
        }

        return NSLocalizedString("Mordel_feet", bundle: bundle, comment: "")
      }

      /// en translation: Without Bag
      ///
      /// Locales: en, es
      static func lblhugoBadRatings2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblhugoBadRatings2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblhugoBadRatings2"
        }

        return NSLocalizedString("lblhugoBadRatings2", bundle: bundle, comment: "")
      }

      /// en translation: Without the location we cannot show the closest branches. Go to settings -> privacy
      ///
      /// Locales: en, es, English
      static func locationWithoutAccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationWithoutAccess", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationWithoutAccess"
        }

        return NSLocalizedString("LocationWithoutAccess", bundle: bundle, comment: "")
      }

      /// en translation: Without your location we cannot show you the shops near you. Go to settings -> privacy
      ///
      /// Locales: en, es, English
      static func locationNeededForPartners(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationNeededForPartners", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationNeededForPartners"
        }

        return NSLocalizedString("LocationNeededForPartners", bundle: bundle, comment: "")
      }

      /// en translation: Work
      ///
      /// Locales: en, English
      static func lbl_RideMap_Work(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideMap_Work", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideMap_Work"
        }

        return NSLocalizedString("lbl_RideMap_Work", bundle: bundle, comment: "")
      }

      /// en translation: Wow!
      ///
      /// Locales: en, es, English
      static func lbl_Buaa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Buaa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Buaa"
        }

        return NSLocalizedString("lbl_Buaa", bundle: bundle, comment: "")
      }

      /// en translation: Wow!
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeBadRating_Name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeBadRating_Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeBadRating_Name"
        }

        return NSLocalizedString("lbl_FinalizeBadRating_Name", bundle: bundle, comment: "")
      }

      /// en translation: Write it in the space below, your driver will ask you before giving you the order, otherwise we will not be able to complete your order
      ///
      /// Locales: en, es, English
      static func productRequireDocMsg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ProductRequireDocMsg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ProductRequireDocMsg"
        }

        return NSLocalizedString("ProductRequireDocMsg", bundle: bundle, comment: "")
      }

      /// en translation: Write your message...
      ///
      /// Locales: en, es
      static func lbl_ChatTransport_TextField(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ChatTransport_TextField", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChatTransport_TextField"
        }

        return NSLocalizedString("lbl_ChatTransport_TextField", bundle: bundle, comment: "")
      }

      /// en translation: Wrong PIN
      ///
      /// Locales: en, es
      static func hp_verify_pin_wrong_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_verify_pin_wrong_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_verify_pin_wrong_message"
        }

        return NSLocalizedString("hp_verify_pin_wrong_message", bundle: bundle, comment: "")
      }

      /// en translation: Wrong code, the numbers you have entered do not match those entered previously, 
      ///
      /// Locales: en, es
      static func hp_create_pin_dont_match_first(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_create_pin_dont_match_first", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_create_pin_dont_match_first"
        }

        return NSLocalizedString("hp_create_pin_dont_match_first", bundle: bundle, comment: "")
      }

      /// en translation: YES
      ///
      /// Locales: en, es
      static func btn_AlertTransport_To_Yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btn_AlertTransport_To_Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btn_AlertTransport_To_Yes"
        }

        return NSLocalizedString("btn_AlertTransport_To_Yes", bundle: bundle, comment: "")
      }

      /// en translation: Year must contain 2 digits
      ///
      /// Locales: en, es, English
      static func yearLength(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YearLength ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YearLength "
        }

        return NSLocalizedString("YearLength ", bundle: bundle, comment: "")
      }

      /// en translation: Year of expiration required
      ///
      /// Locales: en, es, English
      static func yearRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YearRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YearRequired"
        }

        return NSLocalizedString("YearRequired", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, es, English
      static func si(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Si", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Si"
        }

        return NSLocalizedString("Si", bundle: bundle, comment: "")
      }

      /// en translation: Yippee!
      ///
      /// Locales: en, es, English
      static func lbl_Yuu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Yuu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Yuu"
        }

        return NSLocalizedString("lbl_Yuu", bundle: bundle, comment: "")
      }

      /// en translation: You are about to cancel your scheduled order, your money will be refunded in the form of consumable credits within the app.
      ///
      /// Locales: en, es
      static func lblDescription1ConfirmCancelOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblDescription1ConfirmCancelOrder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblDescription1ConfirmCancelOrder"
        }

        return NSLocalizedString("lblDescription1ConfirmCancelOrder", bundle: bundle, comment: "")
      }

      /// en translation: You are about to cancel your scheduled order, your money will be returned to your card according to the process of each bank.
      ///
      /// Locales: en, es
      static func lblDescription2ConfirmCancelOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lblDescription2ConfirmCancelOrder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lblDescription2ConfirmCancelOrder"
        }

        return NSLocalizedString("lblDescription2ConfirmCancelOrder", bundle: bundle, comment: "")
      }

      /// en translation: You are about to cancel your trip  Are you sure you wish to continue?
      ///
      /// Locales: en, es, English
      static func cancelRideMessagePicking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelRideMessagePicking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelRideMessagePicking"
        }

        return NSLocalizedString("CancelRideMessagePicking", bundle: bundle, comment: "")
      }

      /// en translation: You are about to delete the card ****%@. Are you sure you want to continue
      ///
      /// Locales: en, es
      static func lbl_DeleteCardMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("lbl_DeleteCardMessage", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_DeleteCardMessage"
        }

        let format = NSLocalizedString("lbl_DeleteCardMessage", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You are about to make a call to the assigned driver, this action may generate an extra charge from your company on your credit. Are you sure you want to continue?
      ///
      /// Locales: en, es, English
      static func callMessagePicking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CallMessagePicking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CallMessagePicking"
        }

        return NSLocalizedString("CallMessagePicking", bundle: bundle, comment: "")
      }

      /// en translation: You are about to make a change to your route, this action can affect the cost and final time of the trip.
      ///
      /// Locales: en, es, English
      static func lbl_AlertTransport_Affect_Cost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AlertTransport_Affect_Cost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AlertTransport_Affect_Cost"
        }

        return NSLocalizedString("lbl_AlertTransport_Affect_Cost", bundle: bundle, comment: "")
      }

      /// en translation: You are about to make an emergency call to 911. Are you sure you want to continue?
      ///
      /// Locales: en, es, English
      static func callMessageOnWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CallMessageOnWay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CallMessageOnWay"
        }

        return NSLocalizedString("CallMessageOnWay", bundle: bundle, comment: "")
      }

      /// en translation: You are about to pay
      ///
      /// Locales: en, es
      static func about_pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About_pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About_pay"
        }

        return NSLocalizedString("About_pay", bundle: bundle, comment: "")
      }

      /// en translation: You can enjoy the products of this trade
      ///
      /// Locales: en, es, English
      static func cominSoonMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CominSoonMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CominSoonMessage"
        }

        return NSLocalizedString("CominSoonMessage", bundle: bundle, comment: "")
      }

      /// en translation: You can find this date in the front of your card, under the card number.
      ///
      /// Locales: en, es, English
      static func expCardInfoMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ExpCardInfoMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ExpCardInfoMessage"
        }

        return NSLocalizedString("ExpCardInfoMessage", bundle: bundle, comment: "")
      }

      /// en translation: You can find this date in the front of your card, under the card number.
      ///
      /// Locales: en, es, English
      static func lbl_CardInfo_Under_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CardInfo_Under_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CardInfo_Under_Card"
        }

        return NSLocalizedString("lbl_CardInfo_Under_Card", bundle: bundle, comment: "")
      }

      /// en translation: You can give an additional reward (Optional):
      ///
      /// Locales: en, es, English
      static func lbl_TipCell_Thanks_Sub(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TipCell_Thanks_Sub", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TipCell_Thanks_Sub"
        }

        return NSLocalizedString("lbl_TipCell_Thanks_Sub", bundle: bundle, comment: "")
      }

      /// en translation: You can thank
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeGoodRating_Thank_you(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeGoodRating_Thank_you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeGoodRating_Thank_you"
        }

        return NSLocalizedString("lbl_FinalizeGoodRating_Thank_you", bundle: bundle, comment: "")
      }

      /// en translation: You can thank to
      ///
      /// Locales: en, es, English
      static func lbl_TipCell_Thanks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TipCell_Thanks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TipCell_Thanks"
        }

        return NSLocalizedString("lbl_TipCell_Thanks", bundle: bundle, comment: "")
      }

      /// en translation: You can use this card in:
      ///
      /// Locales: en, es
      static func hp_lbl_qr_card_disabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_card_disabled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_card_disabled"
        }

        return NSLocalizedString("hp_lbl_qr_card_disabled", bundle: bundle, comment: "")
      }

      /// en translation: You do not have a registered credit card, please register one
      ///
      /// Locales: en, es
      static func no_Cards_Registered_Message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No_Cards_Registered_Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No_Cards_Registered_Message"
        }

        return NSLocalizedString("No_Cards_Registered_Message", bundle: bundle, comment: "")
      }

      /// en translation: You don't have an account?
      ///
      /// Locales: en, es, English
      static func lbl_StartedPhoneAlternative_Not_Account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_StartedPhoneAlternative_Not_Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_StartedPhoneAlternative_Not_Account"
        }

        return NSLocalizedString("lbl_StartedPhoneAlternative_Not_Account", bundle: bundle, comment: "")
      }

      /// en translation: You don't have an active order, ask what you need and we will bring it in minutes
      ///
      /// Locales: en, es, English
      static func lbl_no_active_order_notes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_no_active_order_notes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_no_active_order_notes"
        }

        return NSLocalizedString("lbl_no_active_order_notes", bundle: bundle, comment: "")
      }

      /// en translation: You don't have an active order.
      ///
      /// Locales: en, es, English
      static func lbl_no_active_orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_no_active_orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_no_active_orders"
        }

        return NSLocalizedString("lbl_no_active_orders", bundle: bundle, comment: "")
      }

      /// en translation: You don't have an order history yet
      ///
      /// Locales: en, es, English
      static func pastOrders_Not_Order_History(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PastOrders_Not_Order_History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PastOrders_Not_Order_History"
        }

        return NSLocalizedString("PastOrders_Not_Order_History", bundle: bundle, comment: "")
      }

      /// en translation: You have
      ///
      /// Locales: en, es, English
      static func lbl_Main_Active(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_Active", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_Active"
        }

        return NSLocalizedString("lbl_Main_Active", bundle: bundle, comment: "")
      }

      /// en translation: You have 1 active order.
      ///
      /// Locales: en, es, English
      static func lbl_ActiveOrder_Active(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ActiveOrder_Active", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ActiveOrder_Active"
        }

        return NSLocalizedString("lbl_ActiveOrder_Active", bundle: bundle, comment: "")
      }

      /// en translation: You have 1 active order.
      ///
      /// Locales: en, es, English
      static func lbl_Main_Active_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_Active_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_Active_Order"
        }

        return NSLocalizedString("lbl_Main_Active_Order", bundle: bundle, comment: "")
      }

      /// en translation: You have a FREE delivery
      ///
      /// Locales: en, es, English
      static func firstInstallTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FirstInstallTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FirstInstallTitle"
        }

        return NSLocalizedString("FirstInstallTitle", bundle: bundle, comment: "")
      }

      /// en translation: You have a new Hugo version available, please update to enjoy our new features.
      ///
      /// Locales: en, es, English
      static func lbl_Update_Update_Version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Update_Update_Version", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Update_Update_Version"
        }

        return NSLocalizedString("lbl_Update_Update_Version", bundle: bundle, comment: "")
      }

      /// en translation: You have a pending order
      ///
      /// Locales: en, es, English
      static func draftExist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DraftExist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DraftExist"
        }

        return NSLocalizedString("DraftExist", bundle: bundle, comment: "")
      }

      /// en translation: You have a pending payment. Please pay the former trip to use this function.
      ///
      /// Locales: en, es, English
      static func lbl_ConfirmOutstanding_Cancel_Trip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmOutstanding_Cancel_Trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmOutstanding_Cancel_Trip"
        }

        return NSLocalizedString("lbl_ConfirmOutstanding_Cancel_Trip", bundle: bundle, comment: "")
      }

      /// en translation: You have a pending payment. Please pay the former trip to use this function.
      ///
      /// Locales: en, es, English
      static func lbl_Outstanding_pending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Outstanding_pending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Outstanding_pending"
        }

        return NSLocalizedString("lbl_Outstanding_pending", bundle: bundle, comment: "")
      }

      /// en translation: You have an order in your truck; if you want to change to this address your order will be automatically canceled. Do you want to continue?
      ///
      /// Locales: en, es, English
      static func wrongTerritoryAddressDeleteOrderMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WrongTerritoryAddressDeleteOrderMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WrongTerritoryAddressDeleteOrderMessage"
        }

        return NSLocalizedString("WrongTerritoryAddressDeleteOrderMessage", bundle: bundle, comment: "")
      }

      /// en translation: You have charged
      ///
      /// Locales: en, es
      static func hp_CashinTransactionDetailViewController_ChargedLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinTransactionDetailViewController_ChargedLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinTransactionDetailViewController_ChargedLabel"
        }

        return NSLocalizedString("hp_CashinTransactionDetailViewController_ChargedLabel", bundle: bundle, comment: "")
      }

      /// en translation: You have exceeded the ATM transaction limit per day.
      ///
      /// Locales: en, es, English
      static func dailyLimitExceededMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DailyLimitExceededMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DailyLimitExceededMessage"
        }

        return NSLocalizedString("DailyLimitExceededMessage", bundle: bundle, comment: "")
      }

      /// en translation: You have prizes that can apply for this order.
      ///
      /// Locales: en, es, English
      static func lbl_GetPrize_Apply_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_GetPrize_Apply_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_GetPrize_Apply_Order"
        }

        return NSLocalizedString("lbl_GetPrize_Apply_Order", bundle: bundle, comment: "")
      }

      /// en translation: You have sent
      ///
      /// Locales: en, es
      static func hp_transaction_detail_have_sent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_transaction_detail_have_sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_transaction_detail_have_sent"
        }

        return NSLocalizedString("hp_transaction_detail_have_sent", bundle: bundle, comment: "")
      }

      /// en translation: You have successfully completed your trip, you will receive an email with all the details
      ///
      /// Locales: en, es
      static func lbl_HeaderFinalizeRide_Success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_HeaderFinalizeRide_Success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_HeaderFinalizeRide_Success"
        }

        return NSLocalizedString("lbl_HeaderFinalizeRide_Success", bundle: bundle, comment: "")
      }

      /// en translation: You haven't won any awards yet
      ///
      /// Locales: en, es
      static func not_Awrad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_Awrad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_Awrad"
        }

        return NSLocalizedString("not_Awrad", bundle: bundle, comment: "")
      }

      /// en translation: You must agree to terms and conditions
      ///
      /// Locales: en, es
      static func agree_Term_Condition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Agree_Term_Condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Agree_Term_Condition"
        }

        return NSLocalizedString("Agree_Term_Condition", bundle: bundle, comment: "")
      }

      /// en translation: You must choose a card
      ///
      /// Locales: en, es
      static func hp_CashinMoneyConfirmation_CreditCardSelectionValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinMoneyConfirmation_CreditCardSelectionValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinMoneyConfirmation_CreditCardSelectionValidation"
        }

        return NSLocalizedString("hp_CashinMoneyConfirmation_CreditCardSelectionValidation", bundle: bundle, comment: "")
      }

      /// en translation: You must enter the reference number
      ///
      /// Locales: en, es
      static func reference_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reference_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reference_Number"
        }

        return NSLocalizedString("Reference_Number", bundle: bundle, comment: "")
      }

      /// en translation: You must have an active session, do you want to log in?
      ///
      /// Locales: en, es, English
      static func needLoginDesc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NeedLoginDesc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NeedLoginDesc"
        }

        return NSLocalizedString("NeedLoginDesc", bundle: bundle, comment: "")
      }

      /// en translation: You must have the location function active. Go to settings -> privacy
      ///
      /// Locales: en, es, English
      static func locationNeedToBeActive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationNeedToBeActive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationNeedToBeActive"
        }

        return NSLocalizedString("LocationNeedToBeActive", bundle: bundle, comment: "")
      }

      /// en translation: You must keep at least one address on your list
      ///
      /// Locales: en, es
      static func atlest_One_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Atlest_One_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Atlest_One_address"
        }

        return NSLocalizedString("Atlest_One_address", bundle: bundle, comment: "")
      }

      /// en translation: You must select a payment method
      ///
      /// Locales: en, es, English
      static func paymentRequiredWarningMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PaymentRequiredWarningMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PaymentRequiredWarningMessage"
        }

        return NSLocalizedString("PaymentRequiredWarningMessage", bundle: bundle, comment: "")
      }

      /// en translation: You must select a territory in order to access to payment methods.
      ///
      /// Locales: en, es
      static func access_CC(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Access_CC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Access_CC"
        }

        return NSLocalizedString("Access_CC", bundle: bundle, comment: "")
      }

      /// en translation: You must select a territory in order to create an address.
      ///
      /// Locales: en, es
      static func create_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create_Address"
        }

        return NSLocalizedString("Create_Address", bundle: bundle, comment: "")
      }

      /// en translation: You must select an option
      ///
      /// Locales: en, es
      static func select_Option(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select_Option", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select_Option"
        }

        return NSLocalizedString("Select_Option", bundle: bundle, comment: "")
      }

      /// en translation: You must select billing information to continue with your order.
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_billing_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_billing_required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_billing_required"
        }

        return NSLocalizedString("alert_ProcessOrder_billing_required", bundle: bundle, comment: "")
      }

      /// en translation: You must select the required options
      ///
      /// Locales: en, es, English
      static func orderRequiredOptions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderRequiredOptions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderRequiredOptions"
        }

        return NSLocalizedString("OrderRequiredOptions", bundle: bundle, comment: "")
      }

      /// en translation: You must upload your payment image in Pago Móvil to continue with your order.
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_pagomovil_image_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_pagomovil_image_required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_pagomovil_image_required"
        }

        return NSLocalizedString("alert_ProcessOrder_pagomovil_image_required", bundle: bundle, comment: "")
      }

      /// en translation: You must upload your payment image in Paypal to continue with your order.
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_paypal_image_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_paypal_image_required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_paypal_image_required"
        }

        return NSLocalizedString("alert_ProcessOrder_paypal_image_required", bundle: bundle, comment: "")
      }

      /// en translation: You must upload your payment image in Pipol Pay to continue with your order.
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_pipolpay_image_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_pipolpay_image_required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_pipolpay_image_required"
        }

        return NSLocalizedString("alert_ProcessOrder_pipolpay_image_required", bundle: bundle, comment: "")
      }

      /// en translation: You must upload your payment image in Reserve to continue with your order.
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_reserve_image_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_reserve_image_required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_reserve_image_required"
        }

        return NSLocalizedString("alert_ProcessOrder_reserve_image_required", bundle: bundle, comment: "")
      }

      /// en translation: You must upload your payment image in Venmo to continue with your order.
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_venmo_image_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_venmo_image_required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_venmo_image_required"
        }

        return NSLocalizedString("alert_ProcessOrder_venmo_image_required", bundle: bundle, comment: "")
      }

      /// en translation: You must upload your payment image in Zelle to continue with your order.
      ///
      /// Locales: en, es
      static func alert_ProcessOrder_zelle_image_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ProcessOrder_zelle_image_required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ProcessOrder_zelle_image_required"
        }

        return NSLocalizedString("alert_ProcessOrder_zelle_image_required", bundle: bundle, comment: "")
      }

      /// en translation: You're about to end your trip
      ///
      /// Locales: en, es
      static func lbl_ConfirmCancelRide_Desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ConfirmCancelRide_Desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ConfirmCancelRide_Desc"
        }

        return NSLocalizedString("lbl_ConfirmCancelRide_Desc", bundle: bundle, comment: "")
      }

      /// en translation: You're about to log in with the following number  %@
      ///
      /// Locales: en, es
      static func title_Number(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("title_Number", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_Number"
        }

        let format = NSLocalizedString("title_Number", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You're about to recharge
      ///
      /// Locales: en, es
      static func about_Recharge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About_Recharge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About_Recharge"
        }

        return NSLocalizedString("About_Recharge", bundle: bundle, comment: "")
      }

      /// en translation: Your PIN must be 4 digits
      ///
      /// Locales: en, es
      static func hp_temporary_code_label_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_temporary_code_label_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_temporary_code_label_text"
        }

        return NSLocalizedString("hp_temporary_code_label_text", bundle: bundle, comment: "")
      }

      /// en translation: Your account has been created successfully!
      ///
      /// Locales: en, es
      static func lbl_SignUpFinalize_Sucessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_SignUpFinalize_Sucessfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_SignUpFinalize_Sucessfully"
        }

        return NSLocalizedString("lbl_SignUpFinalize_Sucessfully", bundle: bundle, comment: "")
      }

      /// en translation: Your address will be saved in this way:
      ///
      /// Locales: en, es, English
      static func lbl_Address_Save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Address_Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Address_Save"
        }

        return NSLocalizedString("lbl_Address_Save", bundle: bundle, comment: "")
      }

      /// en translation: Your addresses
      ///
      /// Locales: en, es, English
      static func lbl_ProfileOptions_Address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProfileOptions_Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProfileOptions_Address"
        }

        return NSLocalizedString("lbl_ProfileOptions_Address", bundle: bundle, comment: "")
      }

      /// en translation: Your cart already contains and item from a different store. Would you like to clear the cart and add this item instead?
      ///
      /// Locales: en, es, English
      static func orderNoSamePartner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OrderNoSamePartner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OrderNoSamePartner"
        }

        return NSLocalizedString("OrderNoSamePartner", bundle: bundle, comment: "")
      }

      /// en translation: Your chat is no longer active!
      ///
      /// Locales: en, es, English
      static func errorChatTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ErrorChatTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ErrorChatTitle"
        }

        return NSLocalizedString("ErrorChatTitle", bundle: bundle, comment: "")
      }

      /// en translation: Your item(s) must fit in our backpack.
      ///
      /// Locales: en, es, English
      static func lbl_WriteDescription_Item_BackPack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WriteDescription_Item_BackPack", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WriteDescription_Item_BackPack"
        }

        return NSLocalizedString("lbl_WriteDescription_Item_BackPack", bundle: bundle, comment: "")
      }

      /// en translation: Your location is important for us, we'd like to know your location to offer the best Delivery experience.
      ///
      /// Locales: en, es, English
      static func lbl_WhereAreYou_Sub_Heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhereAreYou_Sub_Heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhereAreYou_Sub_Heading"
        }

        return NSLocalizedString("lbl_WhereAreYou_Sub_Heading", bundle: bundle, comment: "")
      }

      /// en translation: Your new balance has been updated
      ///
      /// Locales: en, es
      static func hp_CashinSucessViewController_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinSucessViewController_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinSucessViewController_subtitle"
        }

        return NSLocalizedString("hp_CashinSucessViewController_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Your order in
      ///
      /// Locales: en, es
      static func lbl_OrderSummary_Title_Partner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Title_Partner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Title_Partner"
        }

        return NSLocalizedString("lbl_OrderSummary_Title_Partner", bundle: bundle, comment: "")
      }

      /// en translation: Your order information
      ///
      /// Locales: en, es
      static func lbl_order_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_order_information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_order_information"
        }

        return NSLocalizedString("lbl_order_information", bundle: bundle, comment: "")
      }

      /// en translation: Your order was delivered by:
      ///
      /// Locales: en, es, English
      static func lbl_RatingView_Order_Delovered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingView_Order_Delovered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingView_Order_Delovered"
        }

        return NSLocalizedString("lbl_RatingView_Order_Delovered", bundle: bundle, comment: "")
      }

      /// en translation: Your order was scheduled. We'll notify you when your scheduled delivery begins.
      ///
      /// Locales: en, es, English
      static func lbl_RatingView_Order_Processed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RatingView_Order_Processed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RatingView_Order_Processed"
        }

        return NSLocalizedString("lbl_RatingView_Order_Processed", bundle: bundle, comment: "")
      }

      /// en translation: Your payment has been processed successfully, the progress will be notified
      ///
      /// Locales: en, es, English
      static func lbl_Processed_Sucessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Processed_Sucessfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Processed_Sucessfully"
        }

        return NSLocalizedString("lbl_Processed_Sucessfully", bundle: bundle, comment: "")
      }

      /// en translation: Your request has been received and is being processed. We will notify the progress.
      ///
      /// Locales: en, es, English
      static func lbl_OrderFinished_Request_Received(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderFinished_Request_Received", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderFinished_Request_Received"
        }

        return NSLocalizedString("lbl_OrderFinished_Request_Received", bundle: bundle, comment: "")
      }

      /// en translation: Your temporary code has been sent to
      ///
      /// Locales: en, es
      static func hp_full_reset_pin_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_reset_pin_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_reset_pin_subtitle"
        }

        return NSLocalizedString("hp_full_reset_pin_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Your total is:
      ///
      /// Locales: en, es, English
      static func lbl_HeaderFinalizeRide_Total(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_HeaderFinalizeRide_Total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_HeaderFinalizeRide_Total"
        }

        return NSLocalizedString("lbl_HeaderFinalizeRide_Total", bundle: bundle, comment: "")
      }

      /// en translation: Your total to cancel through %@ is
      ///
      /// Locales: en, es
      static func lbl_PaymentTypeSelection_Pay_Total(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("lbl_PaymentTypeSelection_Pay_Total", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PaymentTypeSelection_Pay_Total"
        }

        let format = NSLocalizedString("lbl_PaymentTypeSelection_Pay_Total", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Yuca Fritag con Parmesano Yuca Fritag con Parmesano
      ///
      /// Locales: en, es, English
      static func lbl_ProductNormal_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ProductNormal_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ProductNormal_Title"
        }

        return NSLocalizedString("lbl_ProductNormal_Title", bundle: bundle, comment: "")
      }

      /// en translation: Yuca Fritag with Parmesan cheeseYuca Fritag with Parmesan cheese
      ///
      /// Locales: en, es, English
      static func lbl_PartnerProduct_Tiltle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_PartnerProduct_Tiltle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_PartnerProduct_Tiltle"
        }

        return NSLocalizedString("lbl_PartnerProduct_Tiltle", bundle: bundle, comment: "")
      }

      /// en translation: Yummy Support
      ///
      /// Locales: en, es
      static func lbl_Yummy_Support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Yummy_Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Yummy_Support"
        }

        return NSLocalizedString("lbl_Yummy_Support", bundle: bundle, comment: "")
      }

      /// en translation: Yummy is collecting your order, there isn't tracking information still. You can tap the icon above to see the history of your order.
      ///
      /// Locales: en, es
      static func lbl_yummy_picking_activ_order_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_yummy_picking_activ_order_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_yummy_picking_activ_order_info"
        }

        return NSLocalizedString("lbl_yummy_picking_activ_order_info", bundle: bundle, comment: "")
      }

      /// en translation: Zone
      ///
      /// Locales: en, es
      static func lbl_AddressBook_State_GT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_AddressBook_State_GT", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_AddressBook_State_GT"
        }

        return NSLocalizedString("lbl_AddressBook_State_GT", bundle: bundle, comment: "")
      }

      /// en translation: __min__ minimum
      ///
      /// Locales: en, es, English
      static func min(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Min", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Min"
        }

        return NSLocalizedString("Min", bundle: bundle, comment: "")
      }

      /// en translation: active order
      ///
      /// Locales: en, es, English
      static func lbl_Main_Active_OrderCount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_Active_OrderCount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_Active_OrderCount"
        }

        return NSLocalizedString("lbl_Main_Active_OrderCount", bundle: bundle, comment: "")
      }

      /// en translation: active orders
      ///
      /// Locales: en, es
      static func lbl_Main_Active_Orders_Count(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Main_Active_Orders_Count", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Main_Active_Orders_Count"
        }

        return NSLocalizedString("lbl_Main_Active_Orders_Count", bundle: bundle, comment: "")
      }

      /// en translation: back!
      ///
      /// Locales: en, es, English
      static func lbl_LoginWithPassword_UserName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_LoginWithPassword_UserName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_LoginWithPassword_UserName"
        }

        return NSLocalizedString("lbl_LoginWithPassword_UserName", bundle: bundle, comment: "")
      }

      /// en translation: charge
      ///
      /// Locales: en, es, English
      static func lbl_RideSummaryCars_Cargo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_RideSummaryCars_Cargo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_RideSummaryCars_Cargo"
        }

        return NSLocalizedString("lbl_RideSummaryCars_Cargo", bundle: bundle, comment: "")
      }

      /// en translation: close
      ///
      /// Locales: en, es, English
      static func lbl_To_Close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_To_Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_To_Close"
        }

        return NSLocalizedString("lbl_To_Close", bundle: bundle, comment: "")
      }

      /// en translation: digits of the code that you will find on the back of your card.
      ///
      /// Locales: en, es
      static func cvcDescAutorization_End(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CVCDescAutorization_End", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CVCDescAutorization_End"
        }

        return NSLocalizedString("CVCDescAutorization_End", bundle: bundle, comment: "")
      }

      /// en translation: e-mail
      ///
      /// Locales: en, es, English
      static func lbl_EmailInfo_Email_Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_EmailInfo_Email_Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_EmailInfo_Email_Title"
        }

        return NSLocalizedString("lbl_EmailInfo_Email_Title", bundle: bundle, comment: "")
      }

      /// en translation: eExtra description
      ///
      /// Locales: en, es, English
      static func lbl_OptionsInfo_Extra_Descripation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OptionsInfo_Extra_Descripation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OptionsInfo_Extra_Descripation"
        }

        return NSLocalizedString("lbl_OptionsInfo_Extra_Descripation", bundle: bundle, comment: "")
      }

      /// en translation: hide
      ///
      /// Locales: en, es, English
      static func lbl_Hide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Hide", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Hide"
        }

        return NSLocalizedString("lbl_Hide", bundle: bundle, comment: "")
      }

      /// en translation: hour
      ///
      /// Locales: en, es
      static func hp_lbl_qr_card_remaining_value(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_card_remaining_value", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_card_remaining_value"
        }

        return NSLocalizedString("hp_lbl_qr_card_remaining_value", bundle: bundle, comment: "")
      }

      /// en translation: hours
      ///
      /// Locales: en, es
      static func hp_lbl_qr_card_remaining_time_value(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_qr_card_remaining_time_value", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_qr_card_remaining_time_value"
        }

        return NSLocalizedString("hp_lbl_qr_card_remaining_time_value", bundle: bundle, comment: "")
      }

      /// en translation: hugo Support
      ///
      /// Locales: en, es, English
      static func lbl_Hugo_Support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Hugo_Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Hugo_Support"
        }

        return NSLocalizedString("lbl_Hugo_Support", bundle: bundle, comment: "")
      }

      /// en translation: hugoPay!
      ///
      /// Locales: en, es
      static func hp_CashinSucessViewController_HugoPay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinSucessViewController_HugoPay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinSucessViewController_HugoPay"
        }

        return NSLocalizedString("hp_CashinSucessViewController_HugoPay", bundle: bundle, comment: "")
      }

      /// en translation: km
      ///
      /// Locales: en, es, English
      static func km_UNITS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KM_UNITS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "KM_UNITS"
        }

        return NSLocalizedString("KM_UNITS", bundle: bundle, comment: "")
      }

      /// en translation: lbl_Cancel_Trip
      ///
      /// Locales: en, es, English
      static func cancelRideTitlePicking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelRideTitlePicking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelRideTitlePicking"
        }

        return NSLocalizedString("CancelRideTitlePicking", bundle: bundle, comment: "")
      }

      /// en translation: lbl_Cash
      ///
      /// Locales: en, es, English
      static func cashLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CashLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CashLabel"
        }

        return NSLocalizedString("CashLabel", bundle: bundle, comment: "")
      }

      /// en translation: lbl_End_Trip
      ///
      /// Locales: en, es, English
      static func cancelRideTitleOnWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelRideTitleOnWay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelRideTitleOnWay"
        }

        return NSLocalizedString("CancelRideTitleOnWay", bundle: bundle, comment: "")
      }

      /// en translation: lbl_To_Accept
      ///
      /// Locales: en, es, English
      static func acceptLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AcceptLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AcceptLabel"
        }

        return NSLocalizedString("AcceptLabel", bundle: bundle, comment: "")
      }

      /// en translation: lbl_To_Accept
      ///
      /// Locales: en, es, English
      static func locationChangedAcceptLabelBtn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationChangedAcceptLabelBtn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationChangedAcceptLabelBtn"
        }

        return NSLocalizedString("LocationChangedAcceptLabelBtn", bundle: bundle, comment: "")
      }

      /// en translation: lbl_To_Close
      ///
      /// Locales: en, es, English
      static func closeLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CloseLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CloseLabel"
        }

        return NSLocalizedString("CloseLabel", bundle: bundle, comment: "")
      }

      /// en translation: loading…
      ///
      /// Locales: en, es, English
      static func lbl_Loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Loading"
        }

        return NSLocalizedString("lbl_Loading", bundle: bundle, comment: "")
      }

      /// en translation: need to pay today?
      ///
      /// Locales: en, es, English
      static func lbl_TitlPayService_Pay_Today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_TitlPayService_Pay_Today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_TitlPayService_Pay_Today"
        }

        return NSLocalizedString("lbl_TitlPayService_Pay_Today", bundle: bundle, comment: "")
      }

      /// en translation: out of
      ///
      /// Locales: en, es
      static func progress_Profile_title_component(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Progress_Profile_title_component", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Progress_Profile_title_component"
        }

        return NSLocalizedString("Progress_Profile_title_component", bundle: bundle, comment: "")
      }

      /// en translation: recover password
      ///
      /// Locales: en, es
      static func hp_block_account_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_block_account_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_block_account_button"
        }

        return NSLocalizedString("hp_block_account_button", bundle: bundle, comment: "")
      }

      /// en translation: ricardo_lopez@gmail.com
      ///
      /// Locales: en, es, English
      static func lbl_InfoUser_Email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_InfoUser_Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_InfoUser_Email"
        }

        return NSLocalizedString("lbl_InfoUser_Email", bundle: bundle, comment: "")
      }

      /// en translation: sample info
      ///
      /// Locales: en, es, English
      static func lbl_Optionrecover_sample_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Optionrecover_sample_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Optionrecover_sample_info"
        }

        return NSLocalizedString("lbl_Optionrecover_sample_info", bundle: bundle, comment: "")
      }

      /// en translation: sample@mail.com
      ///
      /// Locales: en, es, English
      static func lbl_ValidateRecoverCode_Email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ValidateRecoverCode_Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ValidateRecoverCode_Email"
        }

        return NSLocalizedString("lbl_ValidateRecoverCode_Email", bundle: bundle, comment: "")
      }

      /// en translation: see detail
      ///
      /// Locales: en, es, English
      static func lbl_See_Detail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_See_Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_See_Detail"
        }

        return NSLocalizedString("lbl_See_Detail", bundle: bundle, comment: "")
      }

      /// en translation: soon in hugo
      ///
      /// Locales: en, es
      static func hp_very_soon_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_very_soon_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_very_soon_title"
        }

        return NSLocalizedString("hp_very_soon_title", bundle: bundle, comment: "")
      }

      /// en translation: successfully
      ///
      /// Locales: en, es
      static func hp_transaction_detail_successfully_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_transaction_detail_successfully_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_transaction_detail_successfully_title"
        }

        return NSLocalizedString("hp_transaction_detail_successfully_title", bundle: bundle, comment: "")
      }

      /// en translation: terms and conditions
      ///
      /// Locales: en, es
      static func lbl_Step1_Term_Condition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_Step1_Term_Condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_Step1_Term_Condition"
        }

        return NSLocalizedString("lbl_Step1_Term_Condition", bundle: bundle, comment: "")
      }

      /// en translation: test
      ///
      /// Locales: en, es
      static func test_Small(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("test_Small", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "test_Small"
        }

        return NSLocalizedString("test_Small", bundle: bundle, comment: "")
      }

      /// en translation: test
      ///
      /// Locales: en, es, English
      static func lbl_FinalizeRideNew_test(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_FinalizeRideNew_test", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_FinalizeRideNew_test"
        }

        return NSLocalizedString("lbl_FinalizeRideNew_test", bundle: bundle, comment: "")
      }

      /// en translation: textoooooooooooorretrtrtertertertertertrtrt
      ///
      /// Locales: en, es, English
      static func lbl_ImprovementList_Details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_ImprovementList_Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ImprovementList_Details"
        }

        return NSLocalizedString("lbl_ImprovementList_Details", bundle: bundle, comment: "")
      }

      /// en translation: to
      ///
      /// Locales: en, es
      static func hp_full_TransactionFiltersViewController_TransactionAmountTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionAmountTo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_TransactionFiltersViewController_TransactionAmountTo"
        }

        return NSLocalizedString("hp_full_TransactionFiltersViewController_TransactionAmountTo", bundle: bundle, comment: "")
      }

      /// en translation: to order
      ///
      /// Locales: en, es
      static func lbl_OrderSummary_Add_To_Order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_OrderSummary_Add_To_Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_OrderSummary_Add_To_Order"
        }

        return NSLocalizedString("lbl_OrderSummary_Add_To_Order", bundle: bundle, comment: "")
      }

      /// en translation: to your card
      ///
      /// Locales: en, es
      static func hp_CashinTransactionDetailViewController_CardLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_CashinTransactionDetailViewController_CardLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_CashinTransactionDetailViewController_CardLabel"
        }

        return NSLocalizedString("hp_CashinTransactionDetailViewController_CardLabel", bundle: bundle, comment: "")
      }

      /// en translation: we have detected that your shipping address is no longer valid in the place where you are
      ///
      /// Locales: en, es, English
      static func locationChangedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LocationChangedMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LocationChangedMessage"
        }

        return NSLocalizedString("LocationChangedMessage", bundle: bundle, comment: "")
      }

      /// en translation: where it is convenient for you to withdraw your order
      ///
      /// Locales: en, es
      static func selectSucursalSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SelectSucursalSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SelectSucursalSubtitle"
        }

        return NSLocalizedString("SelectSucursalSubtitle", bundle: bundle, comment: "")
      }

      /// en translation: with instant access to the best products and service around.
      ///
      /// Locales: en, es
      static func lbl_WhatIsHugo_Cell_Everthing_You(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_WhatIsHugo_Cell_Everthing_You", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_WhatIsHugo_Cell_Everthing_You"
        }

        return NSLocalizedString("lbl_WhatIsHugo_Cell_Everthing_You", bundle: bundle, comment: "")
      }

      /// en translation: you must enter the last
      ///
      /// Locales: en, es
      static func cvcDescAutorization_Middle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CVCDescAutorization_Middle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CVCDescAutorization_Middle"
        }

        return NSLocalizedString("CVCDescAutorization_Middle", bundle: bundle, comment: "")
      }

      /// en translation: ¡Add your first card and start your hugo experience!
      ///
      /// Locales: en, es
      static func first_Card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First_Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "First_Card"
        }

        return NSLocalizedString("First_Card", bundle: bundle, comment: "")
      }

      /// en translation: ¡Get started with hugoPay!
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_list_emptysubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_list_emptysubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_list_emptysubtitle"
        }

        return NSLocalizedString("hp_lbl_transaction_list_emptysubtitle", bundle: bundle, comment: "")
      }

      /// en translation: ¡Hi %@! Start taking to your driver.
      ///
      /// Locales: en, es, English
      static func lbl_ChatEmpty_Title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("lbl_ChatEmpty_Title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_ChatEmpty_Title"
        }

        let format = NSLocalizedString("lbl_ChatEmpty_Title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: ¡Keep your account Safe!
      ///
      /// Locales: en, es
      static func hp_lbl_account_keepsafe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_account_keepsafe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_account_keepsafe"
        }

        return NSLocalizedString("hp_lbl_account_keepsafe", bundle: bundle, comment: "")
      }

      /// en translation: ¡Order transactions as you like!
      ///
      /// Locales: en, es
      static func hp_lbl_transaction_filter_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_lbl_transaction_filter_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_lbl_transaction_filter_description"
        }

        return NSLocalizedString("hp_lbl_transaction_filter_description", bundle: bundle, comment: "")
      }

      /// en translation: ¡Payment Sent!
      ///
      /// Locales: en, es
      static func hp_full_send_money_success_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_send_money_success_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_send_money_success_title"
        }

        return NSLocalizedString("hp_full_send_money_success_title", bundle: bundle, comment: "")
      }

      /// en translation: ¡Request Sent!
      ///
      /// Locales: en, es
      static func hp_full_request_money_success_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_full_request_money_success_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_full_request_money_success_title"
        }

        return NSLocalizedString("hp_full_request_money_success_title", bundle: bundle, comment: "")
      }

      /// en translation: ¡Soon!
      ///
      /// Locales: en, es
      static func hp_expense_control_body_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hp_expense_control_body_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hp_expense_control_body_title"
        }

        return NSLocalizedString("hp_expense_control_body_title", bundle: bundle, comment: "")
      }

      /// en translation: ¡Thanks for your understanding!
      ///
      /// Locales: en, es
      static func lbl_schedule_understanding_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_schedule_understanding_msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_schedule_understanding_msg"
        }

        return NSLocalizedString("lbl_schedule_understanding_msg", bundle: bundle, comment: "")
      }

      /// en translation: • It must have at least 8 characters
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_Length_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_Length_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_Length_Text"
        }

        return NSLocalizedString("lbl_CreateFBPassword_Length_Text", bundle: bundle, comment: "")
      }

      /// en translation: • It must have at least 8 characters
      ///
      /// Locales: en, es, English
      static func lbl_UpdatePassword_Minimum_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UpdatePassword_Minimum_msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UpdatePassword_Minimum_msg"
        }

        return NSLocalizedString("lbl_UpdatePassword_Minimum_msg", bundle: bundle, comment: "")
      }

      /// en translation: • Use at least a capital letter
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_UpperCase_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_UpperCase_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_UpperCase_Text"
        }

        return NSLocalizedString("lbl_CreateFBPassword_UpperCase_Text", bundle: bundle, comment: "")
      }

      /// en translation: • Use at least a capital letter
      ///
      /// Locales: en, es, English
      static func lbl_UpdatePassword_Used_UpperCase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UpdatePassword_Used_UpperCase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UpdatePassword_Used_UpperCase"
        }

        return NSLocalizedString("lbl_UpdatePassword_Used_UpperCase", bundle: bundle, comment: "")
      }

      /// en translation: • Use at least a lower case letter
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_LowerCase_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_LowerCase_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_LowerCase_Text"
        }

        return NSLocalizedString("lbl_CreateFBPassword_LowerCase_Text", bundle: bundle, comment: "")
      }

      /// en translation: • Use at least a lower case letter
      ///
      /// Locales: en, es, English
      static func lbl_UpdatePassword_Used_LowerCase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UpdatePassword_Used_LowerCase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UpdatePassword_Used_LowerCase"
        }

        return NSLocalizedString("lbl_UpdatePassword_Used_LowerCase", bundle: bundle, comment: "")
      }

      /// en translation: • Use at least a number
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_Number_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_Number_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_Number_Text"
        }

        return NSLocalizedString("lbl_CreateFBPassword_Number_Text", bundle: bundle, comment: "")
      }

      /// en translation: • Use at least a number
      ///
      /// Locales: en, es, English
      static func lbl_UpdatePassword_Used_Number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UpdatePassword_Used_Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UpdatePassword_Used_Number"
        }

        return NSLocalizedString("lbl_UpdatePassword_Used_Number", bundle: bundle, comment: "")
      }

      /// en translation: • Use at least a symbol
      ///
      /// Locales: en, es, English
      static func lbl_CreateFBPassword_Symbol_Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_CreateFBPassword_Symbol_Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_CreateFBPassword_Symbol_Text"
        }

        return NSLocalizedString("lbl_CreateFBPassword_Symbol_Text", bundle: bundle, comment: "")
      }

      /// en translation: • Use at least a symbol
      ///
      /// Locales: en, es, English
      static func lbl_UpdatePassword_Used_Symbol(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl_UpdatePassword_Used_Symbol", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbl_UpdatePassword_Used_Symbol"
        }

        return NSLocalizedString("lbl_UpdatePassword_Used_Symbol", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CardHPFullCollectionViewCell.validate()
      try _CashInMoneyIncome.validate()
      try _CashinMoneyConfirmation.validate()
      try _HelpOptionsHPFullView.validate()
      try _HugoPayPhoneView.validate()
      try _PageOnboardingHPFullView.validate()
      try _RequestMoneyConfirmationView.validate()
      try _RequestMoneyView.validate()
      try _ResetPinOptionsHugoPayFullView.validate()
      try _SecurityOptionsHugoPayFullView.validate()
      try _SelectedContactView.validate()
      try _SendMoneyConfirmationView.validate()
      try _SendMoneyView.validate()
      try _TutorialPageCollectionViewCell.validate()
      try _TutorialPageWithoutImageCollectionViewCell.validate()
    }

    struct _CardHPFullCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CardHPFullCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardHPFullCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardHPFullCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hp_full_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_card' is used in nib 'CardHPFullCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visa_orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visa_orange' is used in nib 'CardHPFullCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CashInMoneyIncome: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CashInMoneyIncome"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon-circle-cashIn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-circle-cashIn' is used in nib 'CashInMoneyIncome', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkPurple' is used in nib 'CashInMoneyIncome', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StrongPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StrongPurple1' is used in nib 'CashInMoneyIncome', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CashinMoneyConfirmation: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CashinMoneyConfirmation"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_expand_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_expand_arrow' is used in nib 'CashinMoneyConfirmation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-circle-cashIn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-circle-cashIn' is used in nib 'CashinMoneyConfirmation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in nib 'CashinMoneyConfirmation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visa_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visa_logo' is used in nib 'CashinMoneyConfirmation', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkPurple' is used in nib 'CashinMoneyConfirmation', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DeepPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DeepPurple' is used in nib 'CashinMoneyConfirmation', but couldn't be loaded.") }
          if UIKit.UIColor(named: "PaleLilac", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'PaleLilac' is used in nib 'CashinMoneyConfirmation', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StrongPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StrongPurple1' is used in nib 'CashinMoneyConfirmation', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ContactTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ContactTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactTableViewCell
      }

      fileprivate init() {}
    }

    struct _GeneralErrorAlert: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GeneralErrorAlert"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GeneralErrorAlert? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GeneralErrorAlert
      }

      fileprivate init() {}
    }

    struct _HelpOptionsHPFullView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HelpOptionsHPFullView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_hp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_hp' is used in nib 'HelpOptionsHPFullView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HugoPayPhoneView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HugoPayPhoneView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "contactButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contactButton' is used in nib 'HugoPayPhoneView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "detail_location_shipment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'detail_location_shipment' is used in nib 'HugoPayPhoneView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "el_salvador_flag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'el_salvador_flag' is used in nib 'HugoPayPhoneView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hpf_deselect_contact", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_deselect_contact' is used in nib 'HugoPayPhoneView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "headerPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headerPurple' is used in nib 'HugoPayPhoneView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headlineGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headlineGray' is used in nib 'HugoPayPhoneView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OptionHPFullCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OptionHPFullCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "OptionHugoPayCollectionViewCell"
      let name = "OptionHPFullCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OptionHPFullCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OptionHPFullCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _OptionsHugoPayFullView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OptionsHugoPayFullView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PageOnboardingHPFullView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PageOnboardingHPFullView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PageOnboardingHPFull? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PageOnboardingHPFull
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hp_full_onboarding_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_onboarding_background' is used in nib 'PageOnboardingHPFullView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RequestMoneyConfirmationView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RequestMoneyConfirmationView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hpf_deselect_contact", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_deselect_contact' is used in nib 'RequestMoneyConfirmationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hugoPayLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hugoPayLogo' is used in nib 'RequestMoneyConfirmationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "requestMoneyIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'requestMoneyIcon' is used in nib 'RequestMoneyConfirmationView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkPurple' is used in nib 'RequestMoneyConfirmationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGrayishPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGrayishPurple1' is used in nib 'RequestMoneyConfirmationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headerPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headerPurple' is used in nib 'RequestMoneyConfirmationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headlineGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headlineGray' is used in nib 'RequestMoneyConfirmationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "strokeWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'strokeWhite' is used in nib 'RequestMoneyConfirmationView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _RequestMoneyView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RequestMoneyView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "requestMoneyIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'requestMoneyIcon' is used in nib 'RequestMoneyView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkPurple' is used in nib 'RequestMoneyView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StrongPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StrongPurple1' is used in nib 'RequestMoneyView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headerPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headerPurple' is used in nib 'RequestMoneyView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headlineGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headlineGray' is used in nib 'RequestMoneyView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ResetPinOptionsHugoPayFullView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ResetPinOptionsHugoPayFullView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hp_full_reset_via_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_reset_via_email' is used in nib 'ResetPinOptionsHugoPayFullView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_reset_via_sms", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_reset_via_sms' is used in nib 'ResetPinOptionsHugoPayFullView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SecurityOptionsHugoPayFullView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SecurityOptionsHugoPayFullView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_hp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_hp' is used in nib 'SecurityOptionsHugoPayFullView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SelectedContactView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectedContactView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectedContactView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectedContactView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "removeContactButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'removeContactButton' is used in nib 'SelectedContactView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightGray1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGray1' is used in nib 'SelectedContactView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headerPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headerPurple' is used in nib 'SelectedContactView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SendMoneyConfirmationView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendMoneyConfirmationView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hpf_deselect_contact", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_deselect_contact' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hugoPayLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hugoPayLogo' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ovalPlus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ovalPlus' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sendMoneyIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendMoneyIcon' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkPurple' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGray1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGray1' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGrayishPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGrayishPurple1' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headerPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headerPurple' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headlineGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headlineGray' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "strokeWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'strokeWhite' is used in nib 'SendMoneyConfirmationView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SendMoneyView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendMoneyView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sendMoneyIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendMoneyIcon' is used in nib 'SendMoneyView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkPurple' is used in nib 'SendMoneyView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StrongPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StrongPurple1' is used in nib 'SendMoneyView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headerPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headerPurple' is used in nib 'SendMoneyView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headlineGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headlineGray' is used in nib 'SendMoneyView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TransactionFooterTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TransactionFooterTableViewCell

      let bundle = R.hostingBundle
      let identifier = "cellTransactionFooter"
      let name = "TransactionFooterTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionFooterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionFooterTableViewCell
      }

      fileprivate init() {}
    }

    struct _TransactionHPFullCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TransactionHPFullCell

      let bundle = R.hostingBundle
      let identifier = "TransactionHPFullCell"
      let name = "TransactionHPFullCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionHPFullCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionHPFullCell
      }

      fileprivate init() {}
    }

    struct _TutorialPageCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TutorialPageCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "cellTutorialPage"
      let name = "TutorialPageCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialPageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialPageCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hp_full_ellipse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_ellipse' is used in nib 'TutorialPageCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TutorialPageWithoutImageCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TutorialPageWithoutImageCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "cellTutorialPageNoImage"
      let name = "TutorialPageWithoutImageCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialPageWithoutImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialPageWithoutImageCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hp_full_ellipse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_ellipse' is used in nib 'TutorialPageWithoutImageCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try createAccount.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try hugoPayFull.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try hugoPayFullCashIn.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try hugoPayFullSplash.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try hugoPayFullTutorial.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try requestMoney.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sendMoney.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try transactions.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tutorialHPFull.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tutorialMenu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tutorialSettingsHPFull.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct createAccount: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let alertCreateAccountHPFullViewController = StoryboardViewControllerResource<AlertCreateAccountHPFullViewController>(identifier: "alertCreateAccountHPFullViewController")
      let bundle = R.hostingBundle
      let complementInfoHPFullViewController = StoryboardViewControllerResource<ComplementInfoHPFullViewController>(identifier: "complementInfoHPFullViewController")
      let createAccountBasicInfoViewController = StoryboardViewControllerResource<CreateAccountBasicInfoViewController>(identifier: "createAccountBasicInfoViewController")
      let createBiometricsHPFullViewController = StoryboardViewControllerResource<CreateBiometricsHPFullViewController>(identifier: "createBiometricsHPFullViewController")
      let name = "CreateAccount"
      let successCreateAccountViewController = StoryboardViewControllerResource<SuccessCreateAccountViewController>(identifier: "successCreateAccountViewController")
      let validateIdentityViewController = StoryboardViewControllerResource<ValidateIdentityViewController>(identifier: "validateIdentityViewController")

      func alertCreateAccountHPFullViewController(_: Void = ()) -> AlertCreateAccountHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alertCreateAccountHPFullViewController)
      }

      func complementInfoHPFullViewController(_: Void = ()) -> ComplementInfoHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: complementInfoHPFullViewController)
      }

      func createAccountBasicInfoViewController(_: Void = ()) -> CreateAccountBasicInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createAccountBasicInfoViewController)
      }

      func createBiometricsHPFullViewController(_: Void = ()) -> CreateBiometricsHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createBiometricsHPFullViewController)
      }

      func successCreateAccountViewController(_: Void = ()) -> SuccessCreateAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: successCreateAccountViewController)
      }

      func validateIdentityViewController(_: Void = ()) -> ValidateIdentityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: validateIdentityViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow_payservice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_payservice' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_back' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_background_create_account", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_background_create_account' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_background_create_account_header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_background_create_account_header' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_background_create_account_luneta", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_background_create_account_luneta' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_hugo_logo_create_account", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_hugo_logo_create_account' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_header' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_information", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_information' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_photo' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_plus' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_validate_identity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_validate_identity' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_face_id", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_face_id' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tarjeta_pt_unchek", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tarjeta_pt_unchek' is used in storyboard 'CreateAccount', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.createAccount().alertCreateAccountHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alertCreateAccountHPFullViewController' could not be loaded from storyboard 'CreateAccount' as 'AlertCreateAccountHPFullViewController'.") }
        if _R.storyboard.createAccount().complementInfoHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'complementInfoHPFullViewController' could not be loaded from storyboard 'CreateAccount' as 'ComplementInfoHPFullViewController'.") }
        if _R.storyboard.createAccount().createAccountBasicInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createAccountBasicInfoViewController' could not be loaded from storyboard 'CreateAccount' as 'CreateAccountBasicInfoViewController'.") }
        if _R.storyboard.createAccount().createBiometricsHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createBiometricsHPFullViewController' could not be loaded from storyboard 'CreateAccount' as 'CreateBiometricsHPFullViewController'.") }
        if _R.storyboard.createAccount().successCreateAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'successCreateAccountViewController' could not be loaded from storyboard 'CreateAccount' as 'SuccessCreateAccountViewController'.") }
        if _R.storyboard.createAccount().validateIdentityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'validateIdentityViewController' could not be loaded from storyboard 'CreateAccount' as 'ValidateIdentityViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct hugoPayFull: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let blockUserHugoPayViewController = StoryboardViewControllerResource<BlockUserHugoPayViewController>(identifier: "blockUserHugoPayViewController")
      let bundle = R.hostingBundle
      let createPinHPFullViewController = StoryboardViewControllerResource<CreatePinHPFullViewController>(identifier: "createPinHPFullViewController")
      let createPinSuccessHPFViewController = StoryboardViewControllerResource<CreatePinSuccessHPFViewController>(identifier: "createPinSuccessHPFViewController")
      let detailTransactionHPFullViewController = StoryboardViewControllerResource<DetailTransactionHPFullViewController>(identifier: "detailTransactionHPFullViewController")
      let mainHPFullViewController = StoryboardViewControllerResource<MainHPFullViewController>(identifier: "MainHPFullViewController")
      let menuHPFullViewController = StoryboardViewControllerResource<MenuHPFullViewController>(identifier: "menuHPFullViewController")
      let name = "HugoPayFull"
      let notificationsHPFullViewController = StoryboardViewControllerResource<NotificationsHPFullViewController>(identifier: "notificationsHPFullViewController")
      let onboardingHPFullViewController = StoryboardViewControllerResource<OnboardingHPFullViewController>(identifier: "OnboardingHPFullViewController")
      let resetPasswordHPFullViewController = StoryboardViewControllerResource<ResetPasswordHPFullViewController>(identifier: "resetPasswordHPFullViewController")
      let termsHugoPayViewController = StoryboardViewControllerResource<TermsHPFullControllerViewController>(identifier: "TermsHugoPayViewController")
      let transactionsHPFullViewController = StoryboardViewControllerResource<TransactionsHPFullViewController>(identifier: "TransactionsHPFullViewController")
      let verifyPinHugoPayViewController = StoryboardViewControllerResource<VerifyPinHPFullViewController>(identifier: "VerifyPinHugoPayViewController")

      func blockUserHugoPayViewController(_: Void = ()) -> BlockUserHugoPayViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blockUserHugoPayViewController)
      }

      func createPinHPFullViewController(_: Void = ()) -> CreatePinHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createPinHPFullViewController)
      }

      func createPinSuccessHPFViewController(_: Void = ()) -> CreatePinSuccessHPFViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createPinSuccessHPFViewController)
      }

      func detailTransactionHPFullViewController(_: Void = ()) -> DetailTransactionHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailTransactionHPFullViewController)
      }

      func mainHPFullViewController(_: Void = ()) -> MainHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainHPFullViewController)
      }

      func menuHPFullViewController(_: Void = ()) -> MenuHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuHPFullViewController)
      }

      func notificationsHPFullViewController(_: Void = ()) -> NotificationsHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsHPFullViewController)
      }

      func onboardingHPFullViewController(_: Void = ()) -> OnboardingHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingHPFullViewController)
      }

      func resetPasswordHPFullViewController(_: Void = ()) -> ResetPasswordHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordHPFullViewController)
      }

      func termsHugoPayViewController(_: Void = ()) -> TermsHPFullControllerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsHugoPayViewController)
      }

      func transactionsHPFullViewController(_: Void = ()) -> TransactionsHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionsHPFullViewController)
      }

      func verifyPinHugoPayViewController(_: Void = ()) -> VerifyPinHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifyPinHugoPayViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_hp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_hp' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_payservice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_payservice' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_white_hp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_white_hp' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cut_hugopay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cut_hugopay' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_arrow_back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_arrow_back_white' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_arrow_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_arrow_down' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_back' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_background_header_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_background_header_small' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_dollar_enabled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_dollar_enabled' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_pie", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_pie' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_qr", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_qr' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_recarga", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_recarga' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_scana", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_scana' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_serivicios", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_serivicios' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_solicitudes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_solicitudes' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_transfer_enabled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_transfer_enabled' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_close_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_close_menu' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_float_button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_float_button' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_hugo_pay_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_hugo_pay_logo' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_bell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_bell' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_header' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_header_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_header_white' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_settings' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_switch_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_switch_card' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hpf_icon_filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_icon_filter' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hpf_pincode_bg_success", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_pincode_bg_success' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hpf_pincode_success", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_pincode_success' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hugoPayWhiteLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hugoPayWhiteLogo' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iluAccountlokedHp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iluAccountlokedHp' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightGray1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGray1' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StrongPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StrongPurple1' is used in storyboard 'HugoPayFull', but couldn't be loaded.") }
        }
        if _R.storyboard.hugoPayFull().mainHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainHPFullViewController' could not be loaded from storyboard 'HugoPayFull' as 'MainHPFullViewController'.") }
        if _R.storyboard.hugoPayFull().onboardingHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingHPFullViewController' could not be loaded from storyboard 'HugoPayFull' as 'OnboardingHPFullViewController'.") }
        if _R.storyboard.hugoPayFull().termsHugoPayViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsHugoPayViewController' could not be loaded from storyboard 'HugoPayFull' as 'TermsHPFullControllerViewController'.") }
        if _R.storyboard.hugoPayFull().transactionsHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionsHPFullViewController' could not be loaded from storyboard 'HugoPayFull' as 'TransactionsHPFullViewController'.") }
        if _R.storyboard.hugoPayFull().verifyPinHugoPayViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifyPinHugoPayViewController' could not be loaded from storyboard 'HugoPayFull' as 'VerifyPinHPFullViewController'.") }
        if _R.storyboard.hugoPayFull().blockUserHugoPayViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blockUserHugoPayViewController' could not be loaded from storyboard 'HugoPayFull' as 'BlockUserHugoPayViewController'.") }
        if _R.storyboard.hugoPayFull().createPinHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createPinHPFullViewController' could not be loaded from storyboard 'HugoPayFull' as 'CreatePinHPFullViewController'.") }
        if _R.storyboard.hugoPayFull().createPinSuccessHPFViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createPinSuccessHPFViewController' could not be loaded from storyboard 'HugoPayFull' as 'CreatePinSuccessHPFViewController'.") }
        if _R.storyboard.hugoPayFull().detailTransactionHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailTransactionHPFullViewController' could not be loaded from storyboard 'HugoPayFull' as 'DetailTransactionHPFullViewController'.") }
        if _R.storyboard.hugoPayFull().menuHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuHPFullViewController' could not be loaded from storyboard 'HugoPayFull' as 'MenuHPFullViewController'.") }
        if _R.storyboard.hugoPayFull().notificationsHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsHPFullViewController' could not be loaded from storyboard 'HugoPayFull' as 'NotificationsHPFullViewController'.") }
        if _R.storyboard.hugoPayFull().resetPasswordHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordHPFullViewController' could not be loaded from storyboard 'HugoPayFull' as 'ResetPasswordHPFullViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct hugoPayFullCashIn: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cashinSucessViewController = StoryboardViewControllerResource<CashinSucessViewController>(identifier: "CashinSucessViewController")
      let cashinTransactionDetailViewController = StoryboardViewControllerResource<CashinTransactionDetailViewController>(identifier: "CashinTransactionDetailViewController")
      let failureCashinViewController = StoryboardViewControllerResource<FailureCashinViewController>(identifier: "FailureCashinViewController")
      let name = "HugoPayFullCashIn"

      func cashinSucessViewController(_: Void = ()) -> CashinSucessViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cashinSucessViewController)
      }

      func cashinTransactionDetailViewController(_: Void = ()) -> CashinTransactionDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cashinTransactionDetailViewController)
      }

      func failureCashinViewController(_: Void = ()) -> FailureCashinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: failureCashinViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_white_hp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_white_hp' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cut_ticket", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cut_ticket' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "empty_image_cashin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'empty_image_cashin' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_arrow_back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_arrow_back_white' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ilu-somethingwentwrongHP", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ilu-somethingwentwrongHP' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_hugopayfull", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_hugopayfull' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_hugopayfull_blanco", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_hugopayfull_blanco' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stoke_hpfull_cashin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stoke_hpfull_cashin' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stoke_hpfull_cashin_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stoke_hpfull_cashin_2' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visa_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visa_logo' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DeepPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DeepPurple' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StrongPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StrongPurple1' is used in storyboard 'HugoPayFullCashIn', but couldn't be loaded.") }
        }
        if _R.storyboard.hugoPayFullCashIn().cashinSucessViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cashinSucessViewController' could not be loaded from storyboard 'HugoPayFullCashIn' as 'CashinSucessViewController'.") }
        if _R.storyboard.hugoPayFullCashIn().cashinTransactionDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cashinTransactionDetailViewController' could not be loaded from storyboard 'HugoPayFullCashIn' as 'CashinTransactionDetailViewController'.") }
        if _R.storyboard.hugoPayFullCashIn().failureCashinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'failureCashinViewController' could not be loaded from storyboard 'HugoPayFullCashIn' as 'FailureCashinViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct hugoPayFullSplash: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HugoPayFullSplash"
      let splashHPFullViewController = StoryboardViewControllerResource<SplashHPFullViewController>(identifier: "SplashHPFullViewController")

      func splashHPFullViewController(_: Void = ()) -> SplashHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashHPFullViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.hugoPayFullSplash().splashHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashHPFullViewController' could not be loaded from storyboard 'HugoPayFullSplash' as 'SplashHPFullViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct hugoPayFullTutorial: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "HugoPayFullTutorial"
      let tutorialDoCashInViewController = StoryboardViewControllerResource<TutorialDoCashInViewController>(identifier: "TutorialDoCashInViewController")
      let tutorialInitialPageViewController = StoryboardViewControllerResource<TutorialInitialPageViewController>(identifier: "TutorialInitialPageViewController")
      let tutorialPageControllerViewController = StoryboardViewControllerResource<TutorialPageControllerViewController>(identifier: "TutorialPageControllerViewController")

      func tutorialDoCashInViewController(_: Void = ()) -> TutorialDoCashInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorialDoCashInViewController)
      }

      func tutorialInitialPageViewController(_: Void = ()) -> TutorialInitialPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorialInitialPageViewController)
      }

      func tutorialPageControllerViewController(_: Void = ()) -> TutorialPageControllerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorialPageControllerViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hp_full_ellipse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_ellipse' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_final_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_final_card' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_hugo_pay_logo_allwhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_hugo_pay_logo_allwhite' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_stepOne", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_stepOne' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stoke_hpfull_cashin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stoke_hpfull_cashin' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stoke_hpfull_cashin_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stoke_hpfull_cashin_2' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BlueMagentaishGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BlueMagentaishGray' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DeepPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DeepPurple' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GreenMint", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GreenMint' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StrongPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StrongPurple1' is used in storyboard 'HugoPayFullTutorial', but couldn't be loaded.") }
        }
        if _R.storyboard.hugoPayFullTutorial().tutorialDoCashInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorialDoCashInViewController' could not be loaded from storyboard 'HugoPayFullTutorial' as 'TutorialDoCashInViewController'.") }
        if _R.storyboard.hugoPayFullTutorial().tutorialInitialPageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorialInitialPageViewController' could not be loaded from storyboard 'HugoPayFullTutorial' as 'TutorialInitialPageViewController'.") }
        if _R.storyboard.hugoPayFullTutorial().tutorialPageControllerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorialPageControllerViewController' could not be loaded from storyboard 'HugoPayFullTutorial' as 'TutorialPageControllerViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct requestMoney: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RequestMoney"
      let requestMoneyFailureViewController = StoryboardViewControllerResource<RequestMoneyFailureViewController>(identifier: "RequestMoneyFailureViewController")
      let requestMoneySuccessViewController = StoryboardViewControllerResource<RequestMoneySuccessViewController>(identifier: "RequestMoneySuccessViewController")
      let requestMoneyTransactionDetailViewController = StoryboardViewControllerResource<RequestMoneyTransactionDetailViewController>(identifier: "RequestMoneyTransactionDetailViewController")

      func requestMoneyFailureViewController(_: Void = ()) -> RequestMoneyFailureViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestMoneyFailureViewController)
      }

      func requestMoneySuccessViewController(_: Void = ()) -> RequestMoneySuccessViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestMoneySuccessViewController)
      }

      func requestMoneyTransactionDetailViewController(_: Void = ()) -> RequestMoneyTransactionDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestMoneyTransactionDetailViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_white_hp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_white_hp' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cut_hugopay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cut_hugopay' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_arrow_back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_arrow_back_white' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_header' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_header_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_header_white' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "requestMoneySuccess", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'requestMoneySuccess' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sendMoneyFailure", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendMoneyFailure' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DeepPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DeepPurple' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGray1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGray1' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StrongPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StrongPurple1' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headerPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headerPurple' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
          if UIKit.UIColor(named: "newPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'newPurple' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
          if UIKit.UIColor(named: "statusYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'statusYellow' is used in storyboard 'RequestMoney', but couldn't be loaded.") }
        }
        if _R.storyboard.requestMoney().requestMoneyFailureViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestMoneyFailureViewController' could not be loaded from storyboard 'RequestMoney' as 'RequestMoneyFailureViewController'.") }
        if _R.storyboard.requestMoney().requestMoneySuccessViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestMoneySuccessViewController' could not be loaded from storyboard 'RequestMoney' as 'RequestMoneySuccessViewController'.") }
        if _R.storyboard.requestMoney().requestMoneyTransactionDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestMoneyTransactionDetailViewController' could not be loaded from storyboard 'RequestMoney' as 'RequestMoneyTransactionDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sendMoney: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let contactsViewController = StoryboardViewControllerResource<ContactsViewController>(identifier: "ContactsViewController")
      let name = "SendMoney"
      let sendMoneyFailureViewController = StoryboardViewControllerResource<SendMoneyFailureViewController>(identifier: "SendMoneyFailureViewController")
      let sendMoneySuccessViewController = StoryboardViewControllerResource<SendMoneySuccessViewController>(identifier: "SendMoneySuccessViewController")
      let sendMoneyTransactionDetailViewController = StoryboardViewControllerResource<SendMoneyTransactionDetailViewController>(identifier: "SendMoneyTransactionDetailViewController")

      func contactsViewController(_: Void = ()) -> ContactsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactsViewController)
      }

      func sendMoneyFailureViewController(_: Void = ()) -> SendMoneyFailureViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendMoneyFailureViewController)
      }

      func sendMoneySuccessViewController(_: Void = ()) -> SendMoneySuccessViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendMoneySuccessViewController)
      }

      func sendMoneyTransactionDetailViewController(_: Void = ()) -> SendMoneyTransactionDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendMoneyTransactionDetailViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_white_hp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_white_hp' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cut_hugopay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cut_hugopay' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_arrow_back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_arrow_back_white' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_back' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_header' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_header_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_header_white' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sendMoneyFailure", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendMoneyFailure' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sendMoneyIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendMoneyIcon' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sendMoneySuccess", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendMoneySuccess' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DeepPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DeepPurple' is used in storyboard 'SendMoney', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGray1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGray1' is used in storyboard 'SendMoney', but couldn't be loaded.") }
          if UIKit.UIColor(named: "StrongPurple1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'StrongPurple1' is used in storyboard 'SendMoney', but couldn't be loaded.") }
          if UIKit.UIColor(named: "headerPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'headerPurple' is used in storyboard 'SendMoney', but couldn't be loaded.") }
          if UIKit.UIColor(named: "newPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'newPurple' is used in storyboard 'SendMoney', but couldn't be loaded.") }
        }
        if _R.storyboard.sendMoney().contactsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactsViewController' could not be loaded from storyboard 'SendMoney' as 'ContactsViewController'.") }
        if _R.storyboard.sendMoney().sendMoneyFailureViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendMoneyFailureViewController' could not be loaded from storyboard 'SendMoney' as 'SendMoneyFailureViewController'.") }
        if _R.storyboard.sendMoney().sendMoneySuccessViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendMoneySuccessViewController' could not be loaded from storyboard 'SendMoney' as 'SendMoneySuccessViewController'.") }
        if _R.storyboard.sendMoney().sendMoneyTransactionDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendMoneyTransactionDetailViewController' could not be loaded from storyboard 'SendMoney' as 'SendMoneyTransactionDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct transactions: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Transactions"
      let transactionFiltersViewController = StoryboardViewControllerResource<TransactionFiltersViewController>(identifier: "TransactionFiltersViewController")

      func transactionFiltersViewController(_: Void = ()) -> TransactionFiltersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionFiltersViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hpf_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_calendar' is used in storyboard 'Transactions', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hpf_payment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_payment' is used in storyboard 'Transactions', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hpf_precio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_precio' is used in storyboard 'Transactions', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hpf_price_range", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hpf_price_range' is used in storyboard 'Transactions', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_close_hp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close_hp' is used in storyboard 'Transactions', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DeepPurple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DeepPurple' is used in storyboard 'Transactions', but couldn't be loaded.") }
        }
        if _R.storyboard.transactions().transactionFiltersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionFiltersViewController' could not be loaded from storyboard 'Transactions' as 'TransactionFiltersViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tutorialHPFull: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let cashInTutorialViewController = StoryboardViewControllerResource<CashInTutorialViewController>(identifier: "cashInTutorialViewController")
      let cashbackTutorialViewController = StoryboardViewControllerResource<CashbackTutorialViewController>(identifier: "cashbackTutorialViewController")
      let configurationTutorialViewController = StoryboardViewControllerResource<ConfigurationTutorialViewController>(identifier: "configurationTutorialViewController")
      let moreTutorialViewController = StoryboardViewControllerResource<MoreTutorialViewController>(identifier: "moreTutorialViewController")
      let name = "TutorialHPFull"
      let notificationsTutorialViewController = StoryboardViewControllerResource<NotificationsTutorialViewController>(identifier: "notificationsTutorialViewController")
      let requestMonetViewController = StoryboardViewControllerResource<RequestMonetViewController>(identifier: "requestMonetViewController")
      let sendTutorialViewController = StoryboardViewControllerResource<SendTutorialViewController>(identifier: "sendTutorialViewController")
      let transferTutorialViewController = StoryboardViewControllerResource<TransferTutorialViewController>(identifier: "transferTutorialViewController")
      let unlockTutorialViewController = StoryboardViewControllerResource<UnlockTutorialViewController>(identifier: "unlockTutorialViewController")
      let virtualCardViewController = StoryboardViewControllerResource<VirtualCardViewController>(identifier: "virtualCardViewController")
      let welcomeHPFullViewController = StoryboardViewControllerResource<WelcomeHPFullViewController>(identifier: "welcomeHPFullViewController")

      func cashInTutorialViewController(_: Void = ()) -> CashInTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cashInTutorialViewController)
      }

      func cashbackTutorialViewController(_: Void = ()) -> CashbackTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cashbackTutorialViewController)
      }

      func configurationTutorialViewController(_: Void = ()) -> ConfigurationTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: configurationTutorialViewController)
      }

      func moreTutorialViewController(_: Void = ()) -> MoreTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moreTutorialViewController)
      }

      func notificationsTutorialViewController(_: Void = ()) -> NotificationsTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsTutorialViewController)
      }

      func requestMonetViewController(_: Void = ()) -> RequestMonetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestMonetViewController)
      }

      func sendTutorialViewController(_: Void = ()) -> SendTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendTutorialViewController)
      }

      func transferTutorialViewController(_: Void = ()) -> TransferTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transferTutorialViewController)
      }

      func unlockTutorialViewController(_: Void = ()) -> UnlockTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: unlockTutorialViewController)
      }

      func virtualCardViewController(_: Void = ()) -> VirtualCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: virtualCardViewController)
      }

      func welcomeHPFullViewController(_: Void = ()) -> WelcomeHPFullViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeHPFullViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hp_full_arrow_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_arrow_down' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_card' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_cashin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_cashin' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_request", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_request' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_send' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_tutorial", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_tutorial' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_float_button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_float_button' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_bell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_bell' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_icon_stepOne", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_icon_stepOne' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_nav_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_nav_background' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_path_tutorial", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_path_tutorial' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_settings' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_switch_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_switch_card' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_tutorial_btn_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_tutorial_btn_background' is used in storyboard 'TutorialHPFull', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.tutorialHPFull().cashInTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cashInTutorialViewController' could not be loaded from storyboard 'TutorialHPFull' as 'CashInTutorialViewController'.") }
        if _R.storyboard.tutorialHPFull().cashbackTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cashbackTutorialViewController' could not be loaded from storyboard 'TutorialHPFull' as 'CashbackTutorialViewController'.") }
        if _R.storyboard.tutorialHPFull().configurationTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'configurationTutorialViewController' could not be loaded from storyboard 'TutorialHPFull' as 'ConfigurationTutorialViewController'.") }
        if _R.storyboard.tutorialHPFull().moreTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moreTutorialViewController' could not be loaded from storyboard 'TutorialHPFull' as 'MoreTutorialViewController'.") }
        if _R.storyboard.tutorialHPFull().notificationsTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsTutorialViewController' could not be loaded from storyboard 'TutorialHPFull' as 'NotificationsTutorialViewController'.") }
        if _R.storyboard.tutorialHPFull().requestMonetViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestMonetViewController' could not be loaded from storyboard 'TutorialHPFull' as 'RequestMonetViewController'.") }
        if _R.storyboard.tutorialHPFull().sendTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendTutorialViewController' could not be loaded from storyboard 'TutorialHPFull' as 'SendTutorialViewController'.") }
        if _R.storyboard.tutorialHPFull().transferTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transferTutorialViewController' could not be loaded from storyboard 'TutorialHPFull' as 'TransferTutorialViewController'.") }
        if _R.storyboard.tutorialHPFull().unlockTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'unlockTutorialViewController' could not be loaded from storyboard 'TutorialHPFull' as 'UnlockTutorialViewController'.") }
        if _R.storyboard.tutorialHPFull().virtualCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'virtualCardViewController' could not be loaded from storyboard 'TutorialHPFull' as 'VirtualCardViewController'.") }
        if _R.storyboard.tutorialHPFull().welcomeHPFullViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeHPFullViewController' could not be loaded from storyboard 'TutorialHPFull' as 'WelcomeHPFullViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tutorialMenu: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let controlHPFullTutorialViewController = StoryboardViewControllerResource<ControlHPFullTutorialViewController>(identifier: "controlHPFullTutorialViewController")
      let hugoCashTutorialViewController = StoryboardViewControllerResource<HugoCashTutorialViewController>(identifier: "hugoCashTutorialViewController")
      let name = "TutorialMenu"
      let pagoQRTutorialViewController = StoryboardViewControllerResource<PagoQRTutorialViewController>(identifier: "pagoQRTutorialViewController")
      let pagoTutorialViewController = StoryboardViewControllerResource<PagoTutorialViewController>(identifier: "pagoTutorialViewController")
      let recargaTutorialViewController = StoryboardViewControllerResource<RecargaTutorialViewController>(identifier: "recargaTutorialViewController")
      let requestTutorialViewController = StoryboardViewControllerResource<RequestTutorialViewController>(identifier: "requestTutorialViewController")

      func controlHPFullTutorialViewController(_: Void = ()) -> ControlHPFullTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: controlHPFullTutorialViewController)
      }

      func hugoCashTutorialViewController(_: Void = ()) -> HugoCashTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hugoCashTutorialViewController)
      }

      func pagoQRTutorialViewController(_: Void = ()) -> PagoQRTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pagoQRTutorialViewController)
      }

      func pagoTutorialViewController(_: Void = ()) -> PagoTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pagoTutorialViewController)
      }

      func recargaTutorialViewController(_: Void = ()) -> RecargaTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recargaTutorialViewController)
      }

      func requestTutorialViewController(_: Void = ()) -> RequestTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestTutorialViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hp_full_circle_pie", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_pie' is used in storyboard 'TutorialMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_qr", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_qr' is used in storyboard 'TutorialMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_recarga", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_recarga' is used in storyboard 'TutorialMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_scana", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_scana' is used in storyboard 'TutorialMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_serivicios", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_serivicios' is used in storyboard 'TutorialMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_solicitudes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_solicitudes' is used in storyboard 'TutorialMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_tutorial", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_tutorial' is used in storyboard 'TutorialMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_close_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_close_menu' is used in storyboard 'TutorialMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.tutorialMenu().controlHPFullTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'controlHPFullTutorialViewController' could not be loaded from storyboard 'TutorialMenu' as 'ControlHPFullTutorialViewController'.") }
        if _R.storyboard.tutorialMenu().hugoCashTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hugoCashTutorialViewController' could not be loaded from storyboard 'TutorialMenu' as 'HugoCashTutorialViewController'.") }
        if _R.storyboard.tutorialMenu().pagoQRTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pagoQRTutorialViewController' could not be loaded from storyboard 'TutorialMenu' as 'PagoQRTutorialViewController'.") }
        if _R.storyboard.tutorialMenu().pagoTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pagoTutorialViewController' could not be loaded from storyboard 'TutorialMenu' as 'PagoTutorialViewController'.") }
        if _R.storyboard.tutorialMenu().recargaTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recargaTutorialViewController' could not be loaded from storyboard 'TutorialMenu' as 'RecargaTutorialViewController'.") }
        if _R.storyboard.tutorialMenu().requestTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestTutorialViewController' could not be loaded from storyboard 'TutorialMenu' as 'RequestTutorialViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tutorialSettingsHPFull: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let helpTutorialViewController = StoryboardViewControllerResource<HelpTutorialViewController>(identifier: "helpTutorialViewController")
      let manageAccountViewController = StoryboardViewControllerResource<ManageAccountViewController>(identifier: "manageAccountViewController")
      let name = "TutorialSettingsHPFull"
      let securityTutorialViewController = StoryboardViewControllerResource<SecurityTutorialViewController>(identifier: "securityTutorialViewController")

      func helpTutorialViewController(_: Void = ()) -> HelpTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpTutorialViewController)
      }

      func manageAccountViewController(_: Void = ()) -> ManageAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: manageAccountViewController)
      }

      func securityTutorialViewController(_: Void = ()) -> SecurityTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: securityTutorialViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hp_full_circle_block", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_block' is used in storyboard 'TutorialSettingsHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_help", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_help' is used in storyboard 'TutorialSettingsHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_managed_account", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_managed_account' is used in storyboard 'TutorialSettingsHPFull', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hp_full_circle_tutorial", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hp_full_circle_tutorial' is used in storyboard 'TutorialSettingsHPFull', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.tutorialSettingsHPFull().helpTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpTutorialViewController' could not be loaded from storyboard 'TutorialSettingsHPFull' as 'HelpTutorialViewController'.") }
        if _R.storyboard.tutorialSettingsHPFull().manageAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'manageAccountViewController' could not be loaded from storyboard 'TutorialSettingsHPFull' as 'ManageAccountViewController'.") }
        if _R.storyboard.tutorialSettingsHPFull().securityTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'securityTutorialViewController' could not be loaded from storyboard 'TutorialSettingsHPFull' as 'SecurityTutorialViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
